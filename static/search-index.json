[
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/ssh.md",
    "title": "SSH into the VM",
    "url": "/users/ssh",
    "content": "In this Threefold Guide, we show how easy it is to deploy a full virtual machine (VM) and SSH into a 3Node with OpenSSH on Linux, MacOS and Windows with either an IPv4 or a Mycelium connection. To deploy different workloads, the SSH connection process should be very similar. Overview The main steps for the whole process are the following: Create an SSH key pair Deploy a VM on a 3Node SSH into the 3Node Linux Here are the steps to SSH into a 3Node with either IPv4 or Mycelium on Linux. To create the SSH key pair, write in the terminal Save in default location Write a password (optional) To see the public key, write in the terminal Select and copy the public key when needed To deploy a full VM On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select or in In , click on Click To SSH into the VM once the 3Node is deployed Copy the IP address Open the terminal, write the following with the deployment address and write yes to confirm You now have an SSH connection on Linux. MacOS Here are the steps to SSH into a 3Node with either IPv4 or Mycelium on MacOS. To create the SSH key pair, in the terminal write Save in default location Write a password (optional) To see the public key, write in the terminal Select and copy the public key when needed To deploy a full VM On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select or in In , click on Click To SSH into the VM once the 3Node is deployed Copy the IP address Open the terminal, write the following with the deployment address and write yes to confirm You now have an SSH connection on MacOS. Windows Here are the steps to SSH into a 3Node with either IPv4 or Mycelium on Windows. To download OpenSSH client and OpenSSH server Open the and select Click Click Verifiy if OpenSSH Client and OpenSSH Server are there If not Click Search OpenSSH Install OpenSSH Client and OpenSSH Server To create the SSH key pair, open and write Save in default location Write a password (optional) To see the public key, write in Select and copy the public key when needed To deploy a full VM On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select or in In , click on Click To SSH into the VM once the 3Node is deployed Copy the IP address Open , write the following with the deployment address and write yes to confirm You now have an SSH connection on Window.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/intro.md",
    "title": "Deploy on the Grid",
    "url": "/users/intro",
    "content": "Welcome to the ThreeFold Grid User Documentation. This section provides basic user documentation for deploying and using ThreeFold Grid services. First Steps Here's what you can easily do on the ThreeFold Grid: - Deploy VMs with the ThreeFold Dashboard - Access VMs over Mycelium - Access VMs over WireGuard - Set up web gateways and domains",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/deploy-a-vm.md",
    "title": "Deploy a VM",
    "url": "/users/deploy-a-vm",
    "content": "We present the steps to deploy a full VM on the TFGrid. Deployment Deploy a new full virtual machine on the Threefold Grid - Make sure you have a wallet - From the sidebar click on Applications - Click on Full Virtual Machine Process: ! - Fill in the instance name: it's used to reference the Full VM in the future. - Choose the image from the drop down (e.g Alpine, Ubuntu) or you can click on and manually specify the flist URL and the entrypoint. - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 25 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - to connect the Virtual Machine to Planetary network - to enable Mycelium on the virtual machine - to add a wireguard access to the Virtual Machine - flag to add GPU to the Virtual machine - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated node - flag to retrieve only certified nodes - Choose the location of the node - - - Choose the node to deploy the Full Virtual Machine on ! - If you have more than one SSH keys set, you can click on to select which one to use for this deployment. You can attach one or more disks to the Virtual Machine by clicking on the Disks tab and the plus sign and specify the following parameters ! - Disk name - Disk size At the bottom of the page, you can see a list of all of the virtual machines you deployed. You can click on for more details: ! You can also go to JSON tab for full details: !",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/create-an-account.md",
    "title": "Create an Account",
    "url": "/users/create-an-account",
    "content": "You can create a TFChain account with the ThreeFold Connect app. Download the App The ThreeFold Connect app is available for both iOS and Android devices. - Google Store Link - Apple Store Create an Account To create a new account, you will be asked to choose a . This ID will be used, as well as the seed phrase, when you want to log in after having logged out of your account. You will also need to add a valid email address. You will need to access your email and confirm the validation email from ThreeFold to use properly the TF Connect app wallet. You will be shown your seed phrase. Keep this in a secure and offline place. You will need the 3bot ID, i.e. the account , and the to recover your account. This seed phrase is of utmost importance. Do not lose it nor give it to anyone.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/buy-tft.md",
    "title": "Buy TFT",
    "url": "/users/buy-tft",
    "content": "You can buy TFT directly on the ThreeFold Connect app. Steps - Open the TFConnect App - Click on Wallet - Click on buy TFT - Buy TFT from the available options - Confirm the transaction - Wait for the transaction to be confirmed Once your transaction is done, you can bridge TFT to TFChain. Read the next section for more information.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/bridge-tft.md",
    "title": "Bridge to TFChain",
    "url": "/users/bridge-tft",
    "content": "You can bridge TFT between TFChain and Stellar chain. ! To bridge TFT, follow the steps below: - On ThreeFold Connect, go to - Set the direction of the bridge - TFChain to Stellar - Stellar to TFChain - To: Enter the address of the receiver - Optional: Click on the icon on the right to set a wallet or favorite address - Amount: Enter the amount to send - Click to submit the bridge transfer - Click to finalize the transaction",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/access-dashboard.md",
    "title": "Access the Dashboard",
    "url": "/users/access-dashboard",
    "content": "To interact with TFChain, users can connect their TFChain wallet to the wallet connector available on the ThreeFold Dashboard. You can create a new wallet or import an existing wallet. Access the Dashboard Access the ThreeFold Dashboard to deploy a VM: - https://dashboard.grid.tf ! Import a Wallet You can import an existing wallet by entering in the associated seed phrase or HEX secret of the existing wallet. - To import a wallet or a farm created on the TF Connect app, use the TFChain HEX secret. - From the menu, open Wallet -> Wallet name -> Info symbol (i), and then reveal and copy the TFChain Secret. When you import a new wallet, you can decide a new password and email address, i.e. you only need the mnemonics to import an existing wallet on the dashboard. ! You will be asked to accept ThreeFold's Terms and Conditions: ! Once you've set your credentials, clicked on Connect and accepted the terms and conditions, your profile will be activated. Upon activation, you will find your Twin ID, Address and wallet current balance generated under your Mnemonics. ! Your current and locked balances will also be available at the top right corner of the dashboard. Here's an example of the balances you can find for your wallet. Some TFT is locked during utilization as the TFGrid bills you for your workloads and traffic. !",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/network/wireguard.md",
    "title": "WireGuard",
    "url": "/users/network/wireguard",
    "content": "In this Threefold Guide, we show how to set up WireGuard to access a 3Node deployment with an SSH connection. Note that WireGuard provides the connection to the 3Node deployment. Prerequisites SSH client of your choice. For the basic information on Open SSH, read this. Deploy a Weblet with WireGuard Access For this guide on WireGuard access, we deploy a full VM. Note that the whole process is similar with other types of ThreeFold weblets on the Dashboard. On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select in In , click on Click Once the Full VM is deployed, a window named Details will appear. You will need to take note of the WireGuard Config to set the WireGuard configurations and the WireGuard IP to SSH into the deployment. > Note: At anytime, you can open the Details window by clicking on the button Show Details under Actions on the Dashboard weblet page. Install WireGuard To install WireGuard, please refer to the official WireGuard installation documentation. Set the WireGuard Configurations When it comes to setting the WireGuard configurations, the steps are similar for Linux and MAC, but differ slightly for Windows. For Linux and MAC, we will be using the CLI. For Windows, we will be using the WireGuard GUI app. Linux and MAC To set the WireGuard connection on Linux or MAC, create a WireGuard configuration file and run WireGuard via the command line: Copy the content WireGuard Config from the Dashboard Details window Paste the content to a file with the extension (e.g. wg.conf) in the directory Start WireGuard with the command wg-quick and, as a parameter, pass the configuration file without the extension (e.g. wg.conf -> wg) Note that you can also specify a config file by path, stored in any location If you want to stop the WireGuard service, you can write the following in the terminal > Note: If it doesn't work and you already did a WireGuard connection with the same file, write on the terminal , then to reset the connection with new configurations. Windows To set the WireGuard connection on Windows, add and activate a tunnel with the WireGuard app: Open the WireGuard GUI app Click on Add Tunnel and then Add empty tunnel Choose a name for the tunnel Erase the content of the main window and paste the content WireGuard Config from the Dashboard Details window Click Save and then click on Activate. Test the WireGuard Connection As a test, you can ping the virtual IP address of the VM to make sure the WireGuard connection is properly established. Make sure to replace with the proper WireGuard IP address: Ping the deployment SSH into the Deployment with Wireguard To SSH into the deployment with Wireguard, use the WireGuard IP shown in the Dashboard Details window. SSH into the deployment You now have access to the deployment over a WireGuard SSH connection.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/network/domains.md",
    "title": "Set a Domain",
    "url": "/users/network/domains",
    "content": "The Domains solution allows users to securely expose servers hosted on local machines or VMs to the public internet. Users are required to specify the machine's IP, which can be a Mycelium IP, an Yggdrasil IP, or a public IP (IPv4 or IPv6). Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Domains Deployment ! - Enter a subdomain to be added to your domain - The flag allows the user to use a custom domain - Choose a gateway node to deploy your static website - Enter the port used to access the machine - Enter the machine's IP - It can be a Mycelium IP, an Yggdrasil IP, or a public IP (IPv4 or IPv6) Once this is done, you can see a list of all of your deployed instances: ! Click on the button Visit under Actions to go to your exposed website!",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/network/mycelium/04_mycelium-linux.md",
    "title": "Mycelium on Linux",
    "url": "/users/network/mycelium/mycelium-linux",
    "content": "In this section, we cover how to install Mycelium. This guide can be done on a local machine and also on a full VM running on the TFGrid. Currently, Linux, macOS and Windows are supported. On Windows, you must have in the same directory you are executing the binary from. Considerations You might need to run Mycelium as root, enable IPv6 at the OS level and disconnect your VPN. Set Mycelium We show how to set up Mycelium. - Update the system - Download the latest Mycelium release: https://github.com/threefoldtech/mycelium/releases/latest - E.g. for Linux 64-bit x86 processor, download the latest release of the file - Extract Mycelium - Move Mycelium to your path Start Mycelium You can start Mycelium - Start Mycelium - Open another terminal - Check the Mycelium connection information (address and public key) Use Mycelium Once you've set Mycelium, you can use it to ping other addresses and also to connect into VMs running on the TFGrid. - Ping the VM from another machine with IPv6 - SSH into a VM running on the TFGrid Mycelium Service (optional) You can create a systemd service to make sure Mycelium is always enabled and running. - Create a Mycelium service - Set the service and save the file - Enable the service - Verify that the Mycelium service is properly running Systemd will start up the Mycelium, restart it if it ever crashes, and start it up automatically after any reboots.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/network/mycelium/03_use-the-app.md",
    "title": "Use the App",
    "url": "/users/network/mycelium/use-the-app",
    "content": "Start Mycelium To start Mycelium, simply open the app and click on . ! > Note for Windows Users: The Mycelium app must be run as an administrator to function properly. Right-click on the application icon and select \"Run as administrator\" to ensure proper network connectivity. Stop or Restart Mycelium To stop or restart Mycelium, click on the appropriate button. ! Add Peers You can add different Mycelium peers in the window. Simply add peers and then either start or restart the app. ! For example, if you want to add the node with the IPv4 address with the tcp port , simply add the following line then start or restart the app. Mycelium Address When you use the Mycelium app, you are assigned a unique Mycelium address. To copy the Mycelium address, click on the button on the right of the address. ! Deploy on the Grid with Mycelium Once you've installed Mycelium, you can deploy on the ThreeFold Grid and connect to your workload using Mycelium. As a starter, you can explore the ThreeFold Grid and deploy apps on the ThreeFold Dashboard using Mycelium to connect.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/network/mycelium/02_mycelium-app.md",
    "title": "Download the App",
    "url": "/users/network/mycelium/mycelium-app",
    "content": "The Mycelium app is available for Android, Windows, macOS and iOS. For Linux, read the Linux Installation section. Download Links You can download the Mycelium app with the following links: - iOS and macOS - Download the app from the App Store - Android - Download the app from the Google Play Store - Windows - Go to the official Mycelium release page and download the latest Upcoming Updates - The user interface (UI) will be drastically improved in upcoming releases to better represent the available features.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/users/docs/network/mycelium/01_features.md",
    "title": "Features",
    "url": "/users/network/mycelium/features",
    "content": "Mycelium is a locality-aware, end-to-end encrypted network designed for efficient and secure communication between nodes. Below are its key features: What Makes Mycelium Unique 1. Locality Awareness Mycelium identifies the shortest path between nodes, optimizing communication based on location. 2. End-to-End Encryption All traffic between nodes is encrypted, ensuring secure data transmission. 3. Traffic Routing Over Friend Nodes Traffic can be routed through nodes of trusted friends, maintaining location awareness. 4. Automatic Rerouting If a physical link fails, Mycelium automatically reroutes traffic to ensure uninterrupted connectivity. 5. Your network Address Linked to Private Key Each node is assigned an IPv6 network address that is cryptographically linked to its private key. 6. Scalability Mycelium is designed to scale to a planetary level. The team has evaluated multiple overlay networks in the past and is focused on overcoming scalability challenges. Tech 1. Flexible Deployment Mycelium can be run without a TUN interface, allowing it to function solely as a reliable message bus. 2. Reliable Message Bus Mycelium includes a simple and reliable message bus built on top of its network layer. 1. Multiple Communication Protocols Mycelium supports various communication methods, including QUIC and TCP. The team is also developing hole-punching for QUIC, enabling direct peer-to-peer (P2P) traffic without intermediaries.",
    "category": "users"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/intro.md",
    "title": "Become a Farmer",
    "url": "/farmers/intro",
    "content": "!Become a Farmer!Become a Farmer > Become a contributor of storage, compute & network capacity to the ThreeFold Grid. ThreeFold Farming is a unique concept in the ThreeFold ecosystem where individuals, called farmers, can: - Deploy nodes (3Nodes) that connect to the ThreeFold Grid - Contribute computing resources (data, cloud and network) to the decentralized ThreeFold Grid - Earn rewards for providing capacity on the grid - Earn rewards when there is utilization on their nodes - Support a peer-to-peer cloud infrastructure alternative to centralized providers A Farmer's Journey ThreeFold farmers are individuals and organizations who operate nodes that provide capacity to the ThreeFold network. Since these nodes are standard computer hardware that runs ThreeFold's self-healing Zero-OS operating system, farmers simply need to provide electricity and network connectivity to the nodes. As the nodes operate mostly autonomously, little to no administration work is required by the farmers, though they may need to replace faulty hardware from time to time. Farmers have been the backbone of the grid for years now. Thanks to every farmer out there!",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/farming_faq.md",
    "title": "Farming FAQ",
    "url": "/farmers/farming_faq",
    "content": "ThreeFold Farming Frequently Asked Questions General Farming Questions What is ThreeFold farming? ThreeFold farming is the process of connecting hardware (3Nodes) to the ThreeFold Grid to provide decentralized compute and storage capacity. Farmers earn ThreeFold Tokens (TFT) through both proof-of-capacity rewards and utilization rewards. How do I become a farmer on the ThreeFold Grid? You can become a farmer by either buying a certified node from an official ThreeFold vendor or by building your own DIY 3Node following the documentation. What is the minimum uptime requirement for certified v4 nodes? Certified v4 nodes must maintain a minimum uptime of 98% on the ThreeFold Grid. This ensures reliable service for users deploying workloads on the network.",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_buying/order_a_node.md",
    "title": "Order a Node",
    "url": "/farmers/3node_buying/order_a_node",
    "content": "The ThreeFold V4 nodes are available now for order directly on our official partners' websites. - HostService (Europe, Asia, Africa, Australia) - Duck Farm Data (America) > Make sure to input the correct farm ID as explained here",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_buying/create_a_farm.md",
    "title": "Create a Farm",
    "url": "/farmers/3node_buying/create_a_farm",
    "content": "Overview To create a farm on ThreeFold V4, simply download the ThreeFold Connect app, create an account and then create a V4 farm. Download the App The ThreeFold Connect app is available for both iOS and Android devices. - Google Store Link - Apple Store Create an Account To create a new account, you will be asked to choose a . This ID will be used, as well as the seed phrase, when you want to log in after having logged out of your account. You will also need to add a valid email address. You will need to access your email and confirm the validation email from ThreeFold to use properly the TF Connect app wallet. You will be shown your seed phrase. Keep this in a secure and offline place. You will need the 3bot ID, i.e. the account , and the to recover your account. This seed phrase is of utmost importance. Do not lose it nor give it to anyone. Create a Farm Open the TF Connect app, go to Farming and click on . Then click on the plus button to create a farm. Choose a farm name and select a wallet then click . Access the Farm ID Once the farm is created, simply click on your farm name on the V4 farm page to access more info. Your farm ID will be shown below .",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_building/6_boot_3node.md",
    "title": "6. Boot the 3Node",
    "url": "/farmers/3node_building/boot_3node",
    "content": "We explain how to boot the 3Node with the Zero-OS bootstrap image with a USB key. One of the great features of Zero-OS is that it can be completely run within the cache of your 3Node. Indeed, the booting device that contains your farm ID will connect to the ThreeFold Grid and download everything needed to run smoothly. There are many benefits in terms of security and protection of data that comes with this. Booting the 3Node with Zero-OS To boot Zero-OS, insert your Zero-OS bootstrap image USB key, power on your computer and choose the right booting sequence and parameters (BIOS or UEFI) in your BIOS/UEFI settings. Then, restart the 3Node. Zero-OS should boot automatically. Note that you need an ethernet cable connected to your router or switch. You cannot farm on the ThreeFold Grid with Wifi. The first time you boot a 3Node, it will be written: “This node is not registered (farmer : NameOfFarm). This is normal. The Grid will create a node ID and you will be able to see it on screen. This can take a couple of minutes. > Note: If time passes (an hour and more) and the node does not get registered, in many cases, wiping the disks all over again and trying another reboot usually resolves this issue. When the registration process is complete, you will see your node ID on screen.",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_building/5_set_bios_uefi.md",
    "title": "5. Set the BIOS/UEFI",
    "url": "/farmers/3node_building/set_bios_uefi",
    "content": "In this section, we explain how to properly set the BIOS/UEFI of your 3Node. If you do not want to read the whole page, make sure to read this section, which covers the basics. Note that the BIOS mode is usually needed for older hardware while the UEFI mode is usually needed for newer hardware, when it comes to booting properly Zero-OS on your DIY 3Node. If it doubt, start with UEFI and if it doesn't work as expected, try with BIOS. Before diving into the BIOS/UEFI settings, we will present some general considerations on Z-OS and DHCP. Z-OS and DHCP The operating system running on the 3Nodes is called Zero-OS (Z-OS). When it comes to setting the proper network for your 3Node farm, you must use DHCP since Z-OS is going to request an IP from the DHCP server if there's one present, and it won't get network connectivity if there's no DHCP. The Z-OS philosophy is to minimize configuration wherever possible, so there's nowhere to supply a static config when setting your 3Node network. Instead, the farmer is expected to provide DHCP. While it is possible to set fixed IP addresses with the DHCP for the 3Nodes, it is recommended to avoid this and just set the DHCP normally without fixed IP addresses. By setting DHCP in BIOS/UEFI, an IP address is automatically assigned by your router to your 3Node every time you boot it. Regular Computer and 3Node Network Differences For a regular computer (not a 3Node), if you want to use a static IP in a network with DHCP, you'd first turn off DHCP and then set the static IP to an IP address outside the DHCP range. That being said, with Z-OS, there's no option to turn off DHCP and there's nowhere to set a static IP, besides public config and remote management. In brief, the farmer must provide DHCP, either on a private or a public range, for the 3Node to boot. The Essential Features of BIOS/UEFI for a 3Node There are certain things that you should make sure are set properly on your 3Node. As a general advice, you can Load Defaults (Settings) on your BIOS/UEFI, then make sure the options below are set properly. Choose the correct combination of BIOS/UEFI and bootstrap image on https://bootstrap.grid.tf/ Newer system will use UEFI Older system will use BIOS Hint: If your 3Node boot stops at Initializing Network Devices, try the other method (BIOS or UEFI) Set Multi-Processor and Hyperthreading at Enabled Sometimes, it will be written Virtual Cores, or Logical Cores. Set Virtualization at Enabled On Intel, it is denoted as CPU virtualization and on ASUS, it is denoted as SVM. Make sure virtualization is enabled and look for the precise terms in your specific BIOS/UEFI. Set AC Recovery at Last Power State This will make sure your 3Node restarts after losing power momentarily. It can have different names depending on the hardware, e.g. , check the hardware docs if needed. Select the proper Boot Sequence for the 3Node to boot Zero-OS from your bootstrap image e.g., if you have a USB key as a bootstrap image, select it in Boot Sequence Set Server Lookup Method (or the equivalent) at DNS. Only use Static IP if you know what you are doing. Your router will assign a dynamic IP address to your 3Node when it connects to Internet. Set Client Address Method (or the equivalent) at DHCP. Only use Static IP if you know what you are doing. Your router will assign a dynamic IP address to your 3Node when it connects to Internet. Secure Boot should be left at disabled Enable it if you know what you are doing. Otherwise, it should be set at disabled. Set Network Stack and PXE at Enabled. Note: Network Stack is a prerequisite for PXE. Note: In some cases, farmers had to disable Network State for the 3Node to properly boot, but in general enabling it is needed. BIOS/UEFI and Zero-OS Bootstrap Image Combinations To properly boot the Zero-OS image, you can either use an image made for a BIOS system or a UEFI system, this depends on your system. BIOS is older technology. It means Basic Input/Output System. UEFI is newer technology. It means Unified Extensible Firmware Interface*. BIOS/UEFI is, in a way, the link between the hardware and the software of your computer. In general, setting a 3Node is similar whether it is with a BIOS or UEFI system. The important is to choose the correct combination of boot media and boot mode (BIOS/UEFI). The bootstrap images are available here. The choices are: 1. EFI IMG - UEFI 2. EFI FILE - UEFI 3. iPXE - Boot from network 4. ISO - BIOS 5. USB - BIOS 6. LKRN - Boot from network Choices 1 and 2 are for UEFI (newer models). Choices 4 and 5 are for BIOS (newer models). Choices 3 and 6 are mainly for network boot. Refer to this previous section for more information on creating a Zero-OS bootstrap image.",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_building/4_wipe_all_disks.md",
    "title": "4. Wipe All the Disks",
    "url": "/farmers/3node_building/wipe_all_disks",
    "content": "In this section, we explain how to wipe all the disks of your 3Node. Main Steps It only takes a few steps to wipe all the disks of a 3Node. 1. Create a Linux bootstrap image 2. Boot Linux in Try Mode 3. Wipe All the Disks ThreeFold runs its own OS, which is Zero-OS. You thus need to start with completely wiped disks. Note that ALL disks must be wiped. Otherwise, Zero-OS won't boot. An easy method is to download a Linux distribution and wipe the disks by running simple commands on the command-line interface. We will show how to do this with Ubuntu 24.04. LTS. This distribution is easy to use and it is thus a good introduction to Linux, in case you haven't yet explored this great operating system. 1. Create a Linux Bootstrap Image Download the Ubuntu 24.04 ISO file and burn the ISO image on a USB key. Make sure you have enough space on your USB key. You can also use other Linux Distro such as GRML, if you want a lighter ISO image. The process is the same as in section Burning the Bootstrap Image, but with the Linux ISO instead of the Zero-OS bootstrap image. BalenaEtcher is recommended as it formats your USB in the process, and it is available for MAC, Windows and Linux. 2. Boot Linux in Try Mode When you boot the Linux ISO image, make sure to choose Try Mode. Otherwise, it will install Linux on your computer. You do not want this. If you are using GRML, simply boot the USB key with the GRML bootstrap image, select GRML then press to enter the shell mode. Once this is done, the next steps are similar to the Ubuntu method: you will use and commands to identify and wipe the disks. 3. Use wipefs to Wipe All the Disks We will now use to remove all the data on the disks. > Important: Make sure that you have no important data on your disks, or make sure that you have copies of your disks before proceeding. Once Linux is booted, open the terminal. First, you can check the available disks by writing the command: The types of disk you can see are: - - SATA type - e.g. - Note: It can be an SSD disk or a USB key - - NVMe type - e.g. SATA Disks To wipe one specific SATA disk at a time, use the following command by replacing with the specific disk (e.g. ): To wipe all SATA disks (except the Linux distro USB disk you are currently using to run Ubuntu in Try Mode), take note of the Linux distro USB disk (e.g. ) and replace with it in the following line: NVMe Disks To wipe one specific NVMe disk at a time, use the following command by replacing with the specific disk (e.g. ) : To wipe all NVMe disks, use the following line:",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_building/3_set_hardware.md",
    "title": "3. Set the Hardware",
    "url": "/farmers/3node_building/set_hardware",
    "content": "In this section, we cover the essential farming requirements when it comes to ThreeFold 3Node hardware. Hardware Requirements You need a theoretical minimum of 500 GB of SSD and 2 GB of RAM on a mini pc, desktop or server. Also, note that ThreeFold runs its own OS, which is Zero-OS. You thus need to start with completely wiped disks. You cannot farm TFT with Windows, Linux or MAC OS installed on your disks. If you need to use such OS temporarily, boot it in Try mode with a removable media (USB key). 3Node Requirements Summary Any computer with the following specifications can be used as a DIY 3Node. - A wired ethernet connection is required. - The router must be set with DHCP. - Any 64-bit hardware with an Intel or AMD processor chip. - A minimum of 500 GB of SSD and a bare minimum of 2 GB of RAM is required. - Servers, desktops and mini computers type hardware are compatible.",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_building/2_bootstrap_image.md",
    "title": "2. Create a Zero-OS Bootstrap Image",
    "url": "/farmers/3node_building/bootstrap_image",
    "content": "We will now learn how to create a Zero-OS bootstrap image in order to boot a DIY 3Node. Download the Zero-OS Bootstrap Image Let's download the Zero-OS bootstrap image via the Zero-OS Boot Generator for Grid V4: https://v4.bootstrap.grid.tf ! On the Boot Generator page, write your farm ID and choose mode to deploy on mainnet. ! Choose a bootstrap image format to download. If your system is new, choose an image format for a bootable kernel. You can use either or . - - Burn this image with BalenaEtcher. See below for more info. - - Format the USB to one partition and save the bootstrap image as . ! For older systems, choose an image format for a bootable kernel. - For BIOS CD/DVD, choose ISO. - For BIOS USB, choose USB. ! Next, we cover in details how to burn the bootstrap image. Burn the Zero-OS Bootstrap Image We show how to burn the Zero-OS bootstrap image. A quick and modern way is to burn the bootstrap image on a USB key. USB Key BIOS+UEFI There are many ways to burn the bootstrap image on a USB key. The easiest way that works for all operating systems is to use BalenaEtcher. We also provide other methods. BalenaEtcher (MAC, Linux, Windows) For MAC, Linux and Windows, you can use BalenaEtcher to flash the image on a USB key. This program also formats the USB in the process. This will work for the option EFI IMG for UEFI boot, and with the option USB for BIOS boot. Simply follow the steps presented to you and make sure you select the bootstrap image file you downloaded previously. > Note: There are alternatives to BalenaEtcher (e.g. usbimager for Windows, MAC and Linux, and Rufus for Windows). General Steps with BalenaEtcher: 1. Download BalenaEtcher 2. Open BalenaEtcher 3. Select Flash from file 4. Find and select the bootstrap image (with your correct farm ID) 5. Select Target (your USB key) 6. Select Flash That's it. Now you have a bootstrap image on Zero-OS as a bootable removable media device. CLI (Linux) For the BIOS USB and the UEFI EFI IMG images, you can do the following on Linux: Simply replace by the proper disk for your USB key. To see your disks, write in the command line. Make sure you select the proper disk! If you USB key is not new, make sure to format it before burning the Zero-OS image. CD/DVD BIOS For the BIOS ISO image, download the file and burn it on a DVD.",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/farmers/docs/3node_building/1_create_a_farm.md",
    "title": "1. Create a Farm",
    "url": "/farmers/3node_building/create_a_farm",
    "content": "Overview To create a farm on ThreeFold, simply download the ThreeFold Connect app, create an account and then create a farm. Download the App The ThreeFold Connect app is available for both iOS and Android devices. - Google Store Link - Apple Store Create an Account To create a new account, you will be asked to choose a . This ID will be used, as well as the seed phrase, when you want to log in after having logged out of your account. You will also need to add a valid email address. You will need to access your email and confirm the validation email from ThreeFold to use properly the TF Connect app wallet. You will be shown your seed phrase. Keep this in a secure and offline place. You will need the 3bot ID, i.e. the account , and the to recover your account. This seed phrase is of utmost importance. Do not lose it nor give it to anyone. Create a Farm Open the TF Connect app, go to Farming and click on to create a V4 farm. Then click on the plus button to create a farm. Choose a farm name and select a wallet then click . Access the Farm ID Once the farm is created, simply click on your farm name on the farm page to access more info. Your farm ID will be shown below .",
    "category": "farmers"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/intro.md",
    "title": "Welcome to the Labs",
    "url": "/labs/intro",
    "content": "ThreeFold Labs Welcome to the ThreeFold Labs! > The ThreeFold Labs contain advanced material for users and farmers of the ThreeFold Grid. For basic information, please refer to the Users and Farmers sections respectively. This manual is organized in two main sections: - ThreeFold Knowledge Base - ThreeFold Documentation The ThreeFold Knowledge Base section contains all information needed to understand how the whole ThreeFold ecosystem works. The ThreeFold Documentation section contains all the practical information of the ThreeFold Grid, from general information covering the multi-functional ThreeFold Dashboard, the versatile ThreeFold Connect app and TFT, to specific tutorials for developers, farmers and system administrators. > Explore the ThreeFold Grid status page for live updates on Threefold services! > > Access with Grid.tf | Access with ThreeFold.io Get Started It's easy to get started on the ThreeFold Grid. If you want to farm TFT, check out how to build a 3Node. If you want to deploy or develop on the grid, you will first need to get TFT on TFChain: - Create a TFChain account - Get TFT in your TFChain account - Buy TFT - Send TFT to TFChain To develop on the Grid, read the developers documentation. To deploy applications, read the deploy section then, if needed, access the deployment via SSH. Join the ThreeFold Community The ThreeFold community is very active and its members will be more than happy to discuss and help you get started. ThreeFold Forum ThreeFold General Telegram Channel ThreeFold Farmer Telegram Channel TFGrid Tester Telegram Channel Questions and Feedback To explore this manual, you can use the search function at the top right of the page. Answers to your questions might also be on the ThreeFold Forum. If you can't find the answer to your question, our dedicated ThreeFold Support team is here to help. Welcome to the ThreeFold Grid, where together we can shape a more sustainable, self-sovereign and autonomous digital future!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/knowledge_base.md",
    "title": "Knowledge Base",
    "url": "/labs/knowledge_base",
    "content": "The section contains information about the ThreeFold ecosystem, its technology and its history. For practical information for farmers, developers and system administrators, refer to the ThreeFold Documentation. TABLE OF CONTENTS - Technology - Release Notes - Farming - Cloud - Collaboration - Legal",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_all3.md",
    "title": "Legal",
    "url": "/labs/knowledge_base/terms_conditions_all3",
    "content": "Legal !legal TFGRID USER and/or FARMER TERMS AND CONDITIONS TFGRID 3.X THESE TERMS AND CONDITIONS (THE \"AGREEMENTS\") CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU (“TFGRID USER,\"“TFGRID FARMER,\" “YOU\", OR “YOURS”) AND TRC (“THREEFOLD”, “COMPANY,” “US,” “WE” OR “OUR”), GOVERNING THE TERMS OF YOUR PARTICIPATION AS A PARTNER, CUSTOMER, FARMER OR USER IN THE THREEFOLD GRID. YOU UNDERSTAND AND AGREE THAT BY ACCEPTING THE TERMS OF THIS AGREEMENT, EITHER BY CLICKING TO SIGNIFY ACCEPTANCE, OR BY TAKING ANY ONE OR MORE OF THE FOLLOWING ACTIONS DOWNLOADING, INSTALLING, RUNNING,/AND OR USING THE APPLICABLE SOFTWARE, YOU AGREE TO BE BOUND BY THE TERMS OF THIS AGREEMENT EFFECTIVE AS OF THE DATE THAT YOU TAKE THE EARLIEST OF ONE OF THE FOREGOING ACTIONS. YOU REPRESENT AND WARRANT THAT YOU ARE 18 YEARS OLD OR OLDER AND HAVE THE RIGHT AND AUTHORITY TO ENTER INTO AND COMPLY WITH THE TERMS OF THIS AGREEMENT. > BY USING THE TFGRID OR ANY OF THE THREEFOLD PROVIDED SOFTWARE OR SERVICES YOU ACCEPT THE FOLLOWING AGREEMENTS: - [X] Disclaimer - [X] Definitions - [X] Privacy Policy - [X] Terms & Conditions ThreeFold Related Websites - [X] Terms & Conditions TFGrid Users TFGrid 3 - [X] Terms & Conditions TFGrid Farmers TFGrid 3 - [X] Terms & Conditions TFGrid Sales",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/privacypolicy.md",
    "title": "Privacy Policy",
    "url": "/labs/knowledge_base/terms_conditions_all3/privacypolicy",
    "content": "Privacy Policy This privacy policy will explain how ThreeFold Movement (\"companies\", “we”, or “us”) uses the personal data we collect from you when you use any of our: websites/wikis/forums ending with threefold.io, threefold.me, grid.tf, threefold.tech, ThreeFold_Token.com, freeflownation.org, 3bot.org, incubaid.com or consciousinternet.org or any other website as used/promoted by ThreeFold or any other site as originating from our opensource git repository on https://github.com/threefoldfoundation. What data do we collect? All websites using the ThreeFold Movement Privacy Policy do not collect any data on a personal level by default. All data being processed is anonymized. When signing up for our newsletter we collect your: email address How do we collect your data? Browsing data: We automatically collect data and process data when you use or view our website via your browser's cookies. Newsletter Signups: Collected only with your permission through our sign-up form that uses a double opt-in mechanism for you to explicitly accept. How will we use your data? We use this information to monitor and analyze your use of our website and for the website's technical administration, to increase our website's functionality and user-friendliness, and to better tailor it to our visitors needs. If you agree, our companies will share your data with the following partner companies so that they may offer you or us their products and services: Matomo: offers us services relating to monitoring and measuring website traffic and access, creating user navigation reports, etc. All information processed here is anonymized. We run this service within our own environments. The data being processed does not leave our servers and is not shared with any thrid parties. Mailerlite: offers us services relating newsletter sending and monitoring. We do not track individual IP's or any other personal data. The aforementioned processors operate independently from us and have their own privacy policy, which we strongly suggest you review. These processors may use the information collected through their services to evaluate visitors’ activity, as set out in their respective privacy policies. How do we store your data? We store the anonmyzed data in Matomo for us to research usage and improve user experience on our websites. We store email addresses in Mailerlite's system. Marketing We will not use your information for any (re)marketing reasons, nor send you information about products and/or services of ours or any partner companies unless you explicitly agreed to signing up for our newsletter. What are your data protection rights? We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following: The right to access You have the right to request from us copies of your personal data. We may charge you a small fee for this service. The right to rectification You have the right to request that we correct any information you believe is inaccurate. You also have the right to request us to complete information you believe is incomplete. The right to erasure You have the right to request that we erase your personal data, under certain conditions. The right to restrict processing You have the right to request that we restrict the processing of your personal data, under certain conditions. The right to object to processing You have the right to object to our companies' processing of your personal data, under certain conditions. The right to data portability You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions. If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us: email: dataprivacy@threefold.io post address: Q1-07-038/B SAIF Zone, Sharjah United Arab Emirates What are cookies? Cookies are text files placed on your computer to collect standard Internet log information and visitor behavior information. When you visit our websites, we may collect information from you automatically through cookies or similar technology. For further information, visit: http://allaboutcookies.org/ How do we use cookies? We use cookies in a range of ways to improve your experience on our website, including: understanding how you use our website for the websites technical administration What types of cookies do we use? There are a number of different types of cookies, however, our websites use: Functionality - Our companies use these cookies so that we recognize you on our website and remember your previously selected preferences. These could include what language you prefer and the location you are in. A mix of first-party and third-party cookies are used. No Advertising - Our companies use these cookies to collect information about your visit to our website, the content you viewed, the links you followed and information about your browser, device, and your IP address. However, we will not share this data with third parties for advertising purposes. * Analytics cookies - Our companies use these to monitor how users reached the Site, and how they interact with and move around once on the Site. These cookies let us know what features on the Site are working the best and what features on the Site can be improved. How to manage cookies You can set your browser to not accept cookies, and the above website tells you how to remove cookies from your browser. However, in a few cases, some of our website features may not function as a result. Privacy policies of other websites Our website contains links to other websites. Our privacy policy applies only to our website, so if you click on a link to another website, you should read their privacy policy. Changes to our privacy policy We keep our privacy policy under regular review and places any updates on this web page. This privacy policy was last updated on 16 May 2019. How to contact us If you have any questions about our privacy policy, the data we hold on you, or you would like to exercise one of your data protection rights, please do not hesitate to contact us. Email us at: dataprivacy@threefold.io SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/disclaimer.md",
    "title": "Disclaimer",
    "url": "/labs/knowledge_base/terms_conditions_all3/disclaimer",
    "content": "General Warning And Disclaimer Your use of the TFGrid and/or TFTs, as well as the IT capacity made available from the TFGrid to the Internet, as well as any tools provided to work with TFGrid or TFTokens (hereinafter collectively also referred to as the \"Services\") will be subject to the warnings, limitations, acknowledgements and disclaimers set out hereinafter. These statements and disclaimers are made by and on behalf of (1) the TF Foundation (ThreeFold_Dubai), (2) each individual or entity acting as a ThreeFold Farmer (3) , TFTech NV (4) any of the companies or individuals related to these entities, and (5) any person contributing or otherwise assisting in developing, marketing or distributing the Services (hereinafter collectively referred to as “ThreeFold”). Disclaimer TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW THE SERVICES ARE PROVIDED ON AN \"AS IS\" AND “AS AVAILABLE” BASIS WITHOUT WARRANTIES OF ANY KIND, AND THREEFOLD EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES AS TO THE SERVICES, INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT; (B) THREEFOLD DOES NOT REPRESENT OR WARRANT THAT THE SERVICES ARE ACCURATE, COMPLETE, RELIABLE, CURRENT OR ERROR-FREE, MEET YOUR REQUIREMENTS, OR THAT DEFECTS IN THE SERVICES WILL BE CORRECTED; AND (C) THREEFOLD CANNOT AND DOES NOT REPRESENT OR WARRANT THAT THE SERVICES, OR THE SERVERS USED TO PROVIDE SUCH SERVICES, ARE FREE OF VIRUSES OR OTHER HARMFUL COMPONENTS. By using the Services, you acknowledge that: - you have access to all relevant and required information to do with the tokens and the grid on https://library.threefold.me - e.g. way how tokens are created/minted on: token_creation - all this information is being provided on best effort basis and does not imply any promise or guarantee - you have sufficient knowledge and experience in financial and business matters and are capable of evaluating the merits and risks of using or acquiring TFTs, and that you are able to bear the economic risk of such acquisition for an indefinite period of time. - the Services (including the TFTs) involve risks, all of which you fully and completely assume, including, but not limited to, the risk relating to the possibility of limited or absent liquidity for the TFTs on the secondary markets (including the relevant online exchanges), the risk relating to price fluctuations of the TFTs on such secondary markets (including the relevant online exchanges), etc. - the Services (including the TFTs) have or will be created and delivered to you at your sole risk on an \"AS IS\" basis. - you have not relied on any representations or warranties made by ThreeFold outside this document, including, but not limited to, conversations of any kind, whether through oral or electronic communication, or any white paper. Without limiting the generality of the foregoing, you assume all risk and liability for the results obtained by the use of any tokens (including TFTs) and regardless of any oral or written statements made by ThreeFold, by way of technical advice or otherwise, related to the use of the tokens. - you bear sole responsibility for any taxes as a result of the use or acquisition of the Services (including the TFTs), and any future acquisition, ownership, use, sale or other disposition of TFTs held by you. To the extent permitted by law, you agree to indemnify, defend and hold ThreeFold harmless for any claim, liability, assessment or penalty with respect to any taxes (other than any net income taxes of ThreeFold that result from the sale of TFTs) associated with or arising from your purchase, use or ownership of TFTs. Release To the fullest extent permitted by applicable law, you hereby explicitly release ThreeFold from responsibility, liability, claims, demands and/or damages (actual and consequential) of every kind and nature, known and unknown (including, but not limited to, claims of negligence), arising out of or related to: (1) disputes between users of the Services and/or the acts or omissions of third parties; and (2) your purchase of tokens (if any) from ThreeFold_Dubai (formerly known as ‘GreenITGlobe’) or Bettertoken BV identified in the relevant contracts as ‘Internal ThreeFold_Tokens’ or ‘iTFTs’. If and to the extend you have purchased or otherwise acquired tokens from ThreeFold_Dubai (formerly known as ‘GreenITGlobe’) or Bettertoken BV that were identified in the relevant contracts as ‘Internal ThreeFold_Tokens’ or ‘iTFTs’, your use of the Services (including your subsequent receipt or acceptance of TFTs) implies your confirmation that such purchase or acquisition has been duly completed as a result of your receipt of a corresponding amount of TFTs, that all deliverables under the relevant contracts (known as ‘iTFT Purchase Agreement’, ‘TFT Purchase Agreement’ or ‘ITO investment agreement’) have been duly delivered and that there are no further obligations from one of the above-mentioned companies to you in relation to such contracts. Limitation of Liability - Exclusion of indirect damages. To the fullest extent permissible under applicable law, ThreeFold shall not have any liability with respect to any claims for consequential, exemplary, special, indirect and/or punitive damages (such as –but not limited to – loss of goodwill, loss of actual or anticipated business or contracts, work stoppage, loss as a result of a third party claim, data loss or corruption of data, computer failure or lost profit), arising out or in any way related to the access or use of the Services or otherwise related to ThreeFold, regardless of the form of action, whether based in contract, or otherwise, even if ThreeFold has been advised of the possibility of such damages. - Cap on damages. To the extent permissible under the applicable law the contractual and/or extra-contractual liability of ThreeFold arising out or related to the use of, or inability to use, the Services, shall be limited to (1) any compensation you paid to ThreeFold for the Services, or (2) 1,000 US Dollars, whichever is greater. This limitation is cumulative and not per incident. It applies to all causes of action and obligations in the aggregate, including without limitations, any claim of breach of contract and/or negligence. - Prescription. No action in any form arising out of or in connection with this Agreement may be brought by the Purchaser more than one (1) year after the cause of action has accrued. - No limitations for own intent. Nothing in this Agreement shall (or shall be deemed to, or construed to) exclude or restrict any liability either Party may incur as a result of fraud, willful intent or for any death or personal injury resulting from its gross negligence or that of its employees, agents or subcontractors. SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/definitions_legal.md",
    "title": "Definitions",
    "url": "/labs/knowledge_base/terms_conditions_all3/definitions_legal",
    "content": "Definitions ThreeFold (TF) AN INTERNET BUILT FOR EVERYONE, BY EVERYONE. Threefold is a peer-to-peer network of network, storage an compute capacity for an upgraded internet, laying the foundation for a more sustainable, smart, and sovereign digital world where everyone can participate and prosper. All the ideas and content created for this concept are opensource and stored in github A group of volunteers and ThreeFold maintain these repositories. > See https://github.com/threefoldfoundation Non For Profit Non-for-profit organizations are types of organizations that do not earn profits for its owners. All of the money earned by or donated to a non-for-profit organization is used in pursuing the organization's objectives and keeping it running. Employees or contributors can be paid for the services provided. In the case of TFF following remarks might be useful - TFF has been funded by its original founders by means of loans or investment in kind or tokens, this money can be returned to the founders whenever cashflow allows (which is not the case yet). - TFF directors/shareholders do everything they can to only operate out of the best interests of the ThreeFold Project. - A project is under way to officialize the structure with strict governance e.g. a company called ThreeFold VZW has been created in Belgium with official governance around non for profit structure. This company is not used yet. Other alternatives are being researched at this moment (Aug 2020). - ThreeFold_Dubai has farmed tokens which can be used as gifts towards contributors or employees. ThreeFold_Grid (TFG) The ThreeFold_Grid is a new, global neutral and sustainable network of IT infrastructure. On this Grid, IT capacity is indexed registered on the TFChain for easy discovery by purchasers. This Internet capacity is produced and allocated locally - similar to the way electricity and other utilities are purchased today. This allows any digital service or application provider to host their services and applications in proximity to the end user leading to significantly greater performance, a lower price point and better margins. This is both more cost effective and green. IT Capacity - IT = Information Technology. - IT Capacity is resource availability for running any IT Workloads - Examples of IT Workloads which can run on the TFG are - web applications - archiving of data - generic storage (e.g. using the S3 storage interface) - container workloads (e.g. using the Kubernetes interface) - artificial intelligence workloads - big data workloads (processing of data) - gaming servers - content delivery - test workloads for developers ThreeFold_Token (TFT) The ThreeFold_Token is a digital Token which allows anyone to buy and sell IT Capacity on the TF Grid. This token only gets issued by the TFChain if a TF Pool gets connected to the TF Grid. The TFChain can issue a maximum of 4 billion tokens (gen 2). TFChain Group of blockchain related technologies as used by ThreeFold to accomplish the following: - store & trade your TFTs: uses Stellar Public Blockchain platform - buy/sell capacity on the TFG: TFExplorer - register capacity of the TFG: TFExplorer - provision IT workloads on the TFG: TFExplorer - ... > See the following github repos and https://github.com/threefoldfoundation/tft-stellar Zero-OS (ZOS) or Capacity Layer The Zero-OS is the software which makes it possible to convert any pool of hardware to become a pool of resource for the ThreeFold_Grid. > See Zero-OS = Ultra Efficient Stateless Operating System Zero-People or Autonomous Layer - Jumpscale = Automation Framework (self healing, ...) User - is the person/organization/company who buys capacity from the TF Grid - capacity can only be bought by means of TFTs TF Distributed exchange (TFExchange) Since March 2020 based on Stellar integrated Decentralized exchange and before Atomic Swaps. Mechanism for people to exchange TFT to other digital currencies in a decentralized way. Atomic Swaps were difficult to use, this got resolved by switching to Stellar blockchain. ThreeFold Farming TFNode - is a compute/storage server which provides IT Capacity as source for the Cloud Units - a TFNode is part of a Farming Pool - 3Nodes are owned by TF Farmers. - The TFNode runs the TF Operating System and TFChain (TFC). Cloud Units Units of IT capacity as sold from the TF Grid to Users. More info see here ThreeFold Farming Pool (FP) A Pool of storage & compute hardware which allows to provision IT Capacity. Each Farming Pool consists out of 3Nodes which run the TF Operating System and TF Blockchain Software (TFChain) which allows anyone in the world to use this IT capacity to host their IT workloads (storage apps, archive capacity, web applications, artificial intelligence, iOT, docker containers, etc). ThreeFold Farmer A ThreeFold Farmer is any organization or person who invests in a ThreeFold Farming Pool and connects this capacity to the ThreeFold_Grid. As a result of Farming, i.e. creating additional capacity, ThreeFold_Tokens are automatically created by the ThreeFold Chain. Farmers can cultivate both managed and/or unmanaged capacity. Farmers receive TFTs - as part of owning the TF Farming Pool (tf_farming) - as part of selling capacity from the TF Farming Pool (cultivating) Most TF Farmers use a ThreeFold Cooperative to become active because it hugely simplifies the process and gives them often better pricing to purchase the Farming Pool as well as connecting the Farming Pool to the internet. The ThreeFold Farmer is the only party who owns the TF Farming Pool. ThreeFold Cooperative Any organization who helps a TF Farmer to become active on the TF Grid. A Cooperative can supply any or all of following services. - Selling required hardware kit for the Farming Pool (compute, storage, networking) to the TF Farmer (and logistics around it). - Installing & testing the TF Operating System on the chosen hardware. - Burn in testing of the chosen hardware: make sure the hardware is reliable and works following expectations. - Configuration & Installation of the ThreeFold Farming Pool. - Registration & Initialization of the ThreeFold Farming Pool. - Delivering & Executing of hardware Warranty as specified on contract. - Creation and Delivery of the ThreeFold Mobile App for the TF Farmer (allow people worldwide to order capacity using TFTs for the Farming Pool. - Software support for the Farming Pool - Training of the TF Farmer about TF Concepts - how to use the TF Wallet - how to safely store the TFT's - how to go from TFT's to fiat currency like USD/EUR (and visa versa) - how to register pricing info on the TF Grid - how to integrate a fiat currency payment gateway into existing ecommerce website for the sales of TFT's or TF IT Capacity (e.g. integration with Stripe or other payment mechanism) - how to consult/register information on the TFChain - Hosting Services - all services related to connectivity to the internet (routing, denial of service, firewalling, ...) - rackspace & other datacenter services - monitoring of the infrastructure (hardware and software). Do It Yourself Capacity Unmanaged IT Capacity can exist everywhere; in people’s home, in mobile telephone masts, in utility cabinets, next to railways or motorways, anywhere where internet lines meet electrical outlets, any IT Hosting or Datacenter Facility. This capacity is deployed to the TF Grid and has no people involved to manage its operations (apart from the physical and network aspects). Farmers have no access to the 3Nodes purchased. They can only use the capacity produced in the exact same way as any other user, i.e. through the TFChain, in a secure private and neutral way, equally applicable to all. Unmanaged capacity provides the following 3 basic services - Storage Capacity = backend storage services which can be used as backend for more high level storage services like S3 - Compute Capacity = backend compute capacity which can be used as backend for more high level compute services like Kubernetes. - Network Gateway Services: integration with ZeroTier network, HTTP(s) reverse proxy, DNS services, TCP Portforwarding. These basic services are ordered through the TFChain only. SLA's (service level agreements) cannot be be guaranteed on Unmanaged Capacity and as such not registered in the TFChain. Certified Capacity Capacity which received certification as organized by ThreeFold. Managed Capacity Managed capacity is capacity that sits in a datacenter or other controlled environment where people operate and maintain supervision of the capacity connected to the TF Grid and published in the TF Directory. SLA (Service Level Agreements) are provided on this capacity like uptime, guaranteed bandwidth, response times, ... TF Farmers have access to the 3Nodes. Features Only Available In A Managed Capacity Farming Pool - Published & Tracked (monitored) Service Level Agreements Legal The Company The Company has been defined on the contract who refers to this document but can be any of the following: - The company or organization who is selling a service on the ThreeFold_Grid. - The company who is selling/buying ThreeFold_Tokens (TFTs) as capacity on the ThreeFold_Grid. - The company who is helping a Farmer to become active on the ThreeFold_Grid = a TF Cooperative. - The company who is selling the hardware and software required for a Farming Pool The Product The Product is the ThreeFold_Token or any service related to the ThreeFold_Grid which can be bought by The Purchaser. The Product has been defined on the contract who refers to this document. The Purchaser Is the person or company or organization who buys The Product from The Company Miscellaneous TF Wallet A software application which allows anyone to consult how many TFTs they own and to make transfers of TFTs to other parties. The TF Wallet works together with Stellar and is nothing but a javascript UI. TF Wallet is part of the ThreeFold Connect app on mobile. Sales Related Definitions “Acceptance” means that any Deliverable has successfully completed the Acceptance process set forth in Section 4. Such Acceptance may be either explicit or implicit, i.e. in the absence of an explicit Rejection. “Acceptance Period” means fifteen (15) days as from the Delivery Date, unless otherwise agreed to in the Sales Order or as provided under statutory law. “Customer” means you or the customer entity identified in the Sales Order, as the case may be. “Deliverables” means the Hardware, Software, Services (if any), or any deliverable specified in a Sales Order. “Delivery” means the act of making the Deliverables available for reception by the Customer in accordance with Section 4.1. “Delivery Date” means the ultimate date on which the Delivery may take place, as determined in the Sales Order. “Documentation” means all manuals, instructions and other documents (whether in hard copy, soft copy or web-based form) relating to, or necessary for, the use, operation or maintenance of the Deliverables, together with all enhancements, corrections, modifications and amendments to such documents that are furnished to Customer under this Agreement. “Effective Date” means the date when the Agreement starts to operate, corresponding to the issuance date of the Sales Order. “Hardware” means any hardware to be provided by Company as specified in a Sales Order or Specific Agreement. “Party” means any party to this Agreement; “Rejection” means the explicit rejection of Deliverables by Customer, provided that the following cumulative conditions have all been completed: the Rejection has been notified by Customer to Company within the Acceptance Period (i.e. at the latest on the last day of the Acceptance Period); Customer has returned to Company all rejected Deliverables immediately after the Rejection notice; Any rejection that does not meet both aforementioned cumulative conditions shall not qualify as a Rejection and shall be deemed an implicit Acceptance. “Sales Order” means any Sales Order generated electronically by Company to allow the Customer to order, including the details specified by Customer in the checkout of the Company website, or any document that the Parties mutually agree upon as the vehicle for procuring Hardware, Software and/or Services pursuant to this Agreement. “Services” means any services to be provided by Company to Customer as stipulated in the Sales Order. “Software” means the open source software connecting the Hardware to the ThreeFold network, all in machine readable, object code form, together with all enhancements, modifications, corrections and amendments thereto. “Specifications” means the technical requirements for, and performance standards of, the Deliverables as set forth in the Sales Order or Documentation provided to Customer. SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/tfta_to_tft.md",
    "title": "TFTA TO TFT",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/tfta_to_tft",
    "content": "Convert TFTA to TFT TFTA is a voluntary staking pool for people to show that they have no intent to sell in near time. If you would like migrate TFTA to TFT, it's super easy, just send your TFTA to the following address: > GBUT4GP5GJ6B3XW5PXENHQA7TXJI5GOPW3NF4W3ZIW6OOO4ISY6WNLN2 and it will return as TFT. We suggest that you try with 1 TFT first!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_websites.md",
    "title": "Terms & Conditions Websites",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_websites",
    "content": "TERMS OF USE AGREEMENT TO TERMS These Terms of Use constitute a legally binding agreement made between you, whether personally or on behalf of an entity (\"you\") and ThreeFold, doing business as ThreeFold (\"ThreeFold\", “we”, “us”, or “our”), concerning your access to and use of the threefold related websites: websites/wikis/forums ending with threefold.io, threefold.me, grid.tf, threefold.tech, ThreeFold_Token.com, freeflownation.org, 3bot.org, incubaid.com or consciousinternet.org or any other website as used/promoted by ThreeFold or any other site as originating from our opensource git repository on https://github.com/threefoldfoundation. as well as any other media form, media channel, forum, mobile website or mobile application related, linked, or otherwise connected thereto (collectively, the “Site”). You agree that by accessing the Site, you have read, understood, and agreed to be bound by all of these Terms of Use. IF YOU DO NOT AGREE WITH ALL OF THESE TERMS OF USE, THEN YOU ARE EXPRESSLY PROHIBITED FROM USING THE SITE AND YOU MUST DISCONTINUE USE IMMEDIATELY. Supplemental terms and conditions or documents that may be posted on the Site from time to time are hereby expressly incorporated herein by reference. We reserve the right, in our sole discretion, to make changes or modifications to these Terms of Use at any time and for any reason. We will alert you about any changes by updating the \"Last updated\" date of these Terms of Use, and you waive any right to receive specific notice of each such change. It is your responsibility to periodically review these Terms of Use to stay informed of updates. You will be subject to, and will be deemed to have been made aware of and to have accepted, the changes in any revised Terms of Use by your continued use of the Site after the date such revised Terms of Use are posted. The information provided on the Site is not intended for distribution to or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to law or regulation or which would subject us to any registration requirement within such jurisdiction or country. Accordingly, those persons who choose to access the Site from other locations do so on their own initiative and are solely responsible for compliance with local laws, if and to the extent local laws are applicable. The Site is intended for users who are at least 18 years old. Persons under the age of 18 are not permitted to use or register for the Site. INTELLECTUAL PROPERTY RIGHTS Unless otherwise indicated, the Site is our proprietary property and all source code, databases, functionality, software, website designs, audio, video, text, photographs, and graphics on the Site (collectively, the \"Content\") and the trademarks, service marks, and logos contained therein (the “Marks”) are owned or controlled by us or licensed to us, and are protected by copyright and trademark laws and various other intellectual property rights and EU competition laws, foreign jurisdictions, and international conventions. The Content and the Marks are provided on the Site “AS IS” for your information and personal use only. Except as expressly provided in these Terms of Use, no part of the Site and no Content or Marks may be copied, reproduced, aggregated, republished, uploaded, posted, publicly displayed, encoded, translated, transmitted, distributed, sold, licensed, or otherwise exploited for any commercial purpose whatsoever, without our express prior written permission. Provided that you are eligible to use the Site, you are granted a limited license to access and use the Site and to download or print a copy of any portion of the Content to which you have properly gained access solely for your personal, non-commercial use. We reserve all rights not expressly granted to you in and to the Site, the Content and the Marks. USER REPRESENTATIONS By using the Site, you represent and warrant that: (1) all registration information you submit will be true, accurate, current, and complete; (2) you will maintain the accuracy of such information and promptly update such registration information as necessary; (3) you have the legal capacity and you agree to comply with these Terms of Use; (4) you are not a minor in the jurisdiction in which you reside; (5) you will not access the Site through automated or non-human means, whether through a bot, script, or otherwise; (6) you will not use the Site for any illegal or unauthorized purpose; and (7) your use of the Site will not violate any applicable law or regulation. If you provide any information that is untrue, inaccurate, not current, or incomplete, we have the right to suspend or terminate your account and refuse any and all current or future use of the Site (or any portion thereof). USER REGISTRATION You may be required to register with the Site. You agree to keep your password confidential and will be responsible for all use of your account and password. We reserve the right to remove, reclaim, or change a username you select if we determine, in our sole discretion, that such username is inappropriate, obscene, or otherwise objectionable. PROHIBITED ACTIVITIES You may not access or use the Site for any purpose other than that for which we make the Site available. The Site may not be used in connection with any commercial endeavors except those that are specifically endorsed or approved by us. As a user of the Site, you agree not to: 1. Systematically retrieve data or other content from the Site to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us. 2. Circumvent, disable, or otherwise interfere with security-related features of the Site, including features that prevent or restrict the use or copying of any Content or enforce limitations on the use of the Site and/or the Content contained therein. 3. Engage in unauthorized framing of or linking to the Site. 4. Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords. 5. Engage in any automated use of the system, such as using scripts to send comments or messages, or using any data mining, robots, or similar data gathering and extraction tools. 6. Interfere with, disrupt, or create an undue burden on the Site or the networks or services connected to the Site. 7. Use the Site as part of any effort to compete with us or otherwise use the Site and/or the Content for any revenue-generating endeavor or commercial enterprise. 8. Decipher, decompile, disassemble, or reverse engineer any of the software comprising or in any way making up a part of the Site. 9. Upload or transmit (or attempt to upload or to transmit) viruses, Trojan horses, or other material, including excessive use of capital letters and spamming (continuous posting of repetitive text), that interferes with any party’s uninterrupted use and enjoyment of the Site or modifies, impairs, disrupts, alters, or interferes with the use, features, functions, operation, or maintenance of the Site. 10. Upload or transmit (or attempt to upload or to transmit) any material that acts as a passive or active information collection or transmission mechanism, including without limitation, clear graphics interchange formats (\"gifs\"), 1×1 pixels, web bugs, cookies, or other similar devices (sometimes referred to as “spyware” or “passive collection mechanisms” or “pcms”). 11. Except as may be the result of standard search engine or Internet browser usage, use, launch, develop, or distribute any automated system, including without limitation, any spider, robot, cheat utility, scraper, or offline reader that accesses the Site, or using or launching any unauthorized script or other software. 12. Use the Site in a manner inconsistent with any applicable laws or regulations. USER GENERATED CONTRIBUTIONS The Site may invite you to chat, contribute to, or participate in blogs, message boards, online forums, and other functionality, and may provide you with the opportunity to create, submit, post, display, transmit, perform, publish, distribute, or broadcast content and materials to us or on the Site, including but not limited to text, writings, video, audio, photographs, graphics, comments, suggestions, or personal information or other material (collectively, \"Contributions\"). Contributions may be viewable by other users of the Site and through third-party websites. As such, any Contributions you transmit may be treated as non-confidential and non-proprietary. When you create or make available any Contributions, you thereby represent and warrant that: 1. The creation, distribution, transmission, public display, or performance, and the accessing, downloading, or copying of your Contributions do not and will not infringe the proprietary rights, including but not limited to the copyright, patent, trademark, trade secret, or moral rights of any third party. 2. You are the creator and owner of or have the necessary licenses, rights, consents, releases, and permissions to use and to authorize us, the Site, and other users of the Site to use your Contributions in any manner contemplated by the Site and these Terms of Use. 3. You have the written consent, release, and/or permission of each and every identifiable individual person in your Contributions to use the name or likeness of each and every such identifiable individual person to enable inclusion and use of your Contributions in any manner contemplated by the Site and these Terms of Use. 4. Your Contributions are not false, inaccurate, or misleading. 5. Your Contributions are not unsolicited or unauthorized advertising, promotional materials, pyramid schemes, chain letters, spam, mass mailings, or other forms of solicitation. 6. Your Contributions are not obscene, lewd, lascivious, filthy, violent, harassing, libelous, slanderous, or otherwise objectionable (as determined by us). 7. Your Contributions do not ridicule, mock, disparage, intimidate, or abuse anyone. 98 Your Contributions do not advocate the violent overthrow of any government or incite, encourage, or threaten physical harm against another. 9. Your Contributions do not violate any applicable law, regulation, or rule. 10. Your Contributions do not violate the privacy or publicity rights of any third party. 11. Your Contributions do not contain any material that solicits personal information from anyone under the age of 18 or exploits people under the age of 18 in a sexual or violent manner. 12. Your Contributions do not violate any federal or state law concerning child pornography, or otherwise intended to protect the health or well-being of minors; 13. Your Contributions do not include any offensive comments that are connected to race, national origin, gender, sexual preference, or physical handicap. 14. Your Contributions do not otherwise violate, or link to material that violates, any provision of these Terms of Use, or any applicable law or regulation. Any use of the Site in violation of the foregoing violates these Terms of Use and may result in, among other things, termination or suspension of your rights to use the Site. CONTRIBUTION LICENSE By posting your Contributions to any part of the Site or making Contributions accessible to the Site by linking your account from the Site to any of your social networking accounts, you automatically grant, and you represent and warrant that you have the right to grant, to us an unrestricted, unlimited, irrevocable, perpetual, non-exclusive, transferable, royalty-free, fully-paid, worldwide right, and license to host, use, copy, reproduce, disclose, sell, resell, publish, broadcast, retitle, archive, store, cache, publicly perform, publicly display, reformat, translate, transmit, excerpt (in whole or in part), and distribute such Contributions (including, without limitation, your image and voice) for any purpose, commercial, advertising, or otherwise, and to prepare derivative works of, or incorporate into other works, such Contributions, and grant and authorize sublicenses of the foregoing. The use and distribution may occur in any media formats and through any media channels. This license will apply to any form, media, or technology now known or hereafter developed, and includes our use of your name, company name, and franchise name, as applicable, and any of the trademarks, service marks, trade names, logos, and personal and commercial images you provide. You waive all moral rights in your Contributions, and you warrant that moral rights have not otherwise been asserted in your Contributions. We do not assert any ownership over your Contributions. You retain full ownership of all of your Contributions and any intellectual property rights or other proprietary rights associated with your Contributions. We are not liable for any statements or representations in your Contributions provided by you in any area on the Site. You are solely responsible for your Contributions to the Site and you expressly agree to exonerate us from any and all responsibility and to refrain from any legal action against us regarding your Contributions. We have the right, in our sole and absolute discretion, (1) to edit, redact, or otherwise change any Contributions; (2) to re-categorize any Contributions to place them in more appropriate locations on the Site; and (3) to pre-screen or delete any Contributions at any time and for any reason, without notice. We have no obligation to monitor your Contributions. SOCIAL MEDIA As part of the functionality of the Site, you may link your account with online accounts you have with third-party service providers (each such account, a \"Third-Party Account\") by either: (1) providing your Third-Party Account login information through the Site; or (2) allowing us to access your Third-Party Account, as is permitted under the applicable terms and conditions that govern your use of each Third-Party Account. You represent and warrant that you are entitled to disclose your Third-Party Account login information to us and/or grant us access to your Third-Party Account, without breach by you of any of the terms and conditions that govern your use of the applicable Third-Party Account, and without obligating us to pay any fees or making us subject to any usage limitations imposed by the third-party service provider of the Third-Party Account. By granting us access to any Third-Party Accounts, you understand that (1) we may access, make available, and store (if applicable) any content that you have provided to and stored in your Third-Party Account (the “Social Network Content”) so that it is available on and through the Site via your account, including without limitation any friend lists and (2) we may submit to and receive from your Third-Party Account additional information to the extent you are notified when you link your account with the Third-Party Account. Depending on the Third-Party Accounts you choose and subject to the privacy settings that you have set in such Third-Party Accounts, personally identifiable information that you post to your Third-Party Accounts may be available on and through your account on the Site. Please note that if a Third-Party Account or associated service becomes unavailable or our access to such Third Party Account is terminated by the third-party service provider, then Social Network Content may no longer be available on and through the Site. You will have the ability to disable the connection between your account on the Site and your Third-Party Accounts at any time. PLEASE NOTE THAT YOUR RELATIONSHIP WITH THE THIRD- PARTY SERVICE PROVIDERS ASSOCIATED WITH YOUR THIRD-PARTY ACCOUNTS IS GOVERNED SOLELY BY YOUR AGREEMENT(S) WITH SUCH THIRD-PARTY SERVICE PROVIDERS. We make no effort to review any Social Network Content for any purpose, including but not limited to, for accuracy, legality, or non-infringement, and we are not responsible for any Social Network Content. You acknowledge and agree that we may access your email address book associated with a Third-Party Account and your contacts list stored on your mobile device or tablet computer solely for purposes of identifying and informing you of those contacts who have also registered to use the Site. You can deactivate the connection between the Site and your Third-Party Account by contacting us using the contact information below or through your account settings (if applicable). We will attempt to delete any information stored on our servers that was obtained through such Third-Party Account, except the username and profile picture that become associated with your account. SUBMISSIONS You acknowledge and agree that any questions, comments, suggestions, ideas, feedback, or other information regarding the Site (\"Submissions\") provided by you to us are non-confidential and shall become our sole property. We shall own exclusive rights, including all intellectual property rights, and shall be entitled to the unrestricted use and dissemination of these Submissions for any lawful purpose, commercial or otherwise, without acknowledgment or compensation to you. You hereby waive all moral rights to any such Submissions, and you hereby warrant that any such Submissions are original with you or that you have the right to submit such Submissions. You agree there shall be no recourse against us for any alleged or actual infringement or misappropriation of any proprietary right in your Submissions. THIRD-PARTY WEBSITES AND CONTENT The Site may contain (or you may be sent via the Site) links to other websites (\"Third-Party Websites\") as well as articles, photographs, text, graphics, pictures, designs, music, sound, video, information, applications, software, and other content or items belonging to or originating from third parties (\"Third-Party Content\"). Such Third-Party Websites and Third-Party Content are not investigated, monitored, or checked for accuracy, appropriateness, or completeness by us, and we are not responsible for any Third-Party Websites accessed through the Site or any Third-Party Content posted on, available through, or installed from the Site, including the content, accuracy, offensiveness, opinions, reliability, privacy practices, or other policies of or contained in the Third-Party Websites or the Third-Party Content. Inclusion of, linking to, or permitting the use or installation of any Third-Party Websites or any Third-Party Content does not imply approval or endorsement thereof by us. If you decide to leave the Site and access the Third-Party Websites or to use or install any Third-Party Content, you do so at your own risk, and you should be aware these Terms of Use no longer govern. You should review the applicable terms and policies, including privacy and data gathering practices, of any website to which you navigate from the Site or relating to any applications you use or install from the Site. Any purchases you make through Third-Party Websites will be through other websites and from other companies, and we take no responsibility whatsoever in relation to such purchases which are exclusively between you and the applicable third party. You agree and acknowledge that we do not endorse the products or services offered on Third-Party Websites and you shall hold us harmless from any harm caused by your purchase of such products or services. Additionally, you shall hold us harmless from any losses sustained by you or harm caused to you relating to or resulting in any way from any Third-Party Content or any contact with Third-Party Websites. SITE MANAGEMENT We reserve the right, but not the obligation, to: (1) monitor the Site for violations of these Terms of Use; (2) take appropriate legal action against anyone who, in our sole discretion, violates the law or these Terms of Use, including without limitation, reporting such user to law enforcement authorities; (3) in our sole discretion and without limitation, refuse, restrict access to, limit the availability of, or disable (to the extent technologically feasible) any of your Contributions or any portion thereof; (4) in our sole discretion and without limitation, notice, or liability, to remove from the Site or otherwise disable all files and content that are excessive in size or are in any way burdensome to our systems; and (5) otherwise manage the Site in a manner designed to protect our rights and property and to facilitate the proper functioning of the Site. PRIVACY POLICY We care about data privacy and security. Please review our Privacy Policy: privacypolicy . By using the Site, you agree to be bound by our Privacy Policy, which is incorporated into these Terms of Use. Please be advised the Site is hosted in the United States. If you access the Site from the European Union, Asia, or any other region of the world with laws or other requirements governing personal data collection, use, or disclosure that differ from applicable laws in the United States, then through your continued use of the Site, you are transferring your data to the United States, and you expressly consent to have your data transferred to and processed in the United States. Further, we do not knowingly accept, request, or solicit information from children or knowingly market to children. Therefore, in accordance with the U.S. Children’s Online Privacy Protection Act, if we receive actual knowledge that anyone under the age of 13 has provided personal information to us without the requisite and verifiable parental consent, we will delete that information from the Site as quickly as is reasonably practical. TERM AND TERMINATION These Terms of Use shall remain in full force and effect while you use the Site. WITHOUT LIMITING ANY OTHER PROVISION OF THESE TERMS OF USE, WE RESERVE THE RIGHT TO, IN OUR SOLE DISCRETION AND WITHOUT NOTICE OR LIABILITY, DENY ACCESS TO AND USE OF THE SITE (INCLUDING BLOCKING CERTAIN IP ADDRESSES), TO ANY PERSON FOR ANY REASON OR FOR NO REASON, INCLUDING WITHOUT LIMITATION FOR BREACH OF ANY REPRESENTATION, WARRANTY, OR COVENANT CONTAINED IN THESE TERMS OF USE OR OF ANY APPLICABLE LAW OR REGULATION. WE MAY TERMINATE YOUR USE OR PARTICIPATION IN THE SITE OR DELETE YOUR ACCOUNT AND ANY CONTENT OR INFORMATION THAT YOU POSTED AT ANY TIME, WITHOUT WARNING, IN OUR SOLE DISCRETION. If we terminate or suspend your account for any reason, you are prohibited from registering and creating a new account under your name, a fake or borrowed name, or the name of any third party, even if you may be acting on behalf of the third party. In addition to terminating or suspending your account, we reserve the right to take appropriate legal action, including without limitation pursuing civil, criminal, and injunctive redress. MODIFICATIONS AND INTERRUPTIONS We reserve the right to change, modify, or remove the contents of the Site at any time or for any reason at our sole discretion without notice. However, we have no obligation to update any information on our Site. We also reserve the right to modify or discontinue all or part of the Site without notice at any time. We will not be liable to you or any third party for any modification, price change, suspension, or discontinuance of the Site. We cannot guarantee the Site will be available at all times. We may experience hardware, software, or other problems or need to perform maintenance related to the Site, resulting in interruptions, delays, or errors. We reserve the right to change, revise, update, suspend, discontinue, or otherwise modify the Site at any time or for any reason without notice to you. You agree that we have no liability whatsoever for any loss, damage, or inconvenience caused by your inability to access or use the Site during any downtime or discontinuance of the Site. Nothing in these Terms of Use will be construed to obligate us to maintain and support the Site or to supply any corrections, updates, or releases in connection therewith. GOVERNING LAW These Terms of Use and your use of the Site are governed by and construed in accordance with the laws of Belgium, without regard to its conflict of law principles. DISPUTE RESOLUTION Any legal action of whatever nature brought by either you or us (collectively, the \"Parties\" and individually, a “Party”) shall be commenced or prosecuted in courts located in Belgium, Ghent, and the Parties hereby consent to, and waive all defenses of lack of personal jurisdiction and forum non conveniens with respect to venue and jurisdiction in such state and federal courts. Application of the United Nations Convention on Contracts for the International Sale of Goods and the Uniform Computer Information Transaction Act (UCITA) are excluded from these Terms of Use. In no event shall any claim, action, or proceeding brought by either Party related in any way to the Site be commenced more than one (1) years after the cause of action arose. CORRECTIONS There may be information on the Site that contains typographical errors, inaccuracies, or omissions, including descriptions, pricing, availability, and various other information. We reserve the right to correct any errors, inaccuracies, or omissions and to change or update the information on the Site at any time, without prior notice. DISCLAIMER THE SITE IS PROVIDED ON AN AS-IS AND AS-AVAILABLE BASIS. YOU AGREE THAT YOUR USE OF THE SITE AND OUR SERVICES WILL BE AT YOUR SOLE RISK. TO THE FULLEST EXTENT PERMITTED BY LAW, WE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION WITH THE SITE AND YOUR USE THEREOF, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE MAKE NO WARRANTIES OR REPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE SITE’S CONTENT OR THE CONTENT OF ANY WEBSITES LINKED TO THE SITE AND WE WILL ASSUME NO LIABILITY OR RESPONSIBILITY FOR ANY (1) ERRORS, MISTAKES, OR INACCURACIES OF CONTENT AND MATERIALS, (2) PERSONAL INJURY OR PROPERTY DAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE OF THE SITE, (3) ANY UNAUTHORIZED ACCESS TO OR USE OF OUR SECURE SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL INFORMATION STORED THEREIN, (4) ANY INTERRUPTION OR CESSATION OF TRANSMISSION TO OR FROM THE SITE, (5) ANY BUGS, VIRUSES, TROJAN HORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE SITE BY ANY THIRD PARTY, AND/OR (6) ANY ERRORS OR OMISSIONS IN ANY CONTENT AND MATERIALS OR FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF ANY CONTENT POSTED, TRANSMITTED, OR OTHERWISE MADE AVAILABLE VIA THE SITE. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE ADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE SITE, ANY HYPERLINKED WEBSITE, OR ANY WEBSITE OR MOBILE APPLICATION FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND WE WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND ANY THIRD-PARTY PROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR SERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR BEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE. LIMITATIONS OF LIABILITY IN NO EVENT WILL WE OR OUR DIRECTORS, EMPLOYEES, OR AGENTS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, INCLUDING LOST PROFIT, LOST REVENUE, LOSS OF DATA, OR OTHER DAMAGES ARISING FROM YOUR USE OF THE SITE, EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED HEREIN, OUR LIABILITY TO YOU FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION, WILL AT ALL TIMES BE LIMITED TO $1.00 USD. CERTAIN STATE LAWS DO NOT ALLOW LIMITATIONS ON IMPLIED WARRANTIES OR THE EXCLUSION OR LIMITATION OF CERTAIN DAMAGES. IF THESE LAWS APPLY TO YOU, SOME OR ALL OF THE ABOVE DISCLAIMERS OR LIMITATIONS MAY NOT APPLY TO YOU, AND YOU MAY HAVE ADDITIONAL RIGHTS. INDEMNIFICATION You agree to defend, indemnify, and hold us harmless, including our subsidiaries, affiliates, and all of our respective officers, agents, partners, and employees, from and against any loss, damage, liability, claim, or demand, including reasonable attorneys’ fees and expenses, made by any third party due to or arising out of: (1) your Contributions; (2) use of the Site; (3) breach of these Terms of Use; (4) any breach of your representations and warranties set forth in these Terms of Use; (5) your violation of the rights of a third party, including but not limited to intellectual property rights; or (6) any overt harmful act toward any other user of the Site with whom you connected via the Site. Notwithstanding the foregoing, we reserve the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate, at your expense, with our defense of such claims. We will use reasonable efforts to notify you of any such claim, action, or proceeding which is subject to this indemnification upon becoming aware of it. USER DATA We will maintain certain data that you transmit to the Site for the purpose of managing the performance of the Site, as well as data relating to your use of the Site. Although we perform regular routine backups of data, you are solely responsible for all data that you transmit or that relates to any activity you have undertaken using the Site. You agree that we shall have no liability to you for any loss or corruption of any such data, and you hereby waive any right of action against us arising from any such loss or corruption of such data. ELECTRONIC COMMUNICATIONS, TRANSACTIONS, AND SIGNATURES Visiting the Site, sending us emails, and completing online forms constitute electronic communications. You consent to receive electronic communications, and you agree that all agreements, notices, disclosures, and other communications we provide to you electronically, via email and on the Site, satisfy any legal requirement that such communication be in writing. YOU HEREBY AGREE TO THE USE OF ELECTRONIC SIGNATURES, CONTRACTS, ORDERS, AND OTHER RECORDS, AND TO ELECTRONIC DELIVERY OF NOTICES, POLICIES, AND RECORDS OF TRANSACTIONS INITIATED OR COMPLETED BY US OR VIA THE SITE. You hereby waive any rights or requirements under any statutes, regulations, rules, ordinances, or other laws in any jurisdiction which require an original signature or delivery or retention of non-electronic records, or to payments or the granting of credits by any means other than electronic means. MISCELLANEOUS These Terms of Use and any policies or operating rules posted by us on the Site or in respect to the Site constitute the entire agreement and understanding between you and us. Our failure to exercise or enforce any right or provision of these Terms of Use shall not operate as a waiver of such right or provision. These Terms of Use operate to the fullest extent permissible by law. We may assign any or all of our rights and obligations to others at any time. We shall not be responsible or liable for any loss, damage, delay, or failure to act caused by any cause beyond our reasonable control. If any provision or part of a provision of these Terms of Use is determined to be unlawful, void, or unenforceable, that provision or part of the provision is deemed severable from these Terms of Use and does not affect the validity and enforceability of any remaining provisions. There is no joint venture, partnership, employment or agency relationship created between you and us as a result of these Terms of Use or use of the Site. You agree that these Terms of Use will not be construed against us by virtue of having drafted them. You hereby waive any and all defenses you may have based on the electronic form of these Terms of Use and the lack of signing by the parties hereto to execute these Terms of Use. CONTACT US In order to resolve a complaint regarding the Site or to receive further information regarding use of the Site, please contact us at: ThreeFold FCZ BA1120 DMCC BUSINESS CENTRE, LEVEL NO 1, JEWELLERY & GEMPLEX 3, DUBAI, UNITED EMIRATES ARAB info@threefold.io APPENDIX SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_toc.md",
    "title": "Terms & Conditions",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc",
    "content": "Terms & Conditions TABLE OF CONTENTS - Terms & Conditions ThreeFold Related Websites - Terms & Conditions TFGrid Users TFGrid 3 - TFTA to TFT - Terms & Conditions TFGrid Farmers TFGrid 3 - Terms & Conditions Sales",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_sales.md",
    "title": "Terms & Conditions Sales",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_sales",
    "content": "Terms Conditions Sales These terms and conditions (the “Agreement\") constitute a legal agreement between you (“farmer,”, \"customer\", “you\", or “yours”) and TF Tech NV, with registered office at Antwerpse Steenweg 19, B-9080 Lochristi, Belgium, (company number KBO 0712.845.674) (\"we\" \"our\" or the \"Company\") regarding our the sales of a service or product to you. DEFINITIONS AND RELATED TERMS The definitions which apply to this Agreement, unless stated otherwise herein, can be found here, and are incorporated herein by reference. TF TECH GENERAL TERMS AND CONDITIONS OF SALE Unless explicitly stated otherwise in a specific agreement, these General Terms and Conditions of Sale, together with the Sales Order, represent the entire agreement (“Agreement”) between you or the entity you represent, and TF Tech NV, a Belgian limited liability company with registered office at Antwerpsesteenweg 19, B-9080 Lochristi, Belgium, registered with the Crossroads Bank of Enterprises under company number 0712.845.674 (RPR Gent, district Gent) (the “Company”). 1. SALES ORDERS Company will issue a Sales Order (either electronically or otherwise in writing), and such Sales Order must be explicitly accepted by the Customer. In order to qualify as a Sales Order, the relevant document shall specify, without limitation, at least: - The identity of the Customer; - The Deliverables; - The Effective Date; - The Acceptance Period; and - The prices and fees to be paid in respect of the Deliverables. In addition, each Sales Order issued may set forth (i) the applicable quantities, (ii) the unit prices, (iii) the bill-to address, (iv) the site(s) where any Services are to be performed (if applicable), and (v) any additional special terms or instructions. 2. PRICING AND PAYMENT The prices and fees for Deliverables shall be as set forth in the Sales Order. All prices will be displayed in the Customer’s local currency where they have chosen that option. In such case prices are displayed in the Customer’s local currency for information purposes only. The final contracted price shall be in EUR and may be subject to bank charges and/or currency exchange fees which will be borne by Customer. Company shall issue an invoice against each accepted Sales Order (the “Invoice”). The Invoice shall be made available either electronically, in writing or online through the Company’s electronic invoicing system (if any). Each Invoice shall automatically become due and payable on the date of issuance of the Sales Order. In the event that Customer fails to make any payment of undisputed amounts on or prior to the applicable invoice due date (as determined in accordance with this Section 3), then those undisputed amounts shall accrue interest from the due date at a rate of eight percent (8%) per annum (or such lesser rate as may be the maximum permissible rate allowed under applicable law), calculated from the first day when such amount became due and owing until the date on which such amount is paid. The Company’s right to claim additional damages shall remain unaffected. Customer shall pay all federal, state or local sales or use taxes and any other government taxes, fees, duties or charges that are imposed upon the fees and charges paid by Customer to Company pursuant to this Agreement. Company will be responsible for all other taxes arising from the transactions contemplated by this Agreement, including, without limitation, any taxes based upon Company’s property, net income or gross receipts. Customer shall pay all such amounts directly to the taxing authority unless the taxing authority requires that Company collect and remit payment, in which event Customer shall pay such amounts to Company and Company shall remit such amounts to the authority and provide Customer with a certificate stating that such amounts were so remitted. Customer and Company shall reasonably cooperate in order to take actions to minimize, or to qualify for exemptions from, any applicable taxes, duties or tariffs. Such cooperation shall include, without limitation, the furnishing of certifications that purchases by Customer are for purposes of resale, if applicable, and must be used in accordance with any local and international laws. Customer and Company shall each have the right to protest or appeal any tax or charge assessed against it by any taxing authority with respect to the subject matter of this Agreement. 3. DELIVERY AND ACCEPTANCE Delivery. Unless otherwise agreed, prices and delivery are ExWorks (INCOTERMS 2010) from the production premises of the Company in Lochristi (Belgium) or the third party designated in the Sales Order. Any charges Company may be required to pay or collect on the sale, purchase, delivery, storage, use or transportation of the goods shall be paid by Customer. Export regulations. Customer is responsible for complying with all applicable export and/or re-export restrictions and regulations. Title; Risk of Loss. Unless otherwise agreed, the risk of loss passes to Customer on the date when the goods are delivered to the carrier, as described in INCOTERMS 2010 (the “Delivery Date”). Where the risk of loss has passed to Customer, Customer must obtain redress for freight losses, shortages or damages from the carrier or its insurer. Company is not responsible for any such losses. Notwithstanding any provision of INCOTERMS 2010 or contained herein, equitable title and accession to the goods shall, where permitted by law, remain with Company until Customer has paid in full. This shall be the case even if legal title to the goods shall be deemed by law to have passed to Customer at the time of delivery and prior to performance of all of Company’s obligations. Customer shall grant and by acceptance of the goods is deemed to have granted to Company a first security interest in all goods to secure payment of amounts owed by Customer. In certain circumstances for instance for very large orders Customer agrees to execute a financing statement at Company's request. Company may reclaim any goods delivered or in transit if Customer fails to make payment when due. Inspection and Acceptance. Customer will evaluate any Deliverable that has been delivered to Customer or performed in accordance with this Agreement to determine whether it complies with all applicable Specifications. Customer shall give Company written notice of Acceptance or Rejection within the Acceptance Period. Upon notice of Rejection, Customer may: immediately return to Company the relevant Deliverables, provided such Deliverables are in good working condition and without damage, in which case the Invoice will be cancelled through a credit note; direct Company to correct the nonconformity, in which case Company (at no cost to Customer) shall correct the nonconformity within thirty (30) days of Customer’s request; or upon mutual agreement of the Parties, pay Company a reduced amount for the nonconforming item (in which case the Invoice will be partially cancelled accordingly through a credit note). Deliverables provided to Customer will be deemed accepted: in the absence of any notice of Rejection within or at the expiration of the Acceptance Period; or in the absence of any return of the Deliverables within the Acceptance Period. 4. USAGE RESTRICTIONS Customer acknowledges that any use or purchase of the Hardware or Services for fraudulent or illegal purposes or purchases Hardware or Services in a fraudulent manner will irrevocably invalidate any Agreement between the Customer and Company and may lead to prosecution. 5.WARRANTIES Hardware Warranty by Company to Customer. The Hardware supplied by Company pursuant to this Agreement is manufactured and/or developed by third party vendors and will carry the warranties specified by the applicable third party vendor, which warranties Company shall extend to Customer to the full extent permissible under such warranties or as provided under statutory law. Services Warranties. Company warrants that all Services performed hereunder shall be performed in a timely, professional and workmanlike manner, in conformance with industry practices, and Company warrants the workmanship of such Services for a period of ninety (90) days from the date on which the applicable Services are provided. Eligibility. Any warranties shall be invalid and the company shall have no responsibility or liability whatsoever for any Hardware or Software, or part thereof, that (a) has had the Serial Number, Model Number, or other identification markings altered, removed or rendered illegible; (b) has been damaged by or subject to improper installation or operation, misuse, accident or neglect; (c) has become defective or inoperative due to its integration or assembly with any equipment or products not supplied by Company; (d) has been repaired, modified or otherwise altered by anyone other than Company and/or has been subject to the opening of the Hardware without Company’s prior written consent; (e) has had any item removed from the Hardware including any storage device including USB drives. If any warranty claim by Customer falls within any of the foregoing exceptions, Customer shall pay Company its then current rates and charges for such services. Termination. Cancellation or termination of this Agreement by either Company or Customer shall void this warranty. Remedies and repair. Company’s liability and responsibility under this warranty is limited to the obligation, at Company’s option, to either repair or replace the relevant Deliverables. In the event that after repeated efforts Company is unable to repair or replace a defective Deliverable, then Customer’s exclusive remedy and Company’s entire liability in contract, tort, or otherwise shall be the payment by Company of Customer's actual damages after mitigation, but shall not exceed the purchase price or fee actually paid by Customer for the relevant defective Deliverable. The Company shall have no obligation to repair, replace, or refund the relevant Deliverable until the Customer returns the defective Deliverable to the Company. Before returning any Deliverable to the Company, the Customer must contact the Company for a return authorization and other appropriate instructions. The Company warrants a repaired Deliverable only for the unexpired term of the original warranty for the defective Deliverable. The Company warrants parts exchanged in connection with a repair, only for the unexpired term of the original warranty for the defective Deliverable. Warranty Procedure. The Customer shall notify the Company immediately in writing of any obvious or potential defects in the Deliverables, following the acceptance thereof, as soon as such defects have been discovered in the ordinary course of business within the aforementioned warranty terms. Company shall only remedy defective Deliverables under these Warranty provisions provided the defects are notified to Company within the relevant Warranty period. Disclaimer. THE ABOVE WARRANTY IS IN LIEU OF ALL OTHER WARRANTIES, EXPRESS OR IMPLIED, INCLUDING THOSE OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ALL OF WHICH ARE EXPRESSLY DISCLAIMED. COMPANY SHALL NOT BE LIABLE FOR ANY CONSEQUENTIAL, INCIDENTAL, SPECIAL, OR EXEMPLARY DAMAGES (WHETHER FOR LOSS OF PROFIT, LOSS OF BUSINESS, LOSS OF OPPORTUNITY, MISSED SAVINGS, DEPLETION OF GOODWILL, RECALL, DISMANTLING OR OTHERWISE); EVEN IF IT HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Limitations. To the fullest extent permitted by law, Company’s total and aggregate liability in respect to direct damages, whether in contract or tort (including negligence or breach of statutory duty), for each respective breach or series of related breaches or any and all losses, shall not exceed in the aggregate (i) the actual amount paid for the specific Deliverables giving rise to the claim; or (ii) EUR 10,000, whichever amount is lower. The existence of one or more claims under this Agreement shall not enlarge the limit. The limitations and exclusions referred to in this clause will not apply in the event the liability results from the Company’s deliberate intent (or that of its subordinates or assistants). The limitations and exclusions of liability, as well as indemnity stipulated for Company itself in the above paragraphs are also stipulated for and on behalf of its directors, employees, agents and other intermediaries and/or any other person employed by it or delivering services to it within the framework of the Agreement. 6. MISCELLANEOUS Severability. If any provision of this Agreement will be held to be invalid or unenforceable for any reason, the remaining provisions will continue to be valid and enforceable. If a court finds that any provision of this Agreement is invalid or unenforceable, but that by limiting such provision, it would become valid and enforceable, then such provision will be deemed to be written, construed, and enforced as so limited. Governing Law. All disputes will be governed by the laws of Belgium. The venue for litigation will be the appropriate courts of Ghent, Belgium. Choice of law rules of any jurisdiction and the United Nations Convention on Contracts for the International Sale of Goods will not apply to any dispute. Changes. TF Tech NV reserves the right to vary these T&Cs at any time. TF Tech NV will inform customers by email if the T&Cs change using the contact email provided at the time of purchase, or using any email subsequently provided by the customer as their main email. The customer agrees that they will always ensure such emails are up to date and monitored. Any variations to the T&Cs will be deemed to have been accepted unless TF Tech NV is informed to the contrary. APPENDIX SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_griduser.md",
    "title": "Terms & Conditions TFGrid Users TFGrid 3",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_griduser",
    "content": "USER TERMS AND CONDITIONS These Terms and Conditions (the \"Agreement\") constitute a legal agreement between you (“user,\" “you\", or “yours”) and THREEFOLD RELATED COMPANIES (“Threefold”, “Company,” “us,” “we” or “our”) , governing your usage of the ThreeFold software and related products (the “TF Products”), including but not limited to: - The ThreeFold software and technologies (the \"Software\"), including: - \"Zero OS\", a stateless operating system which enables distributed hardware to form the ThreeFold_Grid which generates IT Capacity (storage and compute capacity) - \"Zero Chain\", the blockchain framework - and any other related software components which are referenced in github under https://github.com/threefoldtech and https://github.com/threefoldfoundation - Threefold applications (including the ThreeFold Connect app) - ThreeFold Tokens (TFTs) - The TFGrid and any related products. The terms of your interaction with the websites, social networks or online communication channels maintained by the Company (including but not limited to the posting or publishing of content, information or promotional materials) shall be governed by the ‘Terms of Service’ referred to on www.threefold.io, which are incorporated herein by reference. The IT Capacity services provided by Farmers on the ThreeFold_Grid are governed by the present Agreement, but may be supplemented by additional terms agreed between the relevant Farmer and the User governing their delivery, access and use of the IT Capacity through the ThreeFold_Grid. This supplementation shall not extend the liability of ThreeFold. You understand and agree that by accepting the terms of this Agreement, either by clicking to signify acceptance, or by taking any one or more of the following actions downloading, installing, running,/and or using the applicable TF Products, you agree to be bound by the terms of this Agreement effective as of the date that you take the earliest of one of the foregoing actions. You represent and warrant that you are 18 years old or older and have the right and authority to enter into and comply with the terms of this Agreement. 1. DEFINITIONS Unless defined otherwise in this Agreement below, capitalized terms in this Agreement shall have the meaning ascribed to them in the following links for Definitions. SPECIAL DEFINITIONS - THREEFOLD COMPANIES noted as (“THREEFOLD”, “COMPANY,” “US,” “WE” OR “OUR”) mean any of the companies as mentioned below: - DUBAI & BVI - THREEFOLD DMCC, TF Hub Limited - THREEFOLD FZC (the original ThreeFold in UAE, no longer active) - THREEFOLD LABS IT - MAZRAA IS BRANDNAME OF THREEFOLD LABS IT - EUROPE - THREEFOLD VZW - TFTECH NV BELGIUM - BETTERTOKEN NV BELGIUM - THREEFOLD AG - TFCHAIN (\"TFCHAIN\") - ThreeFold Blockchain manages the ThreeFold Grid and the 3Nodes as an autonomous piece of software. - A DAO has been created (decentralized autonomous organization) which manages the behaviour of this Blockchain Software (upgrades & functionalities) - Is a piece of opensource software as used by all of us together. - TFChain has been introduces since TFGrid 3.x - Change Request - Change Requests can be registered on the TFChain. They are a proposal for any request for change. - Change Requests can be used to trigger change in protocol, software update, changes in software or TFGrid specifications. - Change Requests need to be approved by majority of Validators - Change Requests are being introduced from TFGrid 3.x (x to be defined) - TFChain Validators (\"VALIDATOR\") - A Validator is a piece of software running a TFChain Blockchain Function to protect the security and sovereignity of the Blockchain. - Each Validator has a vote to agree on changes in protocol, software updates, changes in software or TFGrid specifications. - Each Owner / Maintainer of a Validator has to stake a certain to be defined amount of TFT before voting can happen. - Validators are being introduced from TFGrid 3.x (x to be defined) - Majority of Validators have to vote positively on each Change Request suggested before change can happen. - Validators are required to let the DAO function. - DAO - Decentralizes Autonomous Organization - Implemented on multiple levels, but for release 3.0.x only on level 1 which is on Substrate TFChain level. - The DAO is the set of rules under which the decentralized organization functions. 2. USE OF TF PRODUCTS By entering into this Agreement you receive a non-exclusive, non-sublicenseable, non-transferable right to use the TF Products pursuant to this Agreement during the Term hereof solely for your internal business purposes subject to the limitations set forth herein. You acknowledge that the Software consists of open source code which is made available to you pursuant to the terms of the relevant open-source license agreement(s) as specified in github under https://github.com/threefoldtech and https://github.com/threefoldfoundation (the \"Open Source License(s)\"). Your use of the Software and the TF Products is conditioned upon your compliance at all times with the terms of all applicable Open Source License(s), including without limitation all provisions governing access to source code, modification, and/or reverse engineering. You are responsible for complying with any applicable documentation, meaning any information that describes the TF Products, provides instructions or recommendations related to the configuration and/or use of the TF Products, or otherwise informs Users of their intended use, including, but not limited to content provided directly to User or published at or otherwise made available in conjunction with the ThreeFold_Grid, the ThreeFold_Token or the Software (“Documentation”) and for satisfying all technical requirements of the TF Products, including any requirements set forth in the Documentation for ensuring that the TF Products perform properly. 3. FARMER GRANT OF RIGHT TO FARMING POOL By making available one or more computers, network or storage devices (\"3Nodes\") and connecting such 3Nodes to the TF Grid (as part of a Farming Pool) via the Software, you hereby grant to Company and Users the irrevocable right to access and use the 3Nodes as follows: - to use storage, compute and network services as delivered by your 3Node(s) - to store data and materials by Users on your 3Node(s) (the \"Content\") and to access such Content from your 3Node(s) at any time in accordance with the capabilities of the software installed on the 3Nodes; 4. REGISTRATION TO THE THREEFOLD CONNECT (FORMERLY 3BOT CONNECT) APPLICATION In order to access certain TF Products you will be required to install the ThreeFold Connect application on your device and register your account in this ThreeFold Connect application by creating a username and password. You agree to provide us with accurate, complete, and current registration information about yourself. It is your responsibility to ensure that your password remains confidential and secure. By registering, you agree that you are fully responsible for all activities that occur under your user name and password. We may assume that any communications we receive under your account have been made by you. If you are a billing owner, an administrator, or if you have confirmed in writing that you have the authority to make decisions on behalf of a User (\"3Bot Administrator\"), you represent and warrant that you are authorized to make decisions on behalf of the User and agree that ThreeFold is entitled to rely on your instructions. You are responsible for notifying us at legal@threefold.io if you become aware of any unauthorized use of or access to your 3Bot account. You understand and agree that we may require you to provide information that may be used to confirm your identity and help ensure the security of your account. ThreeFold will not be liable for any loss, damages, liability, expenses or attorneys’ fees that you may incur as a result of someone else using your password or account, either with or without your knowledge and/or authorization, and regardless of whether you have or have not advised us of such unauthorized use. You will be liable for losses, damages, liability, expenses and attorneys’ fees incurred by ThreeFold or a third party due to someone else using your account. In the event that the 3Bot Administrator or User loses access to an account or otherwise requests information about an account, ThreeFold reserves the right to request from the 3Bot Administrator or User any verification it deems necessary before restoring access to or providing information about such account in its sole discretion. 5. USE OF THREEFOLD TOKENS ThreeFold_Tokens (TFTs) are a digital token used to buy autonomous and decentralized IT Capacity (compute, storage, network, IT services, applications) on the ThreeFold_Grid. TFTs have a specific commercial utility, since ThreeFold_Tokens were conceived as the designated currency for buying and selling IT Capacity on the ThreeFold_Grid. TFTs are exclusively generated through a process called Farming, which means that TFTs are created only when new IT Capacity is added to the ThreeFold_Grid. TFTs are registered on a blockchain which is part of the Stellar Network (https://stellar.org), Binance Smart Chain, a Cosmos Chain or our own TFChain. The first batch of TFTs that got registered in the blockchain consists of the ‘Genesis Block’ of 685 million TFTs that were Farmed by or on behalf of the Company using an initial Farming Pool, also known as the Genesis Pool. Two versions of ThreeFold_Tokens have been issued: - A first version of the ThreeFold_Token was issued as from March 2018 on ThreeFolds initial blockchain called Rivine. These TFTs are also referred to as \"TFTv1\" or “TFTA”. These tokens have now been migrated to the Stellar blockchain. - A second version of the ThreeFold_Token was issued as from May 2020 on the Stellar blockchain. These TFTs are also referred to as \"TFTv2\". This token is available on multiple blockchains, the total amount of tokens farmed is the same independent of blockchain used, TFBridges are used to migrate TFTs between blockchain technology. While the original TFTv1 kept all same properties and benefits, they are now called TFTA on the Stellar blockchain. Since the creation of the TFTv2, TFTA’s have become ThreeFolds voluntary staking pool of Tokens, which means these TFTs can only be used to buy IT Capacity and cannot be traded otherwise. However any User can convert TFTA’s into TFTs (i.e. TFTv2) by implementing a few simple migration steps which can be found here. Once converted, any TFT’s can be traded or transferred by various means as the User deems fit, as further explain here. The TF Foundation has chosen to use multiple blockchain technology for storing and managing the TFT. You can use any wallet that supports the chosen blockchain, including but not limited to the wallet included in the ThreeFold Connect app. Your use of the TF Products and/or TFTs constitutes your acknowledgement of the aforementioned general principles relating to the ThreeFold_Tokens. As a User you furthermore acknowledge that: - each TFT constitutes a value of exchange on the ThreeFold_Grid; - you have been advised that the ThreeFold_Tokens are the result of farming which means a Farmer connects IT Capacity to the ThreeFold_Grid; - as such the TFTs have not been registered under any country’s securities laws; - TFTs are neither securities nor an investment instrument; and - the purchase, creation or use of TFTs involve risks, all of which the User fully and completely assumes by entering into this Agreement. 6. MODIFICATIONS TO THE TF PRODUCTS We reserve the right, in our sole discretion, to modify or discontinue, temporarily or permanently, any TF Products (or any features or functionality thereof) at any time without notice and without obligation or liability to you. You agree that ThreeFold shall not be liable to you or any third party for any modification, suspension, or discontinuance of the TF Products or related services. 7. USER RESPONSIBILITIES At all times during the Term of this Agreement or the period when you use any TF Products, your Content is maintained in a 3Node or TFTs are maintained in a wallet address of which you hold the private keys, whichever is longer: 1. You will comply with the terms of this Agreement and the Privacy Policy and any other terms and conditions required by in connection herewith, the Open Source Licenses, and the terms of all other agreements to which you are a party in connection with your performance under this Agreement including, without limitation, any agreement you have with a third-party service provider. 2. You will use and operate the TF Products in strict compliance with terms of this Agreement and any applicable laws or regulations, and you will not take any action not expressly authorized hereunder. 3. Without prejudice to your rights under any applicable Open Source license, you will not modify or attempt to modify the TF Products for any purpose including but not limited to attempting to circumvent the audit, bypass security, manipulate the performance of, or otherwise disrupt the TF Products for any reason, including but not limited to attempting to increase the amount of data stored or bandwidth utilized, as defined herein, and you will not otherwise interfere with the operation of the ThreeFold_Grid. 4. You acknowledge and agree that the Company has no practical access to your data or knowledge of the nature of the data stored on your 3Bot or the 3Nodes (including but not limited to Content) and that it does not retain any Content or other data that you process using the ThreeFold_Grid. The Company has no control in the management of such Content or data, nor any influence in the specific processing procedures. The Company will never pursue changes to TF Products that could make User data accessible to Company or third parties. We are a neutral intermediary and do not act on behalf of a Farmer, User or any other party to process Content or User data and thus you acknowledge and agree that we should not be qualified as data processors or sub-processor under the General Data Processing Directive (Regulation (EU) 2016/679 of the European Parliament and of the Council of 27 April 2016 on the protection of natural persons with regard to the processing of personal data and on the free movement of such data, and repealing Directive 95/46/EC) (‘GDPR’). 5. Company may suspend User’s use of the TF Products if Company believes the User to be: (a) violating any term of this Agreement; or (b) using the TF Products in a manner that Company reasonably believes may cause a security risk, a disruption to the TF Products (including the ThreeFold_Grid), or liability for Company or any persons involved in the ThreeFold Open Source project. 8. USAGE RESTRICTIONS (ACCEPTABLE USE) You will use the TF Products in strict accordance with the terms of this Agreement and in no other manner. Without limiting the generality of the foregoing, you will not: 1. access or use the TF Products: (i) in violation of applicable laws; (ii) to send or store material knowingly or intentionally containing software viruses, worms, Trojan horses or other harmful computer code, files, or scripts; (iii) in a manner that interferes with or disrupts the integrity or performance of the ThreeFold_Grid (or the data contained therein); or (iv) in any manner that could interfere with, disrupt, negatively affect or inhibit other Users from fully enjoying their use of the TF Products or that could damage, disable, overburden or impair the functioning of the TF Products in any manner. 2. delete or otherwise render Content unavailable for recovery independent of the programmatic functionality of the relevant software; 3. violate, infringe or misappropriate any intellectual property or other third-party right or commit a tort; 4. modify, copy (other than standard page caching), publicly perform, publicly display, sell, rent, lease, timeshare or otherwise distribute the TF Products, in whole or in part. This restriction does not apply to open source software we release, which you can use subject to the applicable open source software license terms; 5. attempt to bypass or circumvent measures employed to prevent or limit access to any content, area or functionality on the TF Products, without providing prior notice to Company of the method used to bypass or circumvent; 6. in any other way attempt to interfere, impede, alter, or otherwise interact with the TF Products in any manner not expressly authorized hereunder; 7. use any of the TF Products other than for its intended purposes; or 8. use the TF Products to engage in or promote any activity that violates these User Terms and Conditions. 9. CONTENT RESTRICTIONS The IT Capacity that is made available on the ThreeFold_Grid can be used by any Users to create, post, upload, share or store Content, such as text, graphics, photos, videos, sound, data or other information and materials submitted or provided by Users. We have no access to, nor do we control, own, or endorse any Content that you transmit, store or process via the ThreeFold_Grid or any other TF Products. You are solely responsible for any Content stored using the ThreeFold_Grid or any TF Products, and for any data that you have entered using the ThreeFold Connect application. You hereby represent and warrant that (1) you own all intellectual property rights (or have obtained all necessary permissions) to provide your Content and other data; (2) such Content and other data will not violate any agreements or confidentiality obligations; and (3) such Content and data will not violate, infringe or misappropriate any intellectual property right or other proprietary rights of any person or third party. You will not create, post, share or store Content or other data that: 1. is unlawful, libelous, defamatory, harassing, threatening, invasive of privacy or publicity rights, abusive, inflammatory, fraudulent or otherwise objectionable; 2. would constitute, encourage or provide instructions for a criminal offense, violate the rights of any party, otherwise create liability or violate any local, state, national or international law; 3. intentionally misleads by containing or depicting any statements, remarks or claims that do not reflect your honest views and experiences; 4. impersonates, or misrepresents your affiliation with, any person or entity (including Company); 5. references or depicts Company, our TF Products or any related services but fails to disclose any material connection to us that may exist; 6. contains any unsolicited promotions, political campaigning, advertising or solicitations; 7. contains any viruses, corrupted data or other harmful, disruptive or destructive files or content; or 8. in our sole judgment, is objectionable or that restricts or inhibits any other person from using or enjoying the TF Products, or that may expose Company or others to any harm or liability of any type; 10. REPRESENTATIONS AND WARRANTIES You hereby represent, warrant, and covenant that: 1. You have full legal capacity, power and authority to execute and deliver this Agreement and to perform its obligations hereunder. This Agreement constitutes valid and binding obligations of the User, enforceable in accordance with its terms. 2. You are NOT a target person or entity under any restrictive measures in the framework of the EU Common Foreign and Security Policy and you are NOT named on any E.U. or U.S. government denied-party list. 3. You are, and have at all times been, in compliance in all material respects with each legal requirement that is are applicable to you, or the ownership of your assets, relating to money laundering (including but not limited to applicable anti-money laundering regulations). 4. You have been advised and acknowledge that the ThreeFold_Tokens or TFTs are NOT issued by any company or organization and are only registered in the TF BlockChain as an automatic action when a Farmer connects IT Capacity to the ThreeFold_Grid, as such they have not been registered under any country’s securities laws. 5. You understand that the TFTs involve risks, all of which you fully and completely assume. You understand and expressly accept that the TFTs will be created and delivered to you at your sole risk on an \"AS IS\" basis. You understand and expressly accept that you have not relied on any representations or warranties made by the Company outside this Agreement, including, but not limited to, conversations of any kind, whether through oral or electronic communication, or any white paper. Without limiting the generality of the foregoing, you assume all risk and liability for the results obtained by any use of TFTs and regardless of any oral or written statements made by or on behalf of the Company, by way of technical advice or otherwise, related to the use of the TFTs. 6. You have such knowledge and experience in technology, financial and business matters that you are capable of evaluating the merits and risks of such purchase of TFTs and corresponding IT Capacity and are able to bear the economic risk of such acquisition for an indefinite period of time. 7. You are executing this Agreement for your own account, not as a nominee or agent. 8. You understand that you have no right against the Company or any other person related to the ThreeFold project except in the event of the Company’s breach of this agreement or intentional fraud. 9. You understand that you bear sole responsibility for any taxes as a result of the matters and transactions the subject of this Agreement, and any future acquisition, ownership, use, sale or other disposition of TFTs. To the extent permitted by law, you agree to indemnify, defend and hold the Company or any of its affiliates, employees or agents (including developers, auditors, contractors or founders) harmless for any claim, liability, assessment or penalty with respect to any taxes (other than any net income taxes of the Company) associated with or arising from your acquisition, use or ownership of TFTs hereunder. 11. TERM AND TERMINATION This Agreement shall be effective as of the date that you take the earliest of the following actions: your acceptance of this Agreement, either by clicking to signify acceptance, or by taking any one or more of the following actions: downloading, installing, running and/or using any TF Product. It will continue until terminated per the terms below. Either party may terminate this Agreement immediately at any time without notice to the other party. In case of termination, the User shall immediately cease using the TF Products. 12. FEEDBACK Company shall have a royalty-free, worldwide, transferable, sublicensable, irrevocable, perpetual license to use or incorporate into the TF Products any suggestions, ideas, enhancement requests, feedback, recommendations or other information provided by Users relating to the features, functionality, or operation thereof (\"Feedback\"). Company shall have no obligation to use Feedback, and User shall have no obligation to provide Feedback. 13. INDEMNIFICATION To the fullest extent permitted by applicable law, you will defend, indemnify and hold harmless Company and our respective past, present, and future employees, officers, directors, contractors, consultants, equity holders, suppliers, vendors, service providers, parent companies, subsidiaries, affiliates, agents, representatives, predecessors, successors and assigns (the \"Indemnified Parties\") from and against all claims, damages, costs and expenses (including attorneys’ fees) that arise from or relate to: (i) your use of the TF Products; (ii) any Feedback you provide; or (iii) your breach of this Agreement. Company reserves the right to exercise sole control over the defense of any claim subject to indemnification under the paragraph above, at your expense. This indemnity is in addition to, and not in lieu of, any other indemnities set forth in a written agreement between you and Company. If any TF Product becomes, or in Company’s reasonable judgment is likely to become, the subject of a claim of infringement, then Company may in its sole discretion: (a) obtain the right, for User to continue using such TF Product; (b) provide a non-infringing functionally equivalent replacement; or (c) modify such TF Product so that it is no longer infringing. If Company, in its sole and reasonable judgment, determines that none of the above options are commercially reasonable, then Company may, without liability, suspend or terminate User’s use of the relevant TF Product. This Section 12 states Company’s sole liability and User’s exclusive remedy for infringement claims. 14. DISCLAIMER AND LIMITATION OF LIABILITY The User hereby acknowledges the fact that he/she has been advised that TFTs may qualify as a security and that the offers and sales of TFTs have not been registered under any country’s securities laws and, therefore, cannot be resold except in compliance with the applicable country’s laws. The User understands that the use of TFTs, the other TF Products and/or the ThreeFold_Grid involves risks, all of which the User fully and completely assumes, including, but not limited to, the risk that (i) the technology associated with the ThreeFold_Grid, 3Nodes, 3Bot and/or related TF Products will not function as intended; (ii) the Threefold project will not be completed; (iii) Threefold will fail to attract sufficient interest from key stakeholders; and (iv) ThreeFold or any related parties may be subject to investigation and punitive actions from governmental authorities. Except as explicitly set forth herein, Company makes no representations that the TF Products are appropriate for use in any jurisdictions. Users engaging with the TF Products from any jurisdictions do so at their own risk and are responsible for compliance with local laws. The User understands and expressly accepts that the TFTs, ThreeFold Connect App, the ThreeFold_Grid and other TF Products were created and made available to the User at its sole risk on an \"AS IS\" and “UNDER DEVELOPMENT” basis. COMPANY DISCLAIMS ALL REPRESENTATIONS AND WARRANTIES, EXPRESS AND IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. COMPANY MAKES NO WARRANTY THAT THE TF PRODUCTS OR DOCUMENTATION WILL BE UNINTERRUPTED, ACCURATE, COMPLETE, RELIABLE, CURRENT, ERROR-FREE, VIRUS FREE, OR FREE OF MALICIOUS CODE OR HARMFUL COMPONENTS, OR THAT DEFECTS WILL BE CORRECTED. COMPANY DOES NOT CONTROL, ENDORSE, SPONSOR, OR ADOPT ANY CONTENT AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND REGARDING THE CONTENT STORED ON THE THREEFOLD GRID. COMPANY HAS NO OBLIGATION TO SCREEN, MONITOR, OR EDIT CONTENT AND IS NOT RESPONSIBLE OR LIABLE FOR ANY CONTENT. YOU ACKNOWLEDGE AND AGREE THAT COMPANY HAS NO INDEMNITY, SUPPORT, SERVICE LEVEL, OR OTHER OBLIGATIONS HEREUNDER. User understands and expressly acknowledges that it has not relied on any representations or warranties made by the Company, TF Tech NV, Bettertoken NV, Kristof De Spiegeleer, any person or entity involved in the development or promotion of the TF Products and/or the ThreeFold project, or any related parties, including, but not limited to, conversations of any kind, whether through oral or electronic communication or otherwise, or any whitepapers or other documentation. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE USER ASSUMES ALL RISK AND LIABILITY FOR THE RESULTS OBTAINED BY THE USE OF THE TF PRODUCTS (INCLUDING THE THREEFOLD TOKENS) AND REGARDLESS OF ANY ORAL OR WRITTEN STATEMENTS MADE BY THREEFOLD, BY WAY OF TECHNICAL ADVICE OR OTHERWISE, RELATED TO THE USE THEREOF. COMPANY SHALL NOT BE LIABLE FOR ANY INCIDENTAL, CONSEQUENTIAL, PUNITIVE, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS, REVENUE, DATA, OR DATA USE, OR DAMAGE TO BUSINESS) HOWEVER CAUSED, WHETHER BY BREACH OF WARRANTY, BREACH OF CONTRACT, IN TORT (INCLUDING NEGLIGENCE) OR ANY OTHER LEGAL OR EQUITABLE CAUSE OF ACTION EVEN PREVIOUSLY ADVISED OF SUCH DAMAGES IN ADVANCE OR IF SUCH DAMAGES WERE FORESEEABLE, AND COMPANY SHALL ONLY BE LIABLE FOR DIRECT DAMAGES CAUSED BY ITS GROSS NEGLIGENCE. IN NO EVENT WILL COMPANY’S TOTAL AGGREGATE LIABILITY ARISING FROM OR RELATING TO THIS AGREEMENT EXCEED ONE HUNDRED EURO (€ 100.00). 15. RELEASE To the fullest extent permitted by applicable law, you hereby explicitly release (1) the TF Foundation (ThreeFold_Dubai), (2) each individual or entity acting as a Farmer, (3) TF Tech NV, (4) any of the companies or individuals related to these entities, and (5) any person contributing or otherwise assisting in developing, marketing or distributing the TF Products (hereinafter collectively referred to as \"ThreeFold Relatives\") from responsibility, liability, claims, demands and/or damages (actual and consequential) of every kind and nature, known and unknown (including, but not limited to, claims of negligence), arising out of or related to: - the acts or omissions of third parties; and - your purchase of TFTs (if any) from ThreeFold Relatives, regardless of the names or former names under which such TFTs may have been identified in the relevant contracts (e.g. ‘Internal ThreeFold_Tokens’, ‘iTFTs’, TFTs, etc.). If and to the extend you have purchased or otherwise acquired TFTs from ThreeFold Relatives that were identified in the relevant contracts as ‘Internal ThreeFold_Tokens’ or ‘iTFTs’, your use of the TF Products (including your subsequent receipt or acceptance of TFTs) implies your confirmation that such purchase or acquisition has been duly completed as a result of your receipt of a corresponding amount of TFTs, and that all deliverables under the relevant contracts (known as ‘iTFT Purchase Agreement’, ‘TFT Purchase Agreement’ or ‘ITO investment agreement’) have been duly delivered and that there are no further obligations from any ThreeFold Relatives to you in relation to such contracts. 16. EXPORT COMPLIANCE The TF Products may be subject to export laws and regulations of the European Union, the United States and other jurisdictions. The User represents that it is not named on any E.U. or U.S. government denied-party list. The User shall not access or use the TF Products in a E.U. or U.S.-embargoed or any sanctioned country or region or in violation of any E.U. or U.S. export law or regulation. User shall not use the TF Products to export, re-export, transfer, or make available, whether directly or indirectly, any regulated item or information to anyone outside the E.U. or U.S. in connection with this Agreement without first complying with all export control laws and regulations that may be imposed by the European Union, any EU country or the U.S. Government and any country or organization of nations within whose jurisdiction the User operates or does business. 17. ENTIRE AGREEMENT,SEVERABILITY, WAIVER 1. This Agreement sets forth the complete and final agreement of the parties concerning the subject matter hereof, and supersedes, replaces all prior agreements, written and oral, between them concerning the subject matter hereof. If a term of this Agreement to be invalid or unenforceable, the remaining provisions will continue in full force and effect. A party’s consent to, or waiver of, enforcement of this Agreement on one occasion will not be deemed a waiver of any other provision or such provision on any other occasion. 2. We reserve the right to change this Agreement from time to time in our sole discretion. If we make material changes to this Agreement, we will provide notice of such changes, such as by posting the revised User Terms and Conditions on our websites or in the ThreeFold Connect application. By continuing to access or use the TF Products or otherwise participate in the ThreeFold_Grid after the posted effective date of modifications to this Agreement, you agree to be bound by the revised version of this Agreement. If you do not agree to the modified Agreement, you must stop using and interacting with the TF Products. 3. The parties are independent contractors. No agency, partnership, franchise, joint venture, or employment relationship is intended or created by this Agreement. Neither party has the power or authority to create or assume any obligation, or make any representations or warranties, on behalf of the other party. 4. The User agrees that the Company may transfer and assign the Agreement in its sole discretion, provided a notice of such assignment is sent to the User within fifteen days of such assignment. 5. Notices to Company made under this Agreement shall be made by email to legal@threefold.io AND in writing and delivered by registered mail (return receipt requested) or nationally-recognized overnight courier service to ThreeFold_Dubai, United Arab Emirates, attention Legal Department. You agree to receive electronically all communications, agreements, documents, notices, and disclosures that we provide in connection with the Software and/or the ThreeFold_Grid (\"Communications\"). We may provide Communications in a variety of ways, including by e-mail, text, in-app notifications, or by posting them on our websites. You agree that all Communications that we provide to you electronically satisfy any legal requirement that such communications be in writing. 18. OPERATIONS OF THIRD-PARTY'S DIGITAL ASSET PROTOCOLS AND SERVICES 1. TF Tech NV (“TF Tech) does not provide (investment) advice regarding cryptocurrencies. You acknowledge that any information provided as part of TF Tech’s ThreeFold Connect App and/or ThreeFold Wallet (the “Platforms”) is not intended as a (personal) recommendation to buy, sell or hold (cryptocurrency) assets. All trading services offered on or through TF Tech’s Platforms are offered on the basis of \"execution only\". Your orders are executed automatically by our systems. 2. You hereby confirm to be aware of and accept the risks associated with the purchase, sale and holding of cryptocurrencies and agree not to enter into transactions that can lead to losses that you cannot bear. 3. TF Tech does not have control over the delivery, quality, legality, safety or any other aspects of any digital assets or services provided to you by third parties. 4. TF Tech assumes no responsibility for the operation of the underlying software protocols which govern the operation of the cryptocurrencies other than the ThreeFold Token (‘TFT’) which may be displayed or referred to on its ‘software’ and services, including but not limited to, its Platforms. 5. TF Tech NV does not own or control the underlying software protocols which govern the operation of third party’s digital assets supported on Platforms. Generally, the underlying protocols are controlled by third-party services. TF Tech NV assumes no responsibility for the operation of the underlying protocols and is not able to guarantee the functionality, availability, or security of network operations. In particular, the underlying protocols may be subject to sudden changes in operating rules (including “forks”). Any such material operating changes may materially affect the availability, value, functionality, and/or the name of the third party’s digital asset you store in TF Tech’s Platforms. 6. TF Tech does not control the timing and features of these material operating changes. It is your responsibility to make yourself aware of upcoming operating changes and you must carefully consider publicly available information and information that may be provided by TF Tech NV in determining whether to continue to use the ThreeFold Connect App account or “Platforms” for the affected third-party’s digital asset. In the event of any such operational change, TF Tech NV reserves the right to take such steps as may be necessary to protect the security and safety of assets held on ThreeFold’s “Platforms”, including temporarily suspending operations, and other necessary steps. TF Tech NV will use its best efforts to provide you notice of its response to any material operating change; however, such changes are outside of TF Tech’s control and may occur without notice to TF Tech NV. TF Tech NV’s response to any material operating change is subject to its sole discretion and includes deciding not to support a third-party’s digital asset fork, or other actions. 7. You acknowledge and accept the risks of operating changes to third-party’s digital asset protocols and agree that TF Tech NV is not responsible for such operating changes and not liable for any loss of value you may experience as a result of such changes in operating rules. You acknowledge and accept that TF Tech NV has sole discretion to determine its response to any operating change and that we have no responsibility to assist you with third-party’s digital assets, operational changes, unsupported currencies, or protocols. 19. TAXES 1. You shall be solely responsible for and shall pay (and shall indemnify TF Tech against any liability with respect to any failure by you to pay) all income taxes, value added taxes, goods and services taxes and any and all other taxes or sums due to national, federal, state or local governments (as the case may be) as a result of your use of the Platforms.. 2. You acknowledge that only you are responsible for the provision of information to tax authorities where such is required. Notwithstanding the above, upon request from a tax authority, TF Tech will provide information relating to you to the tax authorities. 20. EXCLUSION OF LIABILITY 1. For the avoidance of doubt and notwithstanding the generality of the liability limitations set out in the applicable terms and conditions governing your use of the Platforms and/or other software or services provided by TF Tech, no liability shall exist in any manner whatsoever for: - differences in prices resulting from delayed processing of buy- or sell orders; - cancellation of orders by reason of clearly misquoted prices; - any damage incurred relating to the ThreeFold Wallet feature; - any losses resulting from hacks, system failures and/or regulatory actions; and - any indirect loss (including consequential loss, loss of income and profit, loss of data and non-material loss). 2. Except in case of intentional misconduct by TF Tech, the liability of TF Tech in respect of the Platforms shall in all cases be limited to the amount paid by you for the Platforms during the month prior to the moment the cause of the damage occurred. 21. GOVERNING LAW AND VENUE This Agreement will be governed by Luxembourg law. Any disputes shall be subject to the jurisdiction of the courts of Luxembourg, Grand Duchy of Luxembourg. APPENDIX SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_farmer3.md",
    "title": "Terms & Conditions TFGrid Farmers TFGrid 3",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_farmer3",
    "content": "FARMER TERMS AND CONDITIONS THESE TERMS AND CONDITIONS (THE \"AGREEMENT\") CONSTITUTE A LEGAL AGREEMENT BETWEEN YOU (“FARMER,\" “YOU\", OR “YOURS”) AND OF THE THREEFOLD COMPANIES (“THREEFOLD”, “COMPANY,” “US,” “WE” OR “OUR”), GOVERNING THE TERMS OF YOUR PARTICIPATION AS A FARMER IN THE THREEFOLD GRID. YOU UNDERSTAND AND AGREE THAT BY ACCEPTING THE TERMS OF THIS AGREEMENT, EITHER BY CLICKING TO SIGNIFY ACCEPTANCE, OR BY TAKING ANY ONE OR MORE OF THE FOLLOWING ACTIONS DOWNLOADING, INSTALLING, RUNNING,/AND OR USING THE APPLICABLE SOFTWARE, YOU AGREE TO BE BOUND BY THE TERMS OF THIS AGREEMENT EFFECTIVE AS OF THE DATE THAT YOU TAKE THE EARLIEST OF ONE OF THE FOREGOING ACTIONS. YOU REPRESENT AND WARRANT THAT YOU ARE 18 YEARS OLD OR OLDER AND HAVE THE RIGHT AND AUTHORITY TO ENTER INTO AND COMPLY WITH THE TERMS OF THIS AGREEMENT. 1. DEFINITIONS Unless defined otherwise in this Agreement below, capitalized terms in this Agreement shall have the meaning ascribed to them in the following links for Definitions. SPECIAL DEFINITIONS - THREEFOLD COMPANIES noted as (“THREEFOLD”, “COMPANY,” “US,” “WE” OR “OUR”) mean any of the companies as mentioned below: - DUBAI & BVI - THREEFOLD DMCC, TF Hub Limited - THREEFOLD FZC (the original ThreeFold in UAE, no longer active) - THREEFOLD LABS IT - MAZRAA IS BRANDNAME OF THREEFOLD LABS IT - EUROPE - THREEFOLD VZW - TFTECH NV BELGIUM - BETTERTOKEN NV BELGIUM - THREEFOLD AG - TFCHAIN (\"TFCHAIN\") - ThreeFold Blockchain manages the ThreeFold Grid and the 3Nodes as an autonomous piece of software. - A DAO has been created (decentralized autonomous organization) which manages the behaviour of this Blockchain Software (upgrades & functionalities) - Is a piece of opensource software as used by all of us together. - TFChain has been introduces since TFGrid 3.x - Change Request - Change Requests can be registered on the TFChain. They are a proposal for any request for change. - Change Requests can be used to trigger change in protocol, software update, changes in software or TFGrid specifications. - Change Requests need to be approved by majority of Validators - Change Requests are being introduced from TFGrid 3.x (x to be defined) - TFChain Validators (\"VALIDATOR\") - A Validator is a piece of software running a TFChain Blockchain Function to protect the security and sovereignity of the Blockchain. - Each Validator has a vote to agree on changes in protocol, software updates, changes in software or TFGrid specifications. - Each Owner / Maintainer of a Validator has to stake a certain to be defined amount of TFT before voting can happen. - Validators are being introduced from TFGrid 3.x (x to be defined) - Majority of Validators have to vote positively on each Change Request suggested before change can happen. - Validators are required to let the DAO function. - DAO - Decentralizes Autonomous Organization - Implemented on multiple levels, but for release 3.0.x only on level 1 which is on Substrate TFChain level. - The DAO is the set of rules under which the decentralized organization functions. 2. FARMER SERVICES The Farmer may provide IT Capacity on the ThreeFold_Grid (the \"Farmer Services\") pursuant to the terms hereof during the Term of this Agreement. The Farmer Services include the features and functionality applicable to the version of the TF Operating System (Zero OS) installed by the Farmer and TF Blockchain Software (together also referred to as the “Software”). Company may update the content, functionality, and user interface of the Farmer Services from time to time in its sole discretion. By entering into this Agreement you receive a non-exclusive, non-sublicensable, non-transferable right to provide the Farmer Services pursuant to this Agreement during the Term hereof solely for your internal business purposes subject to the limitations set forth herein. The Software consists of open source code and is made available to you pursuant to the terms of the open-source license agreement(s) as located on https://github.com/threefoldtech and https://github.com/threefoldfoundation (the \"Open Source License(s)\"). Your use of the Software or any other Content (Information) is conditioned upon your compliance at all times with the terms of all applicable Open Source License(s). Example license for Zero-OS can be found here. Including without limitation all provisions governing access to source code, modification, and/or reverse engineering. You are responsible for complying with any applicable documentation, meaning any information that describes the ThreeFold_Grid, provides instructions or recommendations related to the configuration and/or use of the ThreeFold_Grid, or otherwise informs Users of the intended use of the ThreeFold_Grid, including, but not limited to content provided directly to User or published at https://library.threefold.me, https://library.threefold.me, https://forum.threefold.io or otherwise made available in conjunction with the ThreeFold_Grid, the ThreeFold_Token or the Software (“Documentation”) and for satisfying all technical requirements of the Software, including any requirements set forth in the Documentation for ensuring that the Software performs properly. 3. FARMER GRANT OF RIGHT TO IT CAPACITY By making available one or more computers, network or storage devices (\"3Nodes\") and connecting such 3Nodes to the TF Grid via the Software, you hereby grant to Company, TFChain and Users the irrevocable right to access and use the 3Nodes as follows: - to use storage, compute and network services as delivered by your 3Node(s) - to store data and materials by Users on your 3Node(s) (the \"Content\") and to access such Content from your 3Node(s) at any time in accordance with the capabilities of the software installed on the 3Nodes; 4. CERTIFIED VS. DIY-FARMERS There are two types of ThreeFold Farmers: 1. Certified Farmer: Uses hardware from certified sources and signs a contract with TF Tech NV for support and additional benefits 2. Do It Yourself (DIY) Farmer: Uses any hardware and in case of support uses online material only. Farmers can opt in for certification (\"Certification\"). Certification can be withdrawn in case the relevant 3Node does no longer comply with the applicable certification requirements. The following criteria or requirements are checked (timing of implementation, see roadmap on wiki): - Bandwidth: 24 times a day random non local nodes are used to upload a 2MB file to a 3Node. The bandwidth will be measured in mbit/sec - Utilization: Through the ThreeFold Explorer the true utilization of the 3Node will be checked. It will be displayed in % of the 3Node total capacity. - Uptime: The uptime per month will be created in the ThreeFold Explorer and is presented as a percentage of 3Node availability. ThreeFold may give free certification to 3Nodes that benefit the distribution of capacity on the ThreeFold_Grid. ThreeFold may also certify certain hardware partners (i.e. certified hardware vendors) as part of this certification process. 5. FARMER RESPONSIBILITIES At all times during the Term of this Agreement or the period when Content is maintained in your 3Node, whichever is longer: 1. You will comply with the terms of this Agreement, the Generic Disclaimer, ThreeFold Website Terms and Privacy Policy and any other terms and conditions required by in connection herewith, the Open Source Licenses, and the terms of all other agreements to which you are a party in connection with your performance under this Agreement including, without limitation, any agreement you have with a third-party Internet service provider. 2. You will operate the 3Node in strict compliance with terms of this Agreement and any applicable laws or regulations, and will not take any action not expressly authorized hereunder. 3. Without prejudice to your rights under any applicable Open Source license, you will not modify or attempt to modify the Software for any purpose including but not limited to attempting to circumvent the audit, bypass security, manipulate the performance of, or otherwise disrupt the ThreeFold_Grid for any reason, including but not limited to attempting to increase the amount of data stored or bandwidth utilized or the amount of Farmed TFTs, as defined herein, and you will not otherwise interfere with the operation of the ThreeFold_Grid. 4. You will provide and maintain the 3Node so that, at all times, it will meet the minimum requirements set out for either pre configured servers (‘certified hardware’) or ‘do-it-yourself’ servers. Read more here. 5. You will implement and maintain adequate administrative, organizational, physical and technical safeguards to ensure the protection, confidentiality, security, and integrity of the 3Node and Content and shall take all reasonable steps to ensure that Content are not disclosed, accessed, used, modified, or distributed except as expressly authorized under this Agreement. 6. You acknowledge and agree that by running the Software on your hardware device and allowing IT Capacity to be made available on the TF Grid to the Users and TFCHAIN, you may act as a cloud service provider under certain circumstances and as such qualify as a processor or sub-processor under the General Data Processing Directive (Regulation (EU) 2016/679 of the European Parliament and of the Council of 27 April 2016 on the protection of natural persons with regard to the processing of personal data and on the free movement of such data, and repealing Directive 95/46/EC) (‘GDPR’). You undertake to comply with any legal obligations which may possibly be applicable to you as a data processor under the GDPR and/or any other applicable data privacy regulations. 7. You acknowledge and agree that by running the Software on your hardware device and allowing IT Capacity to be made available on the TF Grid to the Users, your 3Node may be impacted due to additional constraints being placed on it by the Software and the processing of Content. In particular, but without limiting the generality of the foregoing, your 3Node may not operate as quickly as it would without running the Software and making IT Capacity available for use by Users. 8. In connection with your use of the Software and/or operation of a 3Node hereunder, Company may, provide updates to the software which will be automatically provided and installed. You acknowledge that these updates are done automatically on your 3node or any other web site or portal and you don't have the ability to confirm such an update. This update mechanism might be revisited at the end of 2020 and will be communicated accordingly. These updates need to be done automatically for now, because ThreeFold_Grid consists out of many components which are depending on each other and need the right version to be installed. 9. In connection with your use of the Software and/or operation of a 3Node hereunder, Company may, from time to time, require you to affirm and/or reaffirm your agreement to the terms of this Agreement, and in such case, your continued use of the Software is contingent upon your promptly providing such affirmation as requested by Company. 10. You, as the Famer, acknowledge that you retain administrative and/or physical control over to whom you grant access to the applicable 3Node. You are responsible for maintaining the physical security of the 3Node 11. Company may suspend Famer’s participation in the ThreeFold_Grid if Company believes the Farmer to be: (a) violating any term of this Agreement; or (b) using the ThreeFold_Grid in a manner that Company reasonably believes may cause a security risk, a disruption to the ThreeFold_Grid, or liability for Company or any persons involved in the ThreeFold Open Source project. 6. RESTRICTIONS You will operate the 3Node in strict accordance with the terms of this Agreement and in no other manner. Without limiting the generality of the foregoing, you will not: 1. access or use the ThreeFold_Grid: (i) in violation of applicable laws; or (ii) in a manner that interferes with or disrupts the integrity or performance of the ThreeFold_Grid (or the data contained therein). 2. with respect to Content (i) reverse engineer any aspect of the Content or do anything that might discover the contents or origin of the Content, (ii) attempt to bypass or circumvent measures employed to prevent or limit access to the Content, including by attempting to defeat any encryption, or (iii) attempt to interfere with the storage or transmission of Content or with our audits of your 3Node(s); 3. manipulate or otherwise attempt to bypass, change, or update any values related to uptime detection outside the programmatic operation of the Software; 4. deliberately or actively limit or otherwise negatively impact download speed such that insufficient bandwidth is available for required audit traffic; 5. manipulate or alter the default behavior of the ThreeFold_Grid to artificially increase or decrease the value of any reputation factor of any 3Node; 6. manipulate network responses to any request with unauthorized intent to change the cryptographic signatures, NodeID, or TFT wallet address; 7. attempt to manipulate or falsify the identification of the 3Node by the Software or otherwise bypass the proof of capacity process; 8. retain any Content after the earlier of termination of this Agreement or de-certification of the applicable 3Node at any time; or 9. in any other way attempt to interfere, impede, alter, or otherwise interact in any manner not expressly authorized hereunder with the ThreeFold_Grid or the operation of any other 3Node(s). 7. REPRESENTATIONS AND WARRANTIES You hereby represent, warrant, and covenant that: 1. You own or control your 3Node(s), and have the right to install the Software on your 3Node(s) and share IT Capacity pursuant to this Agreement, and otherwise comply with all of your obligations under this Agreement and/or applicable laws; 2. You represent and warrant that you are authorized to receive ThreeFold_Tokens (TFT) as a remuneration from Users for the usage of your IT Capacity on the ThreeFold_Grid as set forth in this Agreement; 3. You have full power and authority to enter into this Agreement and comply with all terms hereof, and that doing so will not conflict with any obligation you may owe to any third party; 4. You have the qualifications, skill, and ability to perform your obligations hereunder without the advice, control, or supervision of Company; and 5. You will at all times comply with all applicable foreign, federal, state, and local laws, orders, rules, and regulations currently in effect or that may come into effect during the term of this Agreement, including but not limited to those regarding data privacy and protection. 8. TFT Minting (Token Creation ‘FARMING of capacity’) For TFGrid 3.x 8.1 General Principle Farmers who connect 3Nodes on an ongoing basis to the ThreeFold_Grid by running the Software and making IT Capacity available to the Users, get rewarded by receiving ThreeFold tokens (TFTs) which are generated by the Software. TFTs are exclusively issued (created) by the TFChain for each active Capacity Pool which gets and remains connected to the ThreeFold_Grid. Such issuance of TFTs that results from connecting a 3Node to the ThreeFold_Grid and making IT Capacity available on a global scale to Users is called \"Farming\". 8.2 Calculation of Farmed TFTs The details of farming (minting of TFT’s) are described on our farming logic and this location serves as master for the TFT Reward Process. The wiki is version controlled (on github), so all changes can be followed.All connected IT Capacity gets registered on the TFChain, i.e. ThreeFolds blockchain software. Each month the TFChain issues new TFTs and transfers them to Farmers in respect of each 3Node that remained connected to the ThreeFold_Grid during the preceding month, using the following calculation in respect of each 3Node: The amount of TFTs that are Farmed hence depends on three variables: _1. Proof-of-Capacity_ The specs of the Farmer’s relevant 3Node: - Compute Capacity (CPU) = CRU - Memory Capacity (RAM) = MRU - Storage Capacity (SSD/HDD) = SRU/HRU _2. PRICE OF TFT = THREEFOLD TOKEN_ The Price of TFT is registered at point of connection or an averaged out period. Each farmer needs to register their TFT farming account in the TF Explorer through the TF Chain (see manual). _3. Certification_ When connecting reliable hardware the Farmer can request a certification from TF Tech NV which leads to increased earnings in TFT for such ‘Certified Farmers’. We automatically measure uptime, bandwidth and the utilization of the node for this certification. The details of this certification have to be further defined and will be set out on our wiki. The specific way how farming rewards are calculated is specified on: - Farming Reward - Proof-of-Capacity 8.3 Uptime In addition thereto, the Company will determine in its sole discretion the reasonable uptime that each 3Node of the Farmer needs to to achieve when they register their 3Node(s) in the TFChain. ThreeFold expects most 3Nodes to achieve an uptime of more than 98%, commercial providers can go as high as 99.9%. The TFChain will only issue TFTs if the IT Capacity was connected to the internet and was usable during the last month at least up to the specified uptime guarantee. 8.4 Taxes You will be solely responsible for payment of all applicable taxes (if any) associated with your Farming of ThreeFold tokens (TFTA, TFT), including but not limited to value added taxes, taxes on gross receipts and income, Social Security taxes, business license fees and other payment obligations applicable to your business. 8.5 Modification The Company reserves the right to modify the terms of this section 8 (‘_Capacity Measurement and Minting - ‘Farming’_) at any time. Such amendments will be subject to the approval of the majority of the Farmers (whereby majority is measured based on nr of 3Nodes a Farmer has, each 3Node entitles the Farmer to one vote, Farmers who do not vote have no say in the decision process) who participate in an online poll organized by the Company or the DAO. In case of modification to these terms, the Company or DAO shall inform the Farmer at least one month in advance. In case the Farmer would not agree to such modifications, the Farmer shall have the right to immediately and unilaterally terminate this Agreement by disconnecting the Farming Pool from the ThreeFold_Grid. The TFChain and TFGrid capabilities & specifications can change over time after getting consensus from the DAO . The specific requirements and workings of the DAO are or will be publised on our wikisystem: https://library.threefold.me. If the DAO (by means of X nr of members of the Community) agree on a change of the protocol used or specifications for the Software or TFGrid then the Validators can allow and execute an upgrade of the system (TFChain as well as ZERO-OS software). Farmers and Users accept changes introduced this way, they accept that any of above mentioned variables can be changed that way. 9. CAPACITY UTILIZATION (‘UTILIZATION’) FOR TFGRID 3.X 9.1 General Principles Users (such as developers or other persons requiring IT Capacity) can use IT Capacity from the ThreeFold_Grid in exchange for ThreeFold_Tokens (TFTs), which creates a natural economic demand. We call this process of using IT Capacity on the ThreeFold_Grid \"Utilization\". ThreeFold_Tokens (TFTs) are used to buy IT Capacity as delivered by the 3Nodes (by a process called Farming) on the ThreeFold_Grid. The capacity can be consulted by means of a tool called TF Explorer see http://explorer.grid.tf. 9.2 Utilization Mechanism IT capacity is expressed in network, compute & storage units. - CU = Compute Units - SU = Storage Units - NU = Network Units TF Explorer is the inventory of all IT capacity available for consumption on the ThreeFold_Grid. See http://explorer.grid.tf/ TFT received for people using capacity is disributed as follows: | Percentage | Description | Remark | | ---------- | -------------------------------------- | ------------------------------------------------------------------------ | | 35% | needs to be burned | results in more TFT burned compared to generated once grid more mature. | | 10% | to TF Foundation | used to promote the manage the project. | | 5% | to Staking Pool for TF Validators | used to reward the people who run the TFChain 3.0 blockchain validators. | | 50% | for solution providers & sales channel | managed by ThreeFold DAO. | The single source of truth for Utilization specifications is available here. 9.4 Taxes You (The Farmer) will be responsible for payment of all applicable taxes (if any) associated with your Utilization of ThreeFold_Tokens (i.e. sale of IT Capacity), including but not limited to value added taxes, sales taxes, custom taxes, and taxes on gross receipts and income. The Farmer shall seek all necessary tax advice in order to comply with any applicable tax regulations when providing IT Capacity to Users on the ThreeFold_Grid. By way of example, the Farmer acknowledges that within the European Union, as from 1 January 2015, telecommunications, broadcasting and electronically supplied services are always taxed in the country of the customer (i.e. the tax residence of the User) – regardless of whether the User is a business or a consumer. In view thereof, the Farmer will determine the applicable Farmer’s Compute Unit Price and Storage unit Price (as referred to in section 9.2 above) taking into account any aforementioned taxes that may apply. ThreeFold will not be held liable for the Farmer’s failure to comply with its legal obligations, including but not limited to its obligation to pay any applicable taxes, and the Farmer will indemnify and hold harmless the Company for claims against the Company from any tax authorities in respect of such non-compliance by the Farmer. 9.5 Modification The Company reserves the right to modify the terms of this section 9 (‘_CAPACITY UTILIZATION (‘UTILIZATION’)_) at any time. Such amendments will be subject to the approval of the TFChain Validators who protect the TFChain (Substrate based chain on Level 1) through our DAO. In case of modification to these terms, the Company or DAO shall inform the Farmers and Community at least one month in advance by means of forum or chat or other mechanism. In case the Farmer would not agree to such modifications, the Farmer shall have the right to immediately and unilaterally terminate this Agreement by disconnecting the Farming Pool from the ThreeFold_Grid. The TFChain and TFGrid capabilities & specifications can change over time after getting consensus from the DAO . The specific requirements and workings of the DAO are or will be publised on our wikisystem: https://library.threefold.me If the DAO (by means of X nr of members of the Community or Validators) agree on a change of the protocol used or specifications for the Software or TFGrid then the Validators can allow and execute an upgrade of the system (TFChain as well as ZERO-OS software). Farmers and Users accept changes introduced this way, they accept that any of above mentioned variables can be changed that way. 9.6 Breach In addition to its other rights and remedies under this Agreement, the Farmer forfeit any right to compensation under this Agreement if Farmer breaches any terms thereof. 10. TERM AND TERMINATION This Agreement shall be effective as of the date that you take the earliest of the following actions: your acceptance of this Agreement, either by clicking to signify acceptance, or by taking any one or more of the following actions: downloading, installing, running and/or using the Software. It will continue until terminated per the terms below. Either party may terminate this Agreement immediately at any time without notice to the other party. In case of termination, the Farmer shall immediately cease using the Software. Any portion of Farmed or Cultivated ThreeFold_Tokens that have not been transferred to the Farmer’s wallet on the date of termination will be irrevocably forfeited. 11. INTELLECTUAL PROPERTY No rights are granted to the Farmer hereunder other than as expressly set forth in this Agreement. Except for Software subject to the Open Source Licenses, and except for any rights expressly granted under this Agreement, Company and its licensors own and shall retain all right, title, and interest in and to the ThreeFold_Grid and all related software (including any improvements, enhancements, customizations, and modifications thereto), the Documentation, and the Related Data, including, without limitation, all related intellectual property rights therein. For purposes hereof, the term \"Related Data\" means data derived from operation of the 3Node and of the ThreeFold_Grid via the 3Node, and any data that is aggregated by Company (including aggregations with data sourced from other Farmers and other third party data sources), and data and information regarding the Farmer’s access to and participation in the ThreeFold_Grid, including, without limitation, statistical usage data derived from the operation of the 3Node and ThreeFold_Grid and configurations, log data and the performance results related thereto. For the avoidance of doubt, nothing herein shall be construed as prohibiting Company from utilizing Related Data to optimize and improve the ThreeFold_Grid or otherwise operate Company’s business; provided that if Company provides Related Data to third parties, such Related Data shall be de-identified and presented in the aggregate so that it will not disclose the identity of Farmers to any third party. The ThreeFold_Grid may include access to various confidential and proprietary third party data that is utilized along with the IT Capacity, and all such data is owned by the applicable third party source or vendor. Farmer may only use such data as part of the ThreeFold_Grid and may not extract or otherwise utilize any such data except as included in and in connection with the ThreeFold_Grid. This data may be compiled from third party sources, including but not limited to, public records, user submissions, and other commercially available data sources. These sources may not be accurate or complete, or up-to-date and is subject to ongoing and continual change without notice. Neither Company nor its third party data sources make any representations or warranties regarding the data and assume no responsibility for the accuracy, completeness, or currency of the data. Company shall have a royalty-free, worldwide, transferable, sublicensable, irrevocable, perpetual license to use or incorporate into the Software and/or the ThreeFold_Grid any suggestions, ideas, enhancement requests, feedback, recommendations or other information provided by Farmers relating to the features, functionality, or operation thereof (\"Feedback\"). Company shall have no obligation to use Feedback, and Farmer shall have no obligation to provide Feedback. 12. INDEMNIFICATION To the fullest extent permitted by applicable law, you will defend, indemnify and hold harmless Company and our respective past, present, and future employees, officers, directors, contractors, consultants, equity holders, suppliers, vendors, service providers, parent companies, subsidiaries, affiliates, agents, representatives, predecessors, successors and assigns (the \"Indemnified Parties\") from and against all claims, damages, costs and expenses (including attorneys’ fees) that arise from or relate to: (i) your use of the Software; (ii) your participation in the ThreeFold_Grid; (iii) any Feedback you provide; or (iv) your breach of this Agreement. Company reserves the right to exercise sole control over the defense of any claim subject to indemnification under the paragraph above, at your expense. This indemnity is in addition to, and not in lieu of, any other indemnities set forth in a written agreement between you and Company. If the Software becomes, or in Company’s reasonable judgment is likely to become, the subject of a claim of infringement, then Company may in its sole discretion: (a) obtain the right, for Farmer to continue using the Software; (b) provide a non-infringing functionally equivalent replacement; or (c) modify the Software so that it is no longer infringing. If Company, in its sole and reasonable judgment, determines that none of the above options are commercially reasonable, then Company may, without liability, suspend or terminate Farmer’s use of the Software. This Section 12 states Company’s sole liability and Farmer’s exclusive remedy for infringement claims. 13. DISCLAIMER AND LIMITATION OF LIABILITY The Farmer hereby acknowledges the fact that he/she has been advised that TFTs may qualify as a security and that the offers and sales of TFTs have not been registered under any country’s securities laws and, therefore, cannot be resold except in compliance with the applicable country’s laws. The Farmer understands that the use of TFTs, the Software and/or the ThreeFold_Grid involves risks, all of which the Farmer fully and completely assumes, including, but not limited to, the risk that (i) the technology associated with the ThreeFold_Grid, 3Node and/or related Threefold products will not function as intended; (ii) the Threefold project will not be completed; (iii) Threefold will fail to attract sufficient interest from key stakeholders; and (iv) ThreeFold or any related parties may be subject to investigation and punitive actions from governmental authorities. Except as explicitly set forth herein, Company makes no representations that the Software is appropriate for use in any jurisdictions. Farmers engaging with the ThreeFold_Grid from any jurisdictions do so at their own risk and are responsible for compliance with local laws. The Farmer understands and expressly accepts that the TFTs, the Software and the ThreeFold_Grid were created and delivered to the Farmer at the sole risk of the Farmer on an \"AS IS\" and “UNDER DEVELOPMENT” basis. COMPANY DISCLAIMS ALL REPRESENTATIONS AND WARRANTIES, EXPRESS AND IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. COMPANY MAKES NO WARRANTY THAT THE SOFTWARE, THREEFOLD GRID, OR DOCUMENTATION WILL BE UNINTERRUPTED, ACCURATE, COMPLETE, RELIABLE, CURRENT, ERROR-FREE, VIRUS FREE, OR FREE OF MALICIOUS CODE OR HARMFUL COMPONENTS, OR THAT DEFECTS WILL BE CORRECTED. COMPANY DOES NOT CONTROL, ENDORSE, SPONSOR, OR ADOPT ANY CONTENT AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND REGARDING THE CONTENT STORED ON THE THREEFOLD GRID. COMPANY HAS NO OBLIGATION TO SCREEN, MONITOR, OR EDIT CONTENT AND IS NOT RESPONSIBLE OR LIABLE FOR ANY CONTENT. YOU ACKNOWLEDGE AND AGREE THAT COMPANY HAS NO INDEMNITY, SUPPORT, SERVICE LEVEL, OR OTHER OBLIGATIONS HEREUNDER. The Undersigned understands and expressly acknowledges that it has not relied on any representations or warranties made by the Company, TF Tech NV, Bettertoken NV, Kristof De Spiegeleer, any person or entity involved in the development or promotion of the Software and/or the ThreeFold project, or any related parties, including, but not limited to, conversations of any kind, whether through oral or electronic communication or otherwise, or any whitepapers or other documentation. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE FARMER ASSUMES ALL RISK AND LIABILITY FOR THE RESULTS OBTAINED BY THE USE OF THE SOFTWARE, THE THREEFOLD GRID AND/OR THE THREEFOLD TOKENS AND REGARDLESS OF ANY ORAL OR WRITTEN STATEMENTS MADE BY THREEFOLD, BY WAY OF TECHNICAL ADVICE OR OTHERWISE, RELATED TO THE USE THEREOF. COMPANY SHALL NOT BE LIABLE FOR ANY INCIDENTAL, CONSEQUENTIAL, PUNITIVE, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS, REVENUE, DATA, OR DATA USE, OR DAMAGE TO BUSINESS) HOWEVER CAUSED, WHETHER BY BREACH OF WARRANTY, BREACH OF CONTRACT, IN TORT (INCLUDING NEGLIGENCE) OR ANY OTHER LEGAL OR EQUITABLE CAUSE OF ACTION EVEN PREVIOUSLY ADVISED OF SUCH DAMAGES IN ADVANCE OR IF SUCH DAMAGES WERE FORESEEABLE, AND COMPANY SHALL ONLY BE LIABLE FOR DIRECT DAMAGES CAUSED BY ITS GROSS NEGLIGENCE. IN NO EVENT WILL COMPANY’S TOTAL AGGREGATE LIABILITY ARISING FROM OR RELATING TO THIS AGREEMENT EXCEED ONE HUNDRED EURO (€ 100.00). 14. EXPORT COMPLIANCE The Software may be subject to export laws and regulations of the European Union, the United States and other jurisdictions. Farmer represents that it is not named on any E.U. or U.S. government denied-party list. Farmer shall not access or use the Software or the ThreeFold_Grid in a E.U. or U.S.-embargoed or any sanctioned country or region or in violation of any E.U. or U.S. export law or regulation. Farmer shall not use the ThreeFold_Grid to export, re-export, transfer, or make available, whether directly or indirectly, any regulated item or information to anyone outside the E.U. or U.S. in connection with this Agreement without first complying with all export control laws and regulations that may be imposed by the European Union, any EU country or the U.S. Government and any country or organization of nations within whose jurisdiction Farmer operates or does business. 15. ENTIRE AGREEMENT,SEVERABILITY, WAIVER 1. This Agreement sets forth the complete and final agreement of the parties concerning the subject matter hereof, and supersedes, replaces all prior agreements, written and oral, between them concerning the subject matter hereof. If a term of this Agreement to be invalid or unenforceable, the remaining provisions will continue in full force and effect. A party’s consent to, or waiver of, enforcement of this Agreement on one occasion will not be deemed a waiver of any other provision or such provision on any other occasion. 2. We reserve the right to change this Agreement from time to time in our sole discretion. If we make material changes to this Agreement, we will provide notice of such changes, such as by posting the revised Farmer Terms and Conditions to the Software and on our Websites. By continuing to access or use the Software or otherwise participate in the ThreeFold_Grid after the posted effective date of modifications to this Agreement, you agree to be bound by the revised version of this Agreement. If you do not agree to the modified Agreement, you must stop interacting with the ThreeFold_Grid and disconnect all your 3Node. 3. The parties are independent contractors. No agency, partnership, franchise, joint venture, or employment relationship is intended or created by this Agreement. Neither party has the power or authority to create or assume any obligation, or make any representations or warranties, on behalf of the other party. 4. The Farmer agrees that the Company may transfer and assign the Agreement in its sole discretion, provided a notice of such assignment is sent to the Farmer within fifteen days of such assignment. 5. Notices to Company made under this Agreement shall be made by email to legal@threefold.io AND in writing and delivered by registered mail (return receipt requested) or nationally-recognized overnight courier service to ThreeFold_Dubai, with registered office at BA1120 DMCC BUSINESS CENTRE, LEVEL NO 1, JEWELLERY & GEMPLEX 3, DUBAI, UNITED EMIRATES ARAB, attention Legal Department. You agree to receive electronically all communications, agreements, documents, notices, and disclosures that we provide in connection with the Software and/or the ThreeFold_Grid (\"Communications\"). We may provide Communications in a variety of ways, including by e-mail, text, in-app notifications, or by posting them on our websites. You agree that all Communications that we provide to you electronically satisfy any legal requirement that such communications be in writing. 16. GOVERNING LAW AND VENUE This Agreement will be governed by Luxembourg law. Any disputes shall be subject to the jurisdiction of the courts of Luxembourg, Grand Duchy of Luxembourg. APPENDIX SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_griduser/tfta_to_tft.md",
    "title": "TFTA to TFT",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_griduser/tfta_to_tft",
    "content": "Convert TFTA to TFT TFTA is a voluntary staking pool for people to show that they have no intent to sell in near time. If you would like migrate TFTA to TFT, it's super easy, just send your TFTA to the following address: > GBUT4GP5GJ6B3XW5PXENHQA7TXJI5GOPW3NF4W3ZIW6OOO4ISY6WNLN2 and it will return as TFT. We suggest that you try with 1 TFT first!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_griduser/terms_conditions_griduser.md",
    "title": "Terms & Conditions TFGrid Users TFGrid 3",
    "url": "/labs/knowledge_base/terms_conditions_all3/terms_conditions_toc/terms_conditions_griduser",
    "content": "USER TERMS AND CONDITIONS These Terms and Conditions (the \"Agreement\") constitute a legal agreement between you (“user,\" “you\", or “yours”) and THREEFOLD RELATED COMPANIES (“Threefold”, “Company,” “us,” “we” or “our”) , governing your usage of the ThreeFold software and related products (the “TF Products”), including but not limited to: - The ThreeFold software and technologies (the \"Software\"), including: - \"Zero OS\", a stateless operating system which enables distributed hardware to form the ThreeFold_Grid which generates IT Capacity (storage and compute capacity) - \"Zero Chain\", the blockchain framework - and any other related software components which are referenced in github under https://github.com/threefoldtech and https://github.com/threefoldfoundation - Threefold applications (including the ThreeFold Connect app) - ThreeFold Tokens (TFTs) - The TFGrid and any related products. The terms of your interaction with the websites, social networks or online communication channels maintained by the Company (including but not limited to the posting or publishing of content, information or promotional materials) shall be governed by the ‘Terms of Service’ referred to on www.threefold.io, which are incorporated herein by reference. The IT Capacity services provided by Farmers on the ThreeFold_Grid are governed by the present Agreement, but may be supplemented by additional terms agreed between the relevant Farmer and the User governing their delivery, access and use of the IT Capacity through the ThreeFold_Grid. This supplementation shall not extend the liability of ThreeFold. You understand and agree that by accepting the terms of this Agreement, either by clicking to signify acceptance, or by taking any one or more of the following actions downloading, installing, running,/and or using the applicable TF Products, you agree to be bound by the terms of this Agreement effective as of the date that you take the earliest of one of the foregoing actions. You represent and warrant that you are 18 years old or older and have the right and authority to enter into and comply with the terms of this Agreement. 1. DEFINITIONS Unless defined otherwise in this Agreement below, capitalized terms in this Agreement shall have the meaning ascribed to them in the following links for Definitions. SPECIAL DEFINITIONS - THREEFOLD COMPANIES noted as (“THREEFOLD”, “COMPANY,” “US,” “WE” OR “OUR”) mean any of the companies as mentioned below: - DUBAI & BVI - THREEFOLD DMCC, TF Hub Limited - THREEFOLD FZC (the original ThreeFold in UAE, no longer active) - THREEFOLD LABS IT - MAZRAA IS BRANDNAME OF THREEFOLD LABS IT - EUROPE - THREEFOLD VZW - TFTECH NV BELGIUM - BETTERTOKEN NV BELGIUM - THREEFOLD AG - TFCHAIN (\"TFCHAIN\") - ThreeFold Blockchain manages the ThreeFold Grid and the 3Nodes as an autonomous piece of software. - A DAO has been created (decentralized autonomous organization) which manages the behaviour of this Blockchain Software (upgrades & functionalities) - Is a piece of opensource software as used by all of us together. - TFChain has been introduces since TFGrid 3.x - Change Request - Change Requests can be registered on the TFChain. They are a proposal for any request for change. - Change Requests can be used to trigger change in protocol, software update, changes in software or TFGrid specifications. - Change Requests need to be approved by majority of Validators - Change Requests are being introduced from TFGrid 3.x (x to be defined) - TFChain Validators (\"VALIDATOR\") - A Validator is a piece of software running a TFChain Blockchain Function to protect the security and sovereignity of the Blockchain. - Each Validator has a vote to agree on changes in protocol, software updates, changes in software or TFGrid specifications. - Each Owner / Maintainer of a Validator has to stake a certain to be defined amount of TFT before voting can happen. - Validators are being introduced from TFGrid 3.x (x to be defined) - Majority of Validators have to vote positively on each Change Request suggested before change can happen. - Validators are required to let the DAO function. - DAO - Decentralizes Autonomous Organization - Implemented on multiple levels, but for release 3.0.x only on level 1 which is on Substrate TFChain level. - The DAO is the set of rules under which the decentralized organization functions. 2. USE OF TF PRODUCTS By entering into this Agreement you receive a non-exclusive, non-sublicenseable, non-transferable right to use the TF Products pursuant to this Agreement during the Term hereof solely for your internal business purposes subject to the limitations set forth herein. You acknowledge that the Software consists of open source code which is made available to you pursuant to the terms of the relevant open-source license agreement(s) as specified in github under https://github.com/threefoldtech and https://github.com/threefoldfoundation (the \"Open Source License(s)\"). Your use of the Software and the TF Products is conditioned upon your compliance at all times with the terms of all applicable Open Source License(s), including without limitation all provisions governing access to source code, modification, and/or reverse engineering. You are responsible for complying with any applicable documentation, meaning any information that describes the TF Products, provides instructions or recommendations related to the configuration and/or use of the TF Products, or otherwise informs Users of their intended use, including, but not limited to content provided directly to User or published at or otherwise made available in conjunction with the ThreeFold_Grid, the ThreeFold_Token or the Software (“Documentation”) and for satisfying all technical requirements of the TF Products, including any requirements set forth in the Documentation for ensuring that the TF Products perform properly. 3. FARMER GRANT OF RIGHT TO FARMING POOL By making available one or more computers, network or storage devices (\"3Nodes\") and connecting such 3Nodes to the TF Grid (as part of a Farming Pool) via the Software, you hereby grant to Company and Users the irrevocable right to access and use the 3Nodes as follows: - to use storage, compute and network services as delivered by your 3Node(s) - to store data and materials by Users on your 3Node(s) (the \"Content\") and to access such Content from your 3Node(s) at any time in accordance with the capabilities of the software installed on the 3Nodes; 4. REGISTRATION TO THE THREEFOLD CONNECT (FORMERLY 3BOT CONNECT) APPLICATION In order to access certain TF Products you will be required to install the ThreeFold Connect application on your device and register your account in this ThreeFold Connect application by creating a username and password. You agree to provide us with accurate, complete, and current registration information about yourself. It is your responsibility to ensure that your password remains confidential and secure. By registering, you agree that you are fully responsible for all activities that occur under your user name and password. We may assume that any communications we receive under your account have been made by you. If you are a billing owner, an administrator, or if you have confirmed in writing that you have the authority to make decisions on behalf of a User (\"3Bot Administrator\"), you represent and warrant that you are authorized to make decisions on behalf of the User and agree that ThreeFold is entitled to rely on your instructions. You are responsible for notifying us at legal@threefold.io if you become aware of any unauthorized use of or access to your 3Bot account. You understand and agree that we may require you to provide information that may be used to confirm your identity and help ensure the security of your account. ThreeFold will not be liable for any loss, damages, liability, expenses or attorneys’ fees that you may incur as a result of someone else using your password or account, either with or without your knowledge and/or authorization, and regardless of whether you have or have not advised us of such unauthorized use. You will be liable for losses, damages, liability, expenses and attorneys’ fees incurred by ThreeFold or a third party due to someone else using your account. In the event that the 3Bot Administrator or User loses access to an account or otherwise requests information about an account, ThreeFold reserves the right to request from the 3Bot Administrator or User any verification it deems necessary before restoring access to or providing information about such account in its sole discretion. 5. USE OF THREEFOLD TOKENS ThreeFold_Tokens (TFTs) are a digital token used to buy autonomous and decentralized IT Capacity (compute, storage, network, IT services, applications) on the ThreeFold_Grid. TFTs have a specific commercial utility, since ThreeFold_Tokens were conceived as the designated currency for buying and selling IT Capacity on the ThreeFold_Grid. TFTs are exclusively generated through a process called Farming, which means that TFTs are created only when new IT Capacity is added to the ThreeFold_Grid. TFTs are registered on a blockchain which is part of the Stellar Network (https://stellar.org), Binance Smart Chain, a Cosmos Chain or our own TFChain. The first batch of TFTs that got registered in the blockchain consists of the ‘Genesis Block’ of 685 million TFTs that were Farmed by or on behalf of the Company using an initial Farming Pool, also known as the Genesis Pool. Two versions of ThreeFold_Tokens have been issued: - A first version of the ThreeFold_Token was issued as from March 2018 on ThreeFolds initial blockchain called Rivine. These TFTs are also referred to as \"TFTv1\" or “TFTA”. These tokens have now been migrated to the Stellar blockchain. - A second version of the ThreeFold_Token was issued as from May 2020 on the Stellar blockchain. These TFTs are also referred to as \"TFTv2\". This token is available on multiple blockchains, the total amount of tokens farmed is the same independent of blockchain used, TFBridges are used to migrate TFTs between blockchain technology. While the original TFTv1 kept all same properties and benefits, they are now called TFTA on the Stellar blockchain. Since the creation of the TFTv2, TFTA’s have become ThreeFolds voluntary staking pool of Tokens, which means these TFTs can only be used to buy IT Capacity and cannot be traded otherwise. However any User can convert TFTA’s into TFTs (i.e. TFTv2) by implementing a few simple migration steps which can be found here. Once converted, any TFT’s can be traded or transferred by various means as the User deems fit, as further explain here. The TF Foundation has chosen to use multiple blockchain technology for storing and managing the TFT. You can use any wallet that supports the chosen blockchain, including but not limited to the wallet included in the ThreeFold Connect app. Your use of the TF Products and/or TFTs constitutes your acknowledgement of the aforementioned general principles relating to the ThreeFold_Tokens. As a User you furthermore acknowledge that: - each TFT constitutes a value of exchange on the ThreeFold_Grid; - you have been advised that the ThreeFold_Tokens are the result of farming which means a Farmer connects IT Capacity to the ThreeFold_Grid; - as such the TFTs have not been registered under any country’s securities laws; - TFTs are neither securities nor an investment instrument; and - the purchase, creation or use of TFTs involve risks, all of which the User fully and completely assumes by entering into this Agreement. 6. MODIFICATIONS TO THE TF PRODUCTS We reserve the right, in our sole discretion, to modify or discontinue, temporarily or permanently, any TF Products (or any features or functionality thereof) at any time without notice and without obligation or liability to you. You agree that ThreeFold shall not be liable to you or any third party for any modification, suspension, or discontinuance of the TF Products or related services. 7. USER RESPONSIBILITIES At all times during the Term of this Agreement or the period when you use any TF Products, your Content is maintained in a 3Node or TFTs are maintained in a wallet address of which you hold the private keys, whichever is longer: 1. You will comply with the terms of this Agreement and the Privacy Policy and any other terms and conditions required by in connection herewith, the Open Source Licenses, and the terms of all other agreements to which you are a party in connection with your performance under this Agreement including, without limitation, any agreement you have with a third-party service provider. 2. You will use and operate the TF Products in strict compliance with terms of this Agreement and any applicable laws or regulations, and you will not take any action not expressly authorized hereunder. 3. Without prejudice to your rights under any applicable Open Source license, you will not modify or attempt to modify the TF Products for any purpose including but not limited to attempting to circumvent the audit, bypass security, manipulate the performance of, or otherwise disrupt the TF Products for any reason, including but not limited to attempting to increase the amount of data stored or bandwidth utilized, as defined herein, and you will not otherwise interfere with the operation of the ThreeFold_Grid. 4. You acknowledge and agree that the Company has no practical access to your data or knowledge of the nature of the data stored on your 3Bot or the 3Nodes (including but not limited to Content) and that it does not retain any Content or other data that you process using the ThreeFold_Grid. The Company has no control in the management of such Content or data, nor any influence in the specific processing procedures. The Company will never pursue changes to TF Products that could make User data accessible to Company or third parties. We are a neutral intermediary and do not act on behalf of a Farmer, User or any other party to process Content or User data and thus you acknowledge and agree that we should not be qualified as data processors or sub-processor under the General Data Processing Directive (Regulation (EU) 2016/679 of the European Parliament and of the Council of 27 April 2016 on the protection of natural persons with regard to the processing of personal data and on the free movement of such data, and repealing Directive 95/46/EC) (‘GDPR’). 5. Company may suspend User’s use of the TF Products if Company believes the User to be: (a) violating any term of this Agreement; or (b) using the TF Products in a manner that Company reasonably believes may cause a security risk, a disruption to the TF Products (including the ThreeFold_Grid), or liability for Company or any persons involved in the ThreeFold Open Source project. 8. USAGE RESTRICTIONS (ACCEPTABLE USE) You will use the TF Products in strict accordance with the terms of this Agreement and in no other manner. Without limiting the generality of the foregoing, you will not: 1. access or use the TF Products: (i) in violation of applicable laws; (ii) to send or store material knowingly or intentionally containing software viruses, worms, Trojan horses or other harmful computer code, files, or scripts; (iii) in a manner that interferes with or disrupts the integrity or performance of the ThreeFold_Grid (or the data contained therein); or (iv) in any manner that could interfere with, disrupt, negatively affect or inhibit other Users from fully enjoying their use of the TF Products or that could damage, disable, overburden or impair the functioning of the TF Products in any manner. 2. delete or otherwise render Content unavailable for recovery independent of the programmatic functionality of the relevant software; 3. violate, infringe or misappropriate any intellectual property or other third-party right or commit a tort; 4. modify, copy (other than standard page caching), publicly perform, publicly display, sell, rent, lease, timeshare or otherwise distribute the TF Products, in whole or in part. This restriction does not apply to open source software we release, which you can use subject to the applicable open source software license terms; 5. attempt to bypass or circumvent measures employed to prevent or limit access to any content, area or functionality on the TF Products, without providing prior notice to Company of the method used to bypass or circumvent; 6. in any other way attempt to interfere, impede, alter, or otherwise interact with the TF Products in any manner not expressly authorized hereunder; 7. use any of the TF Products other than for its intended purposes; or 8. use the TF Products to engage in or promote any activity that violates these User Terms and Conditions. 9. CONTENT RESTRICTIONS The IT Capacity that is made available on the ThreeFold_Grid can be used by any Users to create, post, upload, share or store Content, such as text, graphics, photos, videos, sound, data or other information and materials submitted or provided by Users. We have no access to, nor do we control, own, or endorse any Content that you transmit, store or process via the ThreeFold_Grid or any other TF Products. You are solely responsible for any Content stored using the ThreeFold_Grid or any TF Products, and for any data that you have entered using the ThreeFold Connect application. You hereby represent and warrant that (1) you own all intellectual property rights (or have obtained all necessary permissions) to provide your Content and other data; (2) such Content and other data will not violate any agreements or confidentiality obligations; and (3) such Content and data will not violate, infringe or misappropriate any intellectual property right or other proprietary rights of any person or third party. You will not create, post, share or store Content or other data that: 1. is unlawful, libelous, defamatory, harassing, threatening, invasive of privacy or publicity rights, abusive, inflammatory, fraudulent or otherwise objectionable; 2. would constitute, encourage or provide instructions for a criminal offense, violate the rights of any party, otherwise create liability or violate any local, state, national or international law; 3. intentionally misleads by containing or depicting any statements, remarks or claims that do not reflect your honest views and experiences; 4. impersonates, or misrepresents your affiliation with, any person or entity (including Company); 5. references or depicts Company, our TF Products or any related services but fails to disclose any material connection to us that may exist; 6. contains any unsolicited promotions, political campaigning, advertising or solicitations; 7. contains any viruses, corrupted data or other harmful, disruptive or destructive files or content; or 8. in our sole judgment, is objectionable or that restricts or inhibits any other person from using or enjoying the TF Products, or that may expose Company or others to any harm or liability of any type; 10. REPRESENTATIONS AND WARRANTIES You hereby represent, warrant, and covenant that: 1. You have full legal capacity, power and authority to execute and deliver this Agreement and to perform its obligations hereunder. This Agreement constitutes valid and binding obligations of the User, enforceable in accordance with its terms. 2. You are NOT a target person or entity under any restrictive measures in the framework of the EU Common Foreign and Security Policy and you are NOT named on any E.U. or U.S. government denied-party list. 3. You are, and have at all times been, in compliance in all material respects with each legal requirement that is are applicable to you, or the ownership of your assets, relating to money laundering (including but not limited to applicable anti-money laundering regulations). 4. You have been advised and acknowledge that the ThreeFold_Tokens or TFTs are NOT issued by any company or organization and are only registered in the TF BlockChain as an automatic action when a Farmer connects IT Capacity to the ThreeFold_Grid, as such they have not been registered under any country’s securities laws. 5. You understand that the TFTs involve risks, all of which you fully and completely assume. You understand and expressly accept that the TFTs will be created and delivered to you at your sole risk on an \"AS IS\" basis. You understand and expressly accept that you have not relied on any representations or warranties made by the Company outside this Agreement, including, but not limited to, conversations of any kind, whether through oral or electronic communication, or any white paper. Without limiting the generality of the foregoing, you assume all risk and liability for the results obtained by any use of TFTs and regardless of any oral or written statements made by or on behalf of the Company, by way of technical advice or otherwise, related to the use of the TFTs. 6. You have such knowledge and experience in technology, financial and business matters that you are capable of evaluating the merits and risks of such purchase of TFTs and corresponding IT Capacity and are able to bear the economic risk of such acquisition for an indefinite period of time. 7. You are executing this Agreement for your own account, not as a nominee or agent. 8. You understand that you have no right against the Company or any other person related to the ThreeFold project except in the event of the Company’s breach of this agreement or intentional fraud. 9. You understand that you bear sole responsibility for any taxes as a result of the matters and transactions the subject of this Agreement, and any future acquisition, ownership, use, sale or other disposition of TFTs. To the extent permitted by law, you agree to indemnify, defend and hold the Company or any of its affiliates, employees or agents (including developers, auditors, contractors or founders) harmless for any claim, liability, assessment or penalty with respect to any taxes (other than any net income taxes of the Company) associated with or arising from your acquisition, use or ownership of TFTs hereunder. 11. TERM AND TERMINATION This Agreement shall be effective as of the date that you take the earliest of the following actions: your acceptance of this Agreement, either by clicking to signify acceptance, or by taking any one or more of the following actions: downloading, installing, running and/or using any TF Product. It will continue until terminated per the terms below. Either party may terminate this Agreement immediately at any time without notice to the other party. In case of termination, the User shall immediately cease using the TF Products. 12. FEEDBACK Company shall have a royalty-free, worldwide, transferable, sublicensable, irrevocable, perpetual license to use or incorporate into the TF Products any suggestions, ideas, enhancement requests, feedback, recommendations or other information provided by Users relating to the features, functionality, or operation thereof (\"Feedback\"). Company shall have no obligation to use Feedback, and User shall have no obligation to provide Feedback. 13. INDEMNIFICATION To the fullest extent permitted by applicable law, you will defend, indemnify and hold harmless Company and our respective past, present, and future employees, officers, directors, contractors, consultants, equity holders, suppliers, vendors, service providers, parent companies, subsidiaries, affiliates, agents, representatives, predecessors, successors and assigns (the \"Indemnified Parties\") from and against all claims, damages, costs and expenses (including attorneys’ fees) that arise from or relate to: (i) your use of the TF Products; (ii) any Feedback you provide; or (iii) your breach of this Agreement. Company reserves the right to exercise sole control over the defense of any claim subject to indemnification under the paragraph above, at your expense. This indemnity is in addition to, and not in lieu of, any other indemnities set forth in a written agreement between you and Company. If any TF Product becomes, or in Company’s reasonable judgment is likely to become, the subject of a claim of infringement, then Company may in its sole discretion: (a) obtain the right, for User to continue using such TF Product; (b) provide a non-infringing functionally equivalent replacement; or (c) modify such TF Product so that it is no longer infringing. If Company, in its sole and reasonable judgment, determines that none of the above options are commercially reasonable, then Company may, without liability, suspend or terminate User’s use of the relevant TF Product. This Section 12 states Company’s sole liability and User’s exclusive remedy for infringement claims. 14. DISCLAIMER AND LIMITATION OF LIABILITY The User hereby acknowledges the fact that he/she has been advised that TFTs may qualify as a security and that the offers and sales of TFTs have not been registered under any country’s securities laws and, therefore, cannot be resold except in compliance with the applicable country’s laws. The User understands that the use of TFTs, the other TF Products and/or the ThreeFold_Grid involves risks, all of which the User fully and completely assumes, including, but not limited to, the risk that (i) the technology associated with the ThreeFold_Grid, 3Nodes, 3Bot and/or related TF Products will not function as intended; (ii) the Threefold project will not be completed; (iii) Threefold will fail to attract sufficient interest from key stakeholders; and (iv) ThreeFold or any related parties may be subject to investigation and punitive actions from governmental authorities. Except as explicitly set forth herein, Company makes no representations that the TF Products are appropriate for use in any jurisdictions. Users engaging with the TF Products from any jurisdictions do so at their own risk and are responsible for compliance with local laws. The User understands and expressly accepts that the TFTs, ThreeFold Connect App, the ThreeFold_Grid and other TF Products were created and made available to the User at its sole risk on an \"AS IS\" and “UNDER DEVELOPMENT” basis. COMPANY DISCLAIMS ALL REPRESENTATIONS AND WARRANTIES, EXPRESS AND IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. COMPANY MAKES NO WARRANTY THAT THE TF PRODUCTS OR DOCUMENTATION WILL BE UNINTERRUPTED, ACCURATE, COMPLETE, RELIABLE, CURRENT, ERROR-FREE, VIRUS FREE, OR FREE OF MALICIOUS CODE OR HARMFUL COMPONENTS, OR THAT DEFECTS WILL BE CORRECTED. COMPANY DOES NOT CONTROL, ENDORSE, SPONSOR, OR ADOPT ANY CONTENT AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND REGARDING THE CONTENT STORED ON THE THREEFOLD GRID. COMPANY HAS NO OBLIGATION TO SCREEN, MONITOR, OR EDIT CONTENT AND IS NOT RESPONSIBLE OR LIABLE FOR ANY CONTENT. YOU ACKNOWLEDGE AND AGREE THAT COMPANY HAS NO INDEMNITY, SUPPORT, SERVICE LEVEL, OR OTHER OBLIGATIONS HEREUNDER. User understands and expressly acknowledges that it has not relied on any representations or warranties made by the Company, TF Tech NV, Bettertoken NV, Kristof De Spiegeleer, any person or entity involved in the development or promotion of the TF Products and/or the ThreeFold project, or any related parties, including, but not limited to, conversations of any kind, whether through oral or electronic communication or otherwise, or any whitepapers or other documentation. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE USER ASSUMES ALL RISK AND LIABILITY FOR THE RESULTS OBTAINED BY THE USE OF THE TF PRODUCTS (INCLUDING THE THREEFOLD TOKENS) AND REGARDLESS OF ANY ORAL OR WRITTEN STATEMENTS MADE BY THREEFOLD, BY WAY OF TECHNICAL ADVICE OR OTHERWISE, RELATED TO THE USE THEREOF. COMPANY SHALL NOT BE LIABLE FOR ANY INCIDENTAL, CONSEQUENTIAL, PUNITIVE, SPECIAL, INDIRECT, OR EXEMPLARY DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS, REVENUE, DATA, OR DATA USE, OR DAMAGE TO BUSINESS) HOWEVER CAUSED, WHETHER BY BREACH OF WARRANTY, BREACH OF CONTRACT, IN TORT (INCLUDING NEGLIGENCE) OR ANY OTHER LEGAL OR EQUITABLE CAUSE OF ACTION EVEN PREVIOUSLY ADVISED OF SUCH DAMAGES IN ADVANCE OR IF SUCH DAMAGES WERE FORESEEABLE, AND COMPANY SHALL ONLY BE LIABLE FOR DIRECT DAMAGES CAUSED BY ITS GROSS NEGLIGENCE. IN NO EVENT WILL COMPANY’S TOTAL AGGREGATE LIABILITY ARISING FROM OR RELATING TO THIS AGREEMENT EXCEED ONE HUNDRED EURO (€ 100.00). 15. RELEASE To the fullest extent permitted by applicable law, you hereby explicitly release (1) the TF Foundation (ThreeFold_Dubai), (2) each individual or entity acting as a Farmer, (3) TF Tech NV, (4) any of the companies or individuals related to these entities, and (5) any person contributing or otherwise assisting in developing, marketing or distributing the TF Products (hereinafter collectively referred to as \"ThreeFold Relatives\") from responsibility, liability, claims, demands and/or damages (actual and consequential) of every kind and nature, known and unknown (including, but not limited to, claims of negligence), arising out of or related to: - the acts or omissions of third parties; and - your purchase of TFTs (if any) from ThreeFold Relatives, regardless of the names or former names under which such TFTs may have been identified in the relevant contracts (e.g. ‘Internal ThreeFold_Tokens’, ‘iTFTs’, TFTs, etc.). If and to the extend you have purchased or otherwise acquired TFTs from ThreeFold Relatives that were identified in the relevant contracts as ‘Internal ThreeFold_Tokens’ or ‘iTFTs’, your use of the TF Products (including your subsequent receipt or acceptance of TFTs) implies your confirmation that such purchase or acquisition has been duly completed as a result of your receipt of a corresponding amount of TFTs, and that all deliverables under the relevant contracts (known as ‘iTFT Purchase Agreement’, ‘TFT Purchase Agreement’ or ‘ITO investment agreement’) have been duly delivered and that there are no further obligations from any ThreeFold Relatives to you in relation to such contracts. 16. EXPORT COMPLIANCE The TF Products may be subject to export laws and regulations of the European Union, the United States and other jurisdictions. The User represents that it is not named on any E.U. or U.S. government denied-party list. The User shall not access or use the TF Products in a E.U. or U.S.-embargoed or any sanctioned country or region or in violation of any E.U. or U.S. export law or regulation. User shall not use the TF Products to export, re-export, transfer, or make available, whether directly or indirectly, any regulated item or information to anyone outside the E.U. or U.S. in connection with this Agreement without first complying with all export control laws and regulations that may be imposed by the European Union, any EU country or the U.S. Government and any country or organization of nations within whose jurisdiction the User operates or does business. 17. ENTIRE AGREEMENT,SEVERABILITY, WAIVER 1. This Agreement sets forth the complete and final agreement of the parties concerning the subject matter hereof, and supersedes, replaces all prior agreements, written and oral, between them concerning the subject matter hereof. If a term of this Agreement to be invalid or unenforceable, the remaining provisions will continue in full force and effect. A party’s consent to, or waiver of, enforcement of this Agreement on one occasion will not be deemed a waiver of any other provision or such provision on any other occasion. 2. We reserve the right to change this Agreement from time to time in our sole discretion. If we make material changes to this Agreement, we will provide notice of such changes, such as by posting the revised User Terms and Conditions on our websites or in the ThreeFold Connect application. By continuing to access or use the TF Products or otherwise participate in the ThreeFold_Grid after the posted effective date of modifications to this Agreement, you agree to be bound by the revised version of this Agreement. If you do not agree to the modified Agreement, you must stop using and interacting with the TF Products. 3. The parties are independent contractors. No agency, partnership, franchise, joint venture, or employment relationship is intended or created by this Agreement. Neither party has the power or authority to create or assume any obligation, or make any representations or warranties, on behalf of the other party. 4. The User agrees that the Company may transfer and assign the Agreement in its sole discretion, provided a notice of such assignment is sent to the User within fifteen days of such assignment. 5. Notices to Company made under this Agreement shall be made by email to legal@threefold.io AND in writing and delivered by registered mail (return receipt requested) or nationally-recognized overnight courier service to ThreeFold_Dubai, United Arab Emirates, attention Legal Department. You agree to receive electronically all communications, agreements, documents, notices, and disclosures that we provide in connection with the Software and/or the ThreeFold_Grid (\"Communications\"). We may provide Communications in a variety of ways, including by e-mail, text, in-app notifications, or by posting them on our websites. You agree that all Communications that we provide to you electronically satisfy any legal requirement that such communications be in writing. 18. OPERATIONS OF THIRD-PARTY'S DIGITAL ASSET PROTOCOLS AND SERVICES 1. TF Tech NV (“TF Tech) does not provide (investment) advice regarding cryptocurrencies. You acknowledge that any information provided as part of TF Tech’s ThreeFold Connect App and/or ThreeFold Wallet (the “Platforms”) is not intended as a (personal) recommendation to buy, sell or hold (cryptocurrency) assets. All trading services offered on or through TF Tech’s Platforms are offered on the basis of \"execution only\". Your orders are executed automatically by our systems. 2. You hereby confirm to be aware of and accept the risks associated with the purchase, sale and holding of cryptocurrencies and agree not to enter into transactions that can lead to losses that you cannot bear. 3. TF Tech does not have control over the delivery, quality, legality, safety or any other aspects of any digital assets or services provided to you by third parties. 4. TF Tech assumes no responsibility for the operation of the underlying software protocols which govern the operation of the cryptocurrencies other than the ThreeFold Token (‘TFT’) which may be displayed or referred to on its ‘software’ and services, including but not limited to, its Platforms. 5. TF Tech NV does not own or control the underlying software protocols which govern the operation of third party’s digital assets supported on Platforms. Generally, the underlying protocols are controlled by third-party services. TF Tech NV assumes no responsibility for the operation of the underlying protocols and is not able to guarantee the functionality, availability, or security of network operations. In particular, the underlying protocols may be subject to sudden changes in operating rules (including “forks”). Any such material operating changes may materially affect the availability, value, functionality, and/or the name of the third party’s digital asset you store in TF Tech’s Platforms. 6. TF Tech does not control the timing and features of these material operating changes. It is your responsibility to make yourself aware of upcoming operating changes and you must carefully consider publicly available information and information that may be provided by TF Tech NV in determining whether to continue to use the ThreeFold Connect App account or “Platforms” for the affected third-party’s digital asset. In the event of any such operational change, TF Tech NV reserves the right to take such steps as may be necessary to protect the security and safety of assets held on ThreeFold’s “Platforms”, including temporarily suspending operations, and other necessary steps. TF Tech NV will use its best efforts to provide you notice of its response to any material operating change; however, such changes are outside of TF Tech’s control and may occur without notice to TF Tech NV. TF Tech NV’s response to any material operating change is subject to its sole discretion and includes deciding not to support a third-party’s digital asset fork, or other actions. 7. You acknowledge and accept the risks of operating changes to third-party’s digital asset protocols and agree that TF Tech NV is not responsible for such operating changes and not liable for any loss of value you may experience as a result of such changes in operating rules. You acknowledge and accept that TF Tech NV has sole discretion to determine its response to any operating change and that we have no responsibility to assist you with third-party’s digital assets, operational changes, unsupported currencies, or protocols. 19. TAXES 1. You shall be solely responsible for and shall pay (and shall indemnify TF Tech against any liability with respect to any failure by you to pay) all income taxes, value added taxes, goods and services taxes and any and all other taxes or sums due to national, federal, state or local governments (as the case may be) as a result of your use of the Platforms.. 2. You acknowledge that only you are responsible for the provision of information to tax authorities where such is required. Notwithstanding the above, upon request from a tax authority, TF Tech will provide information relating to you to the tax authorities. 20. EXCLUSION OF LIABILITY 1. For the avoidance of doubt and notwithstanding the generality of the liability limitations set out in the applicable terms and conditions governing your use of the Platforms and/or other software or services provided by TF Tech, no liability shall exist in any manner whatsoever for: - differences in prices resulting from delayed processing of buy- or sell orders; - cancellation of orders by reason of clearly misquoted prices; - any damage incurred relating to the ThreeFold Wallet feature; - any losses resulting from hacks, system failures and/or regulatory actions; and - any indirect loss (including consequential loss, loss of income and profit, loss of data and non-material loss). 2. Except in case of intentional misconduct by TF Tech, the liability of TF Tech in respect of the Platforms shall in all cases be limited to the amount paid by you for the Platforms during the month prior to the moment the cause of the damage occurred. 21. GOVERNING LAW AND VENUE This Agreement will be governed by Luxembourg law. Any disputes shall be subject to the jurisdiction of the courts of Luxembourg, Grand Duchy of Luxembourg. APPENDIX SINGLE SOURCE OF TRUTH Our single source of truth for our legal docs is stored on Github: https://github.com/threefoldfoundation/info_legal/tree/master/ > You can see the history of each file on github, useful to see the right version of the file in relation to the date when you signed a document or contract which linked into one of the above documents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/technology_toc.md",
    "title": "Technology",
    "url": "/labs/knowledge_base/technology_toc",
    "content": "This section covers the technology behind the ThreeFold Grid. ThreeFold has created an amazing technology system to allow anyone to host their applications and data close to them. To build on the ThreeFold Grid, refer to the Developers section. TABLE OF CONTENTS - How It Works - Grid Concepts - Primitives - Quantum Safe Storage - Smart Contract IT",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/qsss_home.md",
    "title": "Quantum Safe Storage",
    "url": "/labs/knowledge_base/technology_toc/qsss_home",
    "content": "Introduction ThreeFold offers a quantum safe storage system (QSS). QSS is a decentralized, globally distributed data storage system. It is unbreakable, self-healing, append-only and immutable. QSS Benefits Imagine a storage system with the following benefits: - Up to 10x more efficient (power and usage of hardware) - Ultra reliable, data can not be lost - Ultra safe & private - Ultra scalable - Sovereign, data is close to you in the country of your choice - Truly peer-to-peer, by everyone for everyone This is not a dream but does exist and is the underpinning of the TFGrid. Peer-to-Peer Design Our storage architecture follows the true peer-to-peer design of the TF grid. Any participating node only stores small incomplete parts of objects (files, photos, movies, databases...) by offering a slice of the present (local) storage devices. Managing the storage and retrieval of all of these distributed fragments is done by a software that creates development or end-user interfaces for this storage algorithm. We call this 'dispersed storage'. Peer-to-peer provides the unique proposition of selecting storage providers that match your application and service of business criteria. For example, you might be looking to store data for your application in a certain geographic area (for governance and compliance) reasons. Also, you might want to use different \"storage policies\" for different types of data. Examples are live versus archived data. All of these uses cases are possible with this storage architecture and could be built by using the same building blocks produced by farmers and consumed by developers or end-users. Overview !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/grid3_howitworks.md",
    "title": "How It Works",
    "url": "/labs/knowledge_base/technology_toc/grid3_howitworks",
    "content": "Welcome to the ThreeFold ecosystem, your gateway to a global and sustainable network! TFGrid in a Nutshell The ThreeFold Grid is a remarkable network sustained by dedicated individuals, known as ThreeFold farmers, who offer network, storage and compute (CPU, GPU) resources to users via 3Nodes, specialized computers that run the innovative Zero-OS software. > Become a ThreeFold farmer If it runs on Linux, it runs on the Grid! The ThreeFold Grid supports any application that can run on Linux, guaranteeing compatibility and flexibility. Moreover, it offers additional benefits, including enhanced privacy, security, proximity to end-users, and a significantly lower cost compared to traditional alternatives. > Deploy on the TFGrid Z-OS: A New Operating System Z-OS (Zero Operating System) is a lightweight and secure operating system designed specifically for running workloads on the ThreeFold Grid. Z-OS provides a minimalistic and containerized environment for applications, enabling efficient resource allocation and management. > Learn more about Z-OS Internet as a Resource In a similar manner to purchasing electricity or other utilities, the internet capacity provided by the ThreeFold Grid is produced and allocated locally. This decentralized approach empowers digital service and application providers to host their offerings closer to end-users, resulting in exceptional performance, competitive pricing, and improved profit margins. The TFGrid is fueled by the ThreeFold Token. TFChain: The Backbone Blockchain Infrastructure __TFChain__, also known as __ThreeFold Chain__, is the powerful blockchain that orchestrates the interactions within the ThreeFold Grid ecosystem. TFChain is like the control center of the ThreeFold Grid, providing users and farmers with a wide range of key functionalities. > Learn more about TFChain ThreeFold Dashboard The ThreeFold Dashboard serves as an indispensable tool for farmers and users of the ThreeFold Grid, facilitating node registration, resource management, workload deployments and much more. > Learn more about the ThreeFold Dashboard",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_toc.md",
    "title": "Smart Contract IT",
    "url": "/labs/knowledge_base/technology_toc/smartcontract_toc",
    "content": "TABLE OF CONTENTS - Introduction - Infrastructure As Code (IAC) - 3Bot Integration",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_tfgrid3.md",
    "title": "Introduction",
    "url": "/labs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_tfgrid3",
    "content": "Introduction From TFGrid 3.0, the 'Smart Contract for IT' concept for reserving capacity is fully decentralized and runs on TF-Chain, the ThreeFold blockchain infrastructure on Parity Substrate. Architecture Two main components play a role in achieving a decentralised consensus between a user and a farmer. - TFGrid Substrate Database Pallet TFGrid - TFGrid Smart Contract The TF-Grid Substrate Database will keep a record of all Entities, Twins, Nodes and Farmers in the TF-Grid network. This makes it easy to integrate the Smart Contract on Substrate as well since we can read from that storage in runtime. ! The Smart Contract on Substrate works as following: 1: To deploy a workload, the user interacts with this smart contract pallet and calls: with the input being: The user must instruct his twin to create the contract. This program containing his digital twin is yet to be defined. A contract will always belong to a twin and to a node. This relationship is important because only the user's twin and target node's twin can update the contract. The field is the target node's ID. A user can do lookup for a node to find its corresponding ID. The workload data is encrypted by the user and contains the workload definition for the node. If is specified, the contract will reserve the number of public ips requested on the node's corresponding farm. If there are not enough ips available an error will be returned. If the contract is canceled by either the user or the node, the IPs for that contract will be freed. This pallet saves this data to storage and returns the user a . 2: The user sends the contractID and workload through the RMB to the destination Node. The Node reads from the RMB and sees a deploy command, it reads the contractID and workload definition from the payload. It decodes the workload and reads the contract from chain using the contract ID, the Node will check if the user that created the contract and the deployment hash on the contract is the same as what the Node receives over RMB. If all things check out, the Node deploys the workload. 3: The Node sends consumption reports to the chain The Node periodically sends consumption reports back to the chain for each deployed contract. The chain will compute how much is being used and will bill the user based on the farmers prices (the chain can read these prices by quering the farmers storage and reading the pricing data). See PricingPolicy. A report looks like: json The node can call on this module to submit reports in batches. Usage of SU, CU and NU will be computed based on the prices and the rules that Threefold set out for cloud pricing. Billing will be done in Database Tokens and will be send to the corresponding farmer. If the user runs out of funds the chain will set the contract state to or it will be removed from storage. The Node needs to act on this 'contract cancelled' event and decommission the workload. The main currency of this chain. More information on this is explained here: TODO Notes Sending the workloads encrypted to the chain makes sure that nobody except the user can read his deployment data. It also facilitates a way for the user to recreate his workload data from the chain.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_iac.md",
    "title": "Infrastructure As Code (IAC)",
    "url": "/labs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_iac",
    "content": "Introduction IAC = DevOps is a process framework that ensures collaboration between Development and Operations Team to deploy code to production environment faster in a repeatable and automated way. ... In simple terms, DevOps can be defined as an alignment between development and IT operations with better communication and collaboration. Overview ! Smart Contract !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_3bot.md",
    "title": "3Bot Integration",
    "url": "/labs/knowledge_base/technology_toc/smartcontract_toc/smartcontract_3bot",
    "content": "Introduction The Smart Contract for IT allows you, your company or your community to execute the storage and running of your files and applications securely with consensus and automatic billing. Use Cases With the 3Bot integration, you can use smart contracts to define different sets of Internet resources you need for various types of work, such as storing files, running applications, and communicating across the network. You can use smart contracts to define different sets of Internet resources , such as storing files, running applications, communicate across the network, etc. You can also define a consensus mechanism and create multi-signatures for smart contract execution or completion to deliver appropriate digital services. Overview !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/zos_advantages.md",
    "title": "Zero-OS Advantages",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/zos_advantages",
    "content": "Introduction We present the many advantages of Zero-OS. Zero-OS Installation The Zero-OS is delivered to the 3Nodes over the internet network (network boot) and does not need to be installed. 3Node Install 1. Acquire a computer (server). 2. Configure a farm on the TFGrid explorer. 3. Download the bootloader and put on a USB stick or configure a network boot device. 4. Power on the computer and connect to the internet. 5. Boot! The computer will automatically download the components of the operating system (Zero-OS). The actual bootloader is very small. It brings up the network interface of your computer and queries TFGeid for the remainder of the boot files needed. The operating system is not installed on any local storage medium (hard disk, ssd). Zero-OS is stateless. The mechanism to allow this to work in a safe and efficient manner is a ThreeFold innovation called our container virtual filesystem. Unbreakable Storage - Unlimited history - Survives network, datacenter or node breakdown - No silent corruption possible - Quantum safe (data cannot be decrypted by quantum computers) as long as quantum computer has no access to the metadata - Self-healing & autocorrecting If you deploy a container with simple disk access, you don’t have it. Performance is around 50MB/second, if a bit more CPU is given for the distributed storage encoder, we achieve this performance. Zero Hacking Surface Zero does not mean is not possible but we use this term to specificy that we minized the attack surface for hackers. - There is no shell/server interface on zero-os level (our operating system) - There are no hidden or unintended processes running which are not prevalidatedOne comment: still ssh server running with keys of a few people on each server, not yet disabled. To be disabled in the near future, now still useful to debug but it is a backdoor. The creation of a new primitive where the farmer agrees to give access to administrators under analysis. This way, when a reservation is sent to a node, a ssh server is booted up with chosen key to allow admins to go in. Zero Boot > Zero Boot = Zero-OS boot process ZOS Boot is a boot facility that allows 3nodes to boot from network boot servers located in the TF Grid. This boot mechanism creates as little as possible operational and administration overhead. ZOS Boot is a crucial part for enabling autonomy by not having the operating system installed on local disks on 3nodes. With a boot network facility and no local operating system files you immediate erase a number of operational and administration tasks: - to install the operating system to start with - to keep track of which systems run which version of the operating system (especially in large setups this is a complicated and error prone task) - to keep track of patches and bug fixes that have been applied to systems That's just the administration and operational part of maintaining a server estate with local installed operating system. On the security side of things the benefits are even greater: - many hacking activities are geared towards adding to or changing parts of the operating system files. This is a threat from local physical access to servers as well as over the network. When there are no local operating system files installed this threat does not exist. - accidental overwrite, delete or corruption of operating system files. Servers run many processes and many of these processes have administrative access to be able to do what they need to do. Accidental deletion or overwrites of crucial files on disk will make the server fail a reboot. - access control. I there is no local operating system installed access control, user rights etc etc. are unnecessary functions and features and do not have to be implemented. How In this image from fs, a small partition is mounted in memory to start booting the machine, it gets IPXE (downloads what it needs), and then 0-OS boots. After that, going to the hub, downloading different lists. There is 1 main flist that triggers downloads of multiple flists. In there all the components/daemons that do part of the 0-OS. Also the download of the zos-bins, i.e. external binaries are triggered this way (https://hub.grid.tf/tf-zos-bins). The core components of zero-os can be found in: Zero-OS repo = If something changes in the directory, a workflow is triggered to rebuild the full flist and push it to the hub. When a node discovers there is a new version of one of these lists on the hub, it downloads it, restarts the daemon with the new version. Over the lifetime of the node, it keeps pulling on the hub directories to check whether new daemons/flists/binaries are available and whether things need get upgraded. Features The features of ZOS Boot are: - no local operating system installed - network boot from the grid to get on the grid - decreased administrative and operational work, allowing for autonomous operations - increased security - increased efficiency (deduplication, only one version of the OS stored for thousands of servers) - all server storage space is available for enduser workloads (average operating system size around 10GB) - bootloader is less than 1MB in size and can be presented to the servers as a PXE script, USB boot device, ISO boot image. Deterministic Deployment - flists concept (deduped vfilesystem, no install, ...) The Dedupe filesystem flist uses fuse = interface which allows you to create the file system interface in user space, it is a virtual filesystem. Metadata is exposed. The system sees the full tree of the image, but data itself not there, data is downloaded whenever they are accessed. There are multiple ways to create an flist: - Convert an existing docker image which is hosted on the docker hub - Push an archive like a tjz on the hub - A library and CLI tool exist to build the flist from scratch: doing it this way, the directory is locally populated, and the flist is then created from the CLI tool. - A GitHub action allows to build a flist directly from GitHub action, useful for developers on GitHub Be aware that the flist system works a bit differently than the usual deployment of containers (dockers), which doesn't do mounting of volumes from your local disk into container for configuration. With flists you need to modify your image to get configuration from environment. This is basically how docker was originally intended to be used. - Smart contract for IT The smart contract for IT concept is applicable to any workload: containers, VMs, all gateways primitives, volumes, kubernetes and network. It is a static agreement between farmer and user about deployment of an IT workload. - no dynamic behavior for deployment at runtime - no process can start unless the files are 100% described on flist level Zero-OS Protect - The operating system of the 3node (Zero-OS) is made to exist in environments without the presence of technical knowhow. 3nodes are made to exist everywhere where network meet a power socket. The OS does not have a login shell and does not allow people to log in with physical access to a keyboard and screen nor does it allows logins over the network. There is no way the 3node accepts user initiated login attempts. - For certified capacity a group of known strategic vendors are able to lock the BIOS of their server range and make sure no-one but them can unlock and change features present in the BIOS. Some vendors have an even higher degree of security and can store private keys in chips in side the computer to provider unique identification based on private keys or have mechanisms to check wether the server has been opened / tampered with in the transportation from the factory / vendor to the Farmer. All of this leads to maximum protection on the hardware level. - 3nodes boot from a network facility. This means that they do not have local installed operating system files. Also they do not have a local username / password file or database. Viruses and hackers have very little work with if there are no local files to plant viruses or trojan horses in. Also the boot facility provides hashes for the files sent to the booting 3node so that the 3node can check wether is receives the intended file, no more man in the middle attacks. - The zos_fs provides the same hash and file check mechanism. Every application file presented to a booting container has a hash describing it and the 3node on which the container is booting can verify if the received file matches the previously received hash. - Every deployment of one or more applications starts with the creation of a (private) znet. This private overlay network is single tenant and not connected to the public internet. Every application or service that is started in a container in this overlay network is connection to all of the other containers via a point to point, encrypted network connection.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/primitives_toc.md",
    "title": "Primitives",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc",
    "content": "Primitives TABLE OF CONTENTS - Compute - ZKube - ZMachine - CoreX - Storage - ZOS Filesystem - ZOS Mount - Quantum Safe File System - Zero-DB - Zero-Disk - Network - ZNET - ZNIC - WebGateway - Zero-OS Advantages",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/storage_toc/zos_fs.md",
    "title": "ZOS Filesystem",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/storage_toc/zos_fs",
    "content": "Introduction A deduped filesystem which is more efficient compared to images as used in other Virtual Machine technology. Uses Flist Inside In Zero-OS, is the format used to store zmachine images. This format is made to provide a complete mountable remote filesystem but downloading only the files contents that you actually needs. In practice, Flist itself is a small database which contains metadata about files and directories and file payload are stored on a tfgrid hub. You only need to download payload when you need it, this dramatically reduce zmachine boot time, bandwidth and disk overhead. Why this ZFlist Concept Have you ever been in the following situation: you need two small files but they are embedded in a large archive. How to get to those 2 files in an efficient way? What a disappointment when you see this archive is 4 GB large and you only need 4 files of 2 MB inside. You'll need to download the full archive, store it somewhere to extract only what you need. Time, effort and bandwidth wasted. You want to start a Docker container and the base image you want to use is 2 GB. What do you need to do before being able to use your container ? Waiting to get the 2 GB downloaded. This problem exists everywhere but in Europe and the US the bandwidth speeds are such that this does not present a real problem anymore, hence none of the leading (current) tech companies are looking for solutions for this. We believe that there should a smarter way of dealing with this then simply throwing larger bandwidth at the problem: What if you could only download the files you actually want and not the full blob (archive, image, whatever...). ZFList is splitting metadata and data. Metadata is referential information about everything you need to know about content of the archive, but without the payload. Payload is the content of the referred files. The ZFList is exactly that: it consists of metadata with references that point to where to get the payload itself. So if you don't need it you won't get it. As soon as you have the flist mounted, you can see the full directory tree, and walk around it. The files are only downloaded and presented at moment that you try to access them. In other words, every time you want to read a file, or modify it, Zero FS will download it, so that the data is available too. You only download on-the-fly what you need which reduces dramatically the bandwidth requirement. Benefits - Efficient usage of bandwidth makes this service perform with and without (much) bandwidth",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/storage_toc/zmount.md",
    "title": "ZOS Mount",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/storage_toc/zmount",
    "content": "Introduction ZOS mount is an SSD storage location on which can be written upon inside a VMachine and VKube. Overview The SSD storage location is mounted on a chosen path inside your Z-Machine. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/storage_toc/zdisk.md",
    "title": "Zero-Disk",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/storage_toc/zdisk",
    "content": "Introduction Virtual disk creates the possibility to create and use virtual disks which can be attached to containers (and virtual machines). The technology is designed to be redundant without having to do anything. Roadmap - The virtual disk technology is available for OEM's only, contact TF_Tech.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/storage_toc/zdb.md",
    "title": "Zero-DB",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/storage_toc/zdb",
    "content": "Introduction 0-db is a fast and efficient key-value store redis-protocol compatible, which makes data persistent inside an always append datafile, with namespaces support. Use Cases > ZDB is being used as backend storage for Quantum Safe Filesystem. Overview !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/storage_toc/storage_toc.md",
    "title": "Storage",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/storage_toc",
    "content": "Storage TABLE OF CONTENTS - ZOS Filesystem - ZOS Mount - Quantum Safe File System - Zero-DB - Zero-Disk",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/storage_toc/qsfs.md",
    "title": "Quantum Safe File System",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/storage_toc/qsfs",
    "content": "Introduction Quantum safe filesystem presents itself as a filesystem to the ZMachine. Benefits - Safe - Hacker Proof - Ultra Reliable - Low Overhead - Ultra Scalable - Self Healing = recovers service automatically in the event of outage with no human ! Use Cases - Backup and archive system - Blockchain Storage Backend (OEM ONLY) Implementation > QSFS is using QSSS inside.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/network_toc/znic.md",
    "title": "ZNIC",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/network_toc/znic",
    "content": "Introduction ZNIC is the network interface which is connected to Z_Machine. Use Cases Can be implemented as interface to - planetary_network. - public ip address on a Zero-OS. Overview !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/network_toc/znet.md",
    "title": "ZNET",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/network_toc/znet",
    "content": "Introduction Decentralized networking platform allowing any compute and storage workload to be connected together on a private (overlay) network and exposed to the existing internet network. The Peer2Peer network platform allows any workload to be connected over secure encrypted networks which will look for the shortest path between the nodes. ! Secure mesh overlay network (peer2peer) Z_NET is the foundation of any architecture running on the TF Grid. It can be seen as a virtual private datacenter and the network allows all of the N containers to connected to all of the (N-1) other containers. Any network connection is a secure network connection between your containers and creates peer 2 peer network between containers. ! No connection is made with the internet.The ZNet is a single tenant network and by default not connected to the public internet. Everything stays private. For connecting to the public internet a Web Gateway is included in the product to allows for public access if and when required. Redundancy As integrated with WebGW: ! - Any app can get (securely) connected to the internet by any chosen IP address made available by ThreeFold network farmers through WebGW. - An app can be connected to multiple web gateways at once, the DNS round robin principle will provide load balancing and redundancy. - An easy clustering mechanism where web gateways and nodes can be lost and the public service will still be up and running. - Easy maintenance. When containers are moved or re-created the same end user connection can be reused as that connection is terminated on the Web Gateway. The moved or newly created Web Gateway will recreate the socket to the Web Gateway and receive inbound traffic. Interfaces in Zero-OS !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/network_toc/webgw3.md",
    "title": "WebGateway",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/network_toc/webgw3",
    "content": "Introduction The Web Gateway is a mechanism to connect the private networks to the open Internet, in such a way that there is no direct connection between internet and the secure workloads running in the ZMachines. Overview A Web Gateway connects the public internet to nodes in the ThreeFold Grid network by using reverse proxy software running on nodes with public IP addresses. It acts as an intermediary that: 1. Receives incoming requests from internet users 2. Routes them to the appropriate node in the private network 3. Returns responses to the requester This enables any node to serve web content publicly without needing its own public IP address. Web Gateways provide cost efficiency (cheaper than dedicated public IPs), simplified management (automatic routing), and global accessibility without complex setup. While Web Gateways have some limitations (less flexibility than dedicated IPs and shared resources that may affect performance during peak loads), they're ideal for hosting static websites, API endpoints, web applications, and content distribution. Web Gateway Architecture A distributed web gateway architecture creates a strategic separation between backend computing resources and user-facing services. ! - Separation between where compute workloads are and where services are exposed. - Redundant - Each app can be exposed on multiple webgateways at once. - Support for many interfaces... - Helps resolve shortage of IPv4 addresses Implementation Some 3nodes supports gateway functionality (configured by the farmers). A 3node with gateway config can then accept gateway workloads and then forward traffic to ZMachines that only has yggdrasil (planetary network) or Ipv6 addresses. The gateway workloads consists of a name (prefix) that need to be reserved on the block chain first. Then the list of backend IPs. There are other flags that can be set to control automatic TLS (please check terraform documentations for the exact details of a reservation) Once the 3node receives this workloads, the network configure proxy for this name and the yggdrasil ips. Security ZMachines has to have an yggdrasil IP or any other IPv6 (also IPv4 are accepted) but it means that any person who is connected to the yggdrasil network, can also reach the ZMachine without the need for a proxy. So ti's up to the ZMachine owner/maintainer to make sure it is secured and only have the required ports open. Redundant Network Connection ! Unlimited Scale ! The network architecture is a pure scale-out network system, it can scale to unlimited size, there is simply no bottleneck. Network \"supply\" is created by network farmers, and network \"demand\" is done by TF Grid users. Supply and demand scale independently, for supply there can be unlimited network farmers providing the web gateways on their own 3nodes and unlimited compute farmers providing 3nodes for compute and storage. The demand side is driven by developers creating software that runs on the grid, system integrators creating solutions for enterprise and this demand side is exponentially growing for data processing and storage use cases.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/network_toc/network_toc.md",
    "title": "Network",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/network_toc",
    "content": "Network TABLE OF CONTENTS - ZNET - ZNIC - WebGateway",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/compute_toc/zmachine.md",
    "title": "ZMachine",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/compute_toc/zmachine",
    "content": "Zmachine A is an instance of virtual compute capacity. There are 2 kinds of Zmachines. One is a , standard in cloud environments. Next to this it can also be a . On the Zos level, both of these are implemented as virtual machines. Depending on the context, it will be considered to be either a VM or a container. In either scenario, the is started from an . > Note, both VM and Container on ZOS are actually served as Virtual Machines. The only difference is that if you are running in VM mode, you only need to provide a raw disk image (image.raw) in your flist. Container A container is meant to host . The architecture generally dictates that each service should be run in it's own container (therefore providing a level of isolation), and communicate with other containers it depends on over the network. Similar to docker. In Zos, a container is actually also run in a virtualized environment. Similar to containers, some setup is done on behalf of the user. After setup this is done, the users is started. It should be noted that a container has no control over the kernel used to run it, if this is required, a should be used instead. Furthermore, a container should ideally only have 1 process running. A container can be a single binary, or a complete filesystem. In general, the first should be preferred, and if you need the latter, it might be an indication that you actually want a . For containers, the network setup will be created for you. Your init process can assume that it will be fully set up (according to the config you provided) by the time it is started. Mountpoints will also be setup for you. The environment variables passed will be available inside the container. VM In container mode, zos provide a minimal kernel that is used to run a light weight VM and then run your app from your flist. If you need control over the kernel you can actually still provide it inside the flist as follows: - /boot/vmlinuz - /boot/initrd.img [optional] NOTE: the vmlinuz MUST be an EFI kernel (not compressed) if building your own kernel, or you can use the extract-vmlinux script to extract the EFI kernel. To test if your kernel is a valid elf kernel run command Any of those files can be a symlink to another file in the flist. If ZOS found the file, it will use this with the initrd.img if also exists. otherwise zos will use the built-in minimal kernel and run in mode. Building an ubuntu VM flist This is a guide to help you build a working VM flist. This guide is for ubuntu prepare rootfs bootstrap ubuntu this will create and download the basic rootfs for ubuntu jammy in the directory . After its done we can then chroot into this directory to continue installing the necessary packages needed and configure few things. > I am using script called which is available by default on arch but you can also install on ubuntu to continue the following steps > This script (similar to the command) switch root to that given directory but also takes care of mounting /dev /sys, etc.. for you and clean it up on exit. Next just remove this link and re-create the file with a valid name to be able to continue Install cloud-init Also really important that we install a kernel > I choose this package because it will also install extra modules for us and a generic kernel Next make sure that virtiofs is part of the initramfs image clean up cache Last thing we do inside the container before we actually upload the flist is to make sure the kernel is in the correct format This step does not require that we stay in the chroot so hit or type you should be out of the arch-chroot now To verify you can do this: and it should show something like Now package the tar for upload Upload to the hub, and use it to create a Zmachine VM Image [deprecated] In a VM image mode, you run your own operating system (for now only linux is supported) The image provided must be - EFI bootable - Cloud-init enabled. You can find later in this document how to create your own bootable image. A VM reservations must also have at least 1 volume, as the boot image will be copied to this volume. The size of the root disk will be the size of this volume. The image used to the boot the VM must has cloud-init enabled on boot. Cloud-init receive its config over the NoCloud source. This takes care of setting up networking, hostname , root authorized_keys. > This method of building a full VM from a raw image is not recommended and will get phased out in the future. It's better to use either the container method to run containerized Apps. Another option is to run your own kernel from an flist (explained below) Expected Flist structure An will be considered a if it contains an file. is used as \"boot disk\". This is copied to the first attached volume of the . Cloud-init will take care of resizing the filesystem on the image to take the full disk size allocated in the deployment. Note if the size is larger than the allocated disk. the workload for the VM will fail. Expected Flist structure Any Flist will boot as a container, UNLESS is has a file. There is no need to specify a kernel yourself (it will be provided). Known issues - We need to do proper performance testing for . There seems to be some suboptimal performance right now. - It's not currently possible to get container logs. - TODO: more testing Creating VM image This is a simple tutorial on how to create your own VM image > Note: Please consider checking the official vm images repo on the hub before building your own image. this can save you a lot of time (and network traffic) here https://hub.grid.tf/tf-official-vms Use one of ubuntu cloud-images If the ubuntu images in the official repo are not enough, you can simply upload one of the official images as follows - Visit https://cloud-images.ubuntu.com/ - Select the version you want (let's assume bionic) - Go to bionic, then click on current - download the amd64.img file like this one https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img - This is a image, this is not supported by zos. So we need to convert this to a raw disk image using the following command - now we have the raw image (image.raw) time to compress and upload to the hub - now visit the hub https://hub.grid.tf/ and login or create your own account, then click on upload my file button - Select the newly created tar.gz file - Now you should be able to use this flist to create Zmachine workloads Create an image from scratch This is an advanced scenario and you will require some prior knowledge of how to create local VMs and how to prepare the installation medium, and installing your OS of choice. Before we continue you need to have some hypervisor that you can use locally. Libvirt/Qemu are good choices. Hence we skip on what you need to do to install and configure your system correctly not how to create the VM VM Requirements Create a VM with enough CPU and Memory to handle the installation process note that this does not relate on what your choices for CPU and Memory are going to be for the actual VM running on the grid. We going to install arch linux image. So we will have to create a VM with - Disk of about 2GB (note this also is not related to the final VM running on the grid, on installation the OS image will expand to use the entire allocated disk attached to the VM eventually). The smaller the disk is better this can be different for each OS. - Add the arch installation iso or any other installation medium Boot the VM (locally) Boot the VM to start installation. The boot must support EFI booting because ZOS only support images with esp partition. So make sure that both your hypervisor and boot/installation medium supports this. For example in Libvirt Manager make sure you are using the right firmware (UEFI) Installation We going to follow the installation manual for Arch linux but with slight tweaks: - Make sure VM is booted with UEFI, run command see if you get any output. Otherwise the machine is probably booted in BIOS mode. - With create 2 partitions - an esp (boot) partition of 100M - a root partition that spans the remaining of the disk We need to format the partitions as follows: Note the label assigned to the /dev/vda2 (root) partition this can be anything but it's needed to configure the boot later when installing the boot loader. Otherwise you can use the partition UUID. Next, we need to mount the disks After disks are mounted as above, we need to start the installation This will install basic arch linux but will also include cloud-init, cloud-guest-utils, openssh, and vim for convenience. Following the installation guid to generate fstab file And arch-chroot into /mnt to continue the setup. please follow all steps in the installation guide to set timezone, and locales as needed. - You don't have to set the hostname, this will be setup later on zos when the VM is deployed via cloud-init - let's drop the root password all together since login to the VM over ssh will require key authentication only, you can do this by running We make sure required services are enabled Finally installing the boot loader as follows > Only grub2 has been tested and known to work. Then we need to install grub Change default values as follows And make sure to change as follows > Note: we removed the and add the console flags. Also set the to 0 for a faster boot Then finally generating the config Last thing we need to do is clean up - pacman cache by running - cloud-init state by running Click to exit the change root, then power off by running command. > NOTE: if you booted the machine again you always need to do as long as it's not yet deployed on ZOS this to make sure the image has a clean state > Converting the disk Based on your hypervisor of choice you might need to convert the disk to a image same way we did with ubuntu image. Compress and tar the image.raw as before, and upload to the hub.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/compute_toc/zkube.md",
    "title": "ZKube",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/compute_toc/zkube",
    "content": "Introduction TFGrid is compatible with Kubernetes Technology. Each eVDC as shown above is a full blown Kubernetes deployment. Unique for our Kubernetes implementation - The Kubernetes networks are on top of our ZNet technology which means all traffic between containers and kubernetes hosts is end2end encrypted independent of where your Kubernetes nodes are deployed. - You can mount a QSFS underneath a Kubernetes Node (VM), which means that you can deploy containers on top of QSFS to host unlimited amounts of storage in a super safe way. - You Kubernetes environment is for sure 100% decentralized, you define where you want to deploy your Kubernetes nodes and only you have access to the deployed workloads on the TFGrid. Features integration with znet (efficient, secure encrypted network between the zmachines) can be easily deployed at the edge single-tenant! ZMachine Benefits ZOS Protect: no hacking surface to the Zero-Nodes, integrate silicon route of trust ! Architecture !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/compute_toc/corex.md",
    "title": "CoreX",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/compute_toc/corex",
    "content": "Introduction CoreX allows you to manage your ZMachine over web remotely. ZMachine Process Manager - Provide a web interface and a REST API to control your processes. - Allow to watch the logs of your processes. - Or use it as a web terminal (access over https to your terminal)! !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/primitives_toc/compute_toc/compute_toc.md",
    "title": "Compute",
    "url": "/labs/knowledge_base/technology_toc/primitives_toc/compute_toc",
    "content": "Compute TABLE OF CONTENTS - ZKube - ZMachine - CoreX",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/zos.md",
    "title": "Zero-OS",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/zos",
    "content": "! Zero-OS ! !!!include:whatis_zos Imagine an operating system with the following benefits - upto 10x more efficient for certain workloads (e.g. storage) - no install required - all files are deduped for the VM's, containers and the ZOS itself, no more data duplicated filesystems - the hacking footprint is super small, which leads to much more safe systems - every file is fingerprinted and gets checked at launch time of an application - there is no shell or server interface on the operating system - the networks are end2end encrypted between all Nodes - there is the possibility to completely disconnect the compute/storage from the network service part which means hackers have a lot less chance to get to the data. - a smart contract for IT layer allows groups of people to deploy IT workloads with concensus and full control - all workloads which can run on linux can run on Zero-OS but in a much more controlled, private and safe way > ThreeFold has created an operating system from scratch, we used the Linux kernel and its components and then build further on it, we have been able to achieve all above benefits. The requirements for our TFGrid based on Zero OS are: - Autonomy: TF Grid needs to create compute, storage and networking capacity everywhere. We could not rely on a remote (or a local) maintenance of the operating system by owners or operating system administrators. - Simplicity: An operating system should be simple, able to exist anywhere, for anyone, good for the planet. - Stateless. In a grid (peer-to-peer) set up, the sum of the components is providing a stable basis for single elements to fail and not bring the whole system down. Therefore, it is necessary for single elements to be stateless, and the state needs to be stored within the grid. !!!def alias:zos,zero-os,threefold_operating_system,tf_os,threefold_os",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/tfgrid_by_design.md",
    "title": "TFGrid by Design",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/tfgrid_by_design",
    "content": "Introduction Before starting a project on the TFGrid, it can be good idea to consider the overall design of the grid itself, and to ponder the potential solution designs you can come up with to ensure reliable and resilient deployments. This text will explore some of the main components of the TFGrid as well as its inherent design in order to provide sufficient information for system administrators to deploy effective and reliable solutions. We will also cover the three main solution categories that can be built on top of the TFGrid. TFGrid by Design At its core, the TFGrid is composed of thousands of 3Nodes. 3Nodes provide storage, compute and network units to the TFGrid. By design, 3Nodes are not reliable in themselves, in the sense that a 3Node online today could be offline tomorrow if hardware or connection failures arise. This reality is inherent to any cloud enterprises. But this does not mean that reliability is not possible on the TFGrid. To the contrary, the TFGrid is composed of different components that can be utilized to provide reliability in all aspects of the grid: storage, compute and network. It is the role of system administrators to develop solutions that will be reliable in themselves. A myriad of possibilities and configurations are possible within the TFGrid ecosystem and, by understanding the interconnectedness between the grid components, one can knowingly build a solid deployment that will respond to the needs of a given project. Capacity and Connectivity When it comes to deployments, we must consider two major aspects of the Internet infrastructure: capacity and connectivity. While capacity can be thought as the individual 3Nodes composing the TFGrid, where information is processed and stored within the 3Nodes, connectivity can be thought as the links and information transfers between the 3Nodes and the public Internet. As a general consideration, the TFGrid works mostly on the capacity side, whereas a 3Node will always be connected to the Internet by ways of different Internet Service Providers (ISP) depending on the farmer's location and resources. The 3Nodes provide storage and compute units where users can store information on SSD and HDD disks and where they can generate compute processes with CPUs. Another major component of the TFGrid would be network units. While, as said before, the TFGrid does not provide directly connectivity as per the traditional ISP services, elements such as gateways and Wireguard VPNs are further related to network units than compute or storage units. To build a reliable deployment on the TFGrid, you need to take into consideration the three different types of unit on the TFGrid: storage, compute and network. Let's delve into these a little bit more. TFGrid Main Components Overview and Examples We provide here an overview of some of the main components of the TFGrid. We also provide examples for each of those components in order for the reader to obtain a clear understanding of the TF Ecosystem. By understanding the different components of the TFGrid, system administrators will be able to deploy resilient, redundant and reliable solutions on the grid. For a complete list of the TFGrid components, read this documentation. Storage Units Storage units are related to the data stored in SSD and HDD disks. The Quantum Safe Filesystem (QSFS) technology developed by ThreeFold ensures redundancy and resilience in storage units. If one disk of the QSFS array goes offline, the rest of the system can still function properly. To the contrary, if a user stores information on one single 3Node and this 3Node has a drastic disk failure, the user will lose the data. Another way to achieve redundancy in the storage category would be to deploy a solution with real-time synced databases of two or more 3nodes connected via a wireguard VPN. Note that other configurations offering reliability and redundancy are possible. Let's explore some storage components of the ThreeFold Grid. 0-DB-FS 0-DB-FS is storage system that allows for efficient and secure storage of files on the ThreeFold Grid. 0-DB-FS is built on top of 0-DB, which is a key-value store optimized for high performance and scalability. It provides a decentralized and distributed approach to file storage, ensuring data redundancy and availability. 0-stor_v2 0-stor_v2 is a distributed and decentralized storage solution that enables data storage and retrieval on the ThreeFold Grid. QSFS Quantum Safe Filesystem (QSFS) is ThreeFold's innovative storage solution designed to address the security challenges posed by quantum computing. QSFS employs advanced cryptographic techniques that are resistant to attacks from quantum computers, ensuring the confidentiality and integrity of stored data. By its design, QSFS also offers a high level of redundancy. Compute Units Compute units are related to the CPUs doing calculations during the deployment. If a user deploys on a 3Node and uses the CPUs of the units while those CPUs experience failure, the user will lose compute power. as a main example, a way to achieve redundancy in the compute category would be to deploy a solution via Kubernetes. In this case, the CPU workload is balanced between the different 3Nodes of the Kubernetes cluster and if one 3Node fails, the deployment can still function properly. Let's explore some compute components of the ThreeFold Grid. Virtual CPUs (vCPUs) Virtual CPUs (vCPUs) are virtual representations of physical CPUs that allow multiple virtual machines (VMs) to run concurrently on a single physical server or host. Virtualization platforms allocate vCPUs to each VM, enabling them to execute tasks and run applications as if they were running on dedicated physical hardware. The number of vCPUs assigned to a VM determines its processing power and capacity to handle workloads. On the TFGrid, the number of vCPUs is limited to the physical number of CPUs on the host (i.e. the 3Node). Since this limitation is done per VM, this means that a node with 8 cores can still have 2 VMs each with 8 vCPUs. Kubernetes Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. On the TFGrid, Kubernetes clusters can be deployed out of the box. Thus, system administrators can seamlessly deploy solutions on the TFGrid that are reliable in terms of compute units. TF Grid-SDK-Go and TF Grid-SDK-TS The TFGrid-SDK-Go and TFGrid-SDK-TS enable developers to interact with the ThreeFold Grid infrastructure, such as provisioning and managing compute resources, accessing storage, and interacting with the blockchain-based services. They provide a standardized and convenient way to leverage the features and capabilities of the ThreeFold Grid within Go and Typescript applications. Network Units Network units are related to the data transmitted over the Internet. While TFGrid does not provide direct ISP services, elements such as gateways are clearly related to the network. Gateways can be used to balance network workloads. A deployment could consist of two different gateways with a master node gateway and a worker node gateway. If the master gateway would fail, the worker gateway would take the lead and become the master gateway. Deploying solutions with several gateways can help system administrators build reliable solutions. Note that it is also possible to deploy a Wireguard virtual private network (VPN) between different 3Nodes and synchronize their databases. This provides resilience and redundancy. Let's explore some network components of the ThreeFold Grid. Reliable Message Bus Relay (RMB-RS) Reliable Message Bus Relay (RMB-RS) is a component or system that facilitates the reliable and secure transfer of messages between different entities or systems within the ThreeFold ecosystem. It acts as a relay or intermediary, ensuring that messages are delivered accurately and efficiently, even in the presence of network disruptions or failures. The RMB-RS employs robust protocols and mechanisms to guarantee message reliability, integrity, and confidentiality. TCP-Router TCP-Router is a component of the ThreeFold technology stack that acts as a TCP (Transmission Control Protocol) router and load balancer. It serves as a network gateway for incoming TCP connections, routing them to the appropriate destinations based on predefined rules and configurations. The TCP-Router component is responsible for distributing incoming network traffic across multiple backend services or nodes, ensuring efficient load balancing and high availability. Solution Categories There are three main solution categories on the TFGrid: DIY workloads, independent commercial offerings, and ThreeFold commercial offerings. Let's take a look at them and discuss their basic properties. DIY Workloads Out-of-the-box applications are available on the TF Dashboard and Terraform, where anyone can buy TFTs and deploy on the decentralized and open-source grid. The reliability of those deployments depend on the capacity and resources of each DIY system administrator. In essence, when you deploy on the decentralized and open-source TFGrid, you act as a centralized entity building the solution architecture. You must design the solution in a way that it can be reliable with high-availability and resilience levels that suit the needs of your project. Note that when you deploy on the ThreeFold Grid, you are doing so in accordance with the ThreeFold Terms and Conditions Independent Commercial Offerings Since the TFGrid is open-source, anyone could decide to build a commercial offering on top of the grid. In this case, it would be recommended for the commercial offering to provide Terms and Conditions, clear support, a website to advertise the product and a marketing strategy to obtain customers. In this case, the commercial offering is the centralized entity and if the company makes a mistake, it would be liable to the users to the extent discussed in the T&C. The ThreeFold Manual already contains a lot of resourceful information on how to deploy applications on the TFGrid. We invite everyone to develop independent commercial offerings on top of the ThreeFold Grid. ThreeFold Commercial Offerings ThreeFold is building commercial offerings on top of the TFGrid. Those commercial offerings are for-profit organizations. Each of those organizations would function as a centralized entity. ThreeFold Ventures will be the branch exploring this aspect of the TF Ecosystem. Best Practices This text provided an introduction to some deployment architectures and solution categories possible on the TFGrid. In the future, we will expand on some of the main TFGrid best practices. Stay tuned for more on this topic. Some of the best practices to be covered are the following: Use Kubernetes to deploy redundant workloads Use multi-gateways deployments for redundancy Deploy manually two VMs Use two webgateways to access the VMs Choose a data replication strategy to have content on both places (e.g. syncing databases) Use continous deployment and integration workloads Deploy on 2 different VMs Ensure continuous deployment and integration when changes occur Use DNS with redundancy Use QSFS for storage resilience and redundancy These are only a few of the many possibilities that the TFGrid offers. We invite everyone to explore the TFGrid and share their experience and learning. Questions and Feedback If you have any questions or feedback, we invite you to discuss with the ThreeFold community on the ThreeFold Forum or on the ThreeFold Grid Tester Community chat on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/proof_of_utilization.md",
    "title": "Proof of Utilization",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/proof_of_utilization",
    "content": "Introduction The ThreeFold Grid employs a unique mechanism called __Proof of Utilization__ to track and measure resource utilization within its decentralized network. We provide here an overview of this mechanism. Overview Proof of Utilization is a system that records resource usage on an hourly basis and serves as a transparent and reliable way to validate and verify the utilization of various components of the grid. The Proof of Utilization concept encompasses the monitoring and tracking of three key types of resources within the ThreeFold Grid:__Compute Resources (CU)__, __Storage Resources (SU)__, and __Network resources (NU)__. These resources are essential for supporting the diverse needs of users and applications on the grid. CU, SU, NU __Compute resources (CU)__ refer to the computational power and processing capabilities provided by the ThreeFold Grid. This includes the ability to run applications, execute tasks, and perform complex computations in a distributed and decentralized manner. __Storage resources (SU)__ encompass the capacity to store and manage data within the ThreeFold Grid. It enables users to securely store and retrieve their data, ensuring reliable and scalable data management solutions. __Network resources (NU)__ focus on the network connectivity and bandwidth available within the ThreeFold Grid. This includes the transmission of data, communication between nodes, and facilitating the seamless flow of information across the decentralized network. In addition to the resources mentioned above, the Proof of Utilization system also tracks network utilization parameters such as __IPv4 addresses__, __DNS services__, and __name-on-web gateways__. These elements play a crucial role in enabling effective communication and accessibility within the ThreeFold Grid.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/grid_primitives.md",
    "title": "TFGrid Primitives",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/grid_primitives",
    "content": "Introduction Within the ThreeFold Grid, we offer a range of __low-level constructs known as Primitives__. These powerful functionalities enable you to create diverse and customized solutions atop the grid, opening up a world of possibilities. It's important to note that any application compatible with Linux can seamlessly run on the ThreeFold Grid, ensuring maximum flexibility. Compute Harness the power of computation with our compute primitives, measured in compute units (CU). - ZKube: Deploy and manage Kubernetes clusters effortlessly. - ZMachine: Run your applications within containers or virtual machines powered by the Zero-OS operating system. - CoreX (optional): Gain remote access to your ZMachine by utilizing the CoreX process manager. Storage Leverage our robust storage Primitives, measured in storage units (SU), to meet your data storage requirements efficiently. - ZOS Filesystem: Enjoy a deduplicated and immutable filesystem for secure and reliable data storage. - ZOS Mount: Utilize a portion of a high-speed SSD (Solid State Drive) as a mounted disk directly accessible within your ZMachine. - Quantum Safe Filesystem: Secure your data with an unbreakable storage system, ideal for secondary storage needs. - Zero-DB: Experience a powerful key-value storage mechanism that serves as the foundation for other storage mechanisms. - Zero-Disk (OEM only): Employ a virtual disk format designed exclusively for original equipment manufacturers. Network Harness our network Primitives, measured in network units (CU), to enable seamless communication and connectivity. - ZNET: Establish private networks between ZMachines, ensuring secure and efficient communication. - ZNIC: Access and manage network interfaces within the Planetary Network, enabling efficient data transfer and communication. - WebGateway: Connect your ZNET to the internet with ease, facilitating seamless integration with the wider network. Zero-OS Advantages Enjoy the numerous advantages that Zero-OS brings to the table. - Zero Install: Experience hassle-free deployment without the need for complex installations. - Unbreakable Storage: Ensure the integrity and security of your data with our robust storage mechanisms. - Zero Hacking Surface: Benefit from a minimized attack surface, bolstering the security of your infrastructure. - Zero Boot: Enjoy lightning-fast boot times, allowing for swift and efficient system initialization. - Deterministic Deployment: Achieve consistent and predictable deployments, streamlining your development process. - ZOS Protect: Experience enhanced protection and security measures to safeguard your infrastructure. Conclusion With these powerful Primitives and Zero-OS advantages, the ThreeFold Grid empowers you to build, scale, and secure your solutions with ease. Unleash your creativity and unlock limitless possibilities within the ThreeFold ecosystem.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/grid3_whatsnew.md",
    "title": "What's New on TFGrid v3.x",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/grid3_whatsnew",
    "content": "Introduction The ThreeFold Grid v3.x is packed with exciting new features and enhancements. This marks a significant milestone in the evolution of our decentralized grid infrastructure, bringing even more power, flexibility, and innovation to our users. In this introduction, we will highlight some of the key new features that make ThreeFold Grid v3.x a game-changer in the world of decentralized technologies. > Click here to see the complete TFGrid Component List TFChain v3.x __TFChain v3.x__ is a decentralized chain that holds all the information about the entities comprising the ThreeFold Grid. It operates on the Parity Substrate blockchain infrastructure. Key Features of TFChain v3.x: - Your identity and proofs/reputation are stored on our blockchain. - All information about TFGrid, including nodes and farmers, is made available. - A GraphQL interface that allows easy querying of the blockchain. - Provide Side chains supports, enabling unlimited scalability and allowing others to run their own blockchains. - TFT now exists on TFChain, addressing scalability issues with Stellar. - A bridge facilitates the transfer of TFT between Stellar and TFChain. - Blockchain-based provisioning process/ - TFChain API that is available in JavaScript, Golang, and Vlang. - 'Infrastructure as Code' (IAC) framework support for: - Terraform - Kubernetes, Helm, Kubernetes - Ansible (planned) - Support for App deployment using CapRover - The use of RMB (Reliable Message Bus) that ensures secure peer-to-peer communication with Zero-OS. Please note that the above list summarizes the key features introduced in TFChain v3.0. Proof of Utilization: Enhancing Your Cloud Experience Experience the benefits of Proof of Utilization, a user-friendly feature that optimizes your cloud usage and rewards your pre-purchases. Here are the key features: Key Features: - __Hourly Resource Utilization__: Your resource utilization is accurately captured and calculated on an hourly basis, ensuring transparency and precision in tracking your cloud usage. - __Secure Storage on TFChain__: Your resource utilization data is securely stored in TFChain, our dedicated blockchain, providing a reliable and tamper-proof record of your usage history. - __Automated Discount System__: Our innovative automated discount system acknowledges your pre-purchased cloud needs. Based on the amount of TFT (ThreeFold Tokens) you hold in your account and the duration you maintain these tokens, you can enjoy significant price discounts. - __Personalized Discounts__: The discount you receive is customized to your TFT holdings and usage patterns. For instance, if you hold TFT tokens equivalent to 12 months' worth of usage, you receive a generous 40% discount. Holding TFT tokens for 36 months unlocks an impressive 60% discount on your cloud services. New TFGrid Explorer UI - The TFGrid Explorer v3.x has an updated user interface that is now nicer and easier to use. - It utilizes the GraphQL layer of TFChain.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/grid3_iac.md",
    "title": "Infrastructure as Code",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/grid3_iac",
    "content": "What is IaC? Infrastructure as Code (IaC) is a concept that revolutionizes the way infrastructure is provisioned and managed in the world of IT. It involves the use of declarative scripts or configuration files to define and automate the deployment, configuration, and management of infrastructure resources. With IaC, organizations can treat infrastructure provisioning as code, applying software development principles and practices to infrastructure management. This approach brings numerous benefits, such as increased efficiency, consistency, scalability, and reproducibility. Benefits of IaC Using IaC in the ThreeFold ecosystem brings several benefits. - __Streamlined operations and increased efficiency__: One of the key benefits of Infrastructure as Code (IaC) is the significant improvement in speed and consistency. By eliminating manual processes and automating infrastructure provisioning through code, tasks can be completed faster and with greater accuracy. There is no longer a need to wait for IT administrators to manually perform tasks or worry about their availability. This allows for quicker iterations and faster deployments, enabling organizations to be more agile in their development processes. Consistency is also enhanced as infrastructure configurations are defined in code, ensuring that the same setup is replicated across environments and reducing the risk of configuration drift. - __Empowered software development lifecycle__: IaC places more control in the hands of developers, enabling them to focus on application development rather than spending time on infrastructure management. With reliable and consistent infrastructure provisioning, developers can leverage reusable code scripts to deploy and manage resources efficiently. This streamlines the software development lifecycle, enabling faster development cycles and reducing the time and effort spent on manual infrastructure tasks. Developers can quickly spin up development and testing environments, experiment with different configurations, and roll out changes with ease. - __Reduced management overhead__: IaC eliminates the need for multiple roles dedicated to managing different layers of hardware and middleware in traditional data center environments. With IaC, the management overhead is significantly reduced as infrastructure is defined and managed through code. This frees up administrators to focus on exploring and implementing new technologies and innovations, rather than being tied down by routine maintenance tasks. It simplifies the operational structure and allows for a more efficient allocation of resources, ultimately leading to cost savings and increased productivity. Overall, IaC brings faster speed, improved consistency, efficient software development, and reduced management overhead. It empowers organizations to accelerate their deployment processes, enhance collaboration between development and operations teams, and optimize resource utilization. By adopting IaC practices, organizations can achieve greater agility, scalability, and cost efficiency in their infrastructure management, enabling them to stay competitive in today's fast-paced digital landscape. ThreeFold's IaC At ThreeFold, IaC plays a crucial role in the deployment and management of the ThreeFold Grid infrastructure. ThreeFold leverages popular IaC tools and methodologies to enable users to define and manage their infrastructure resources in a programmatic and scalable way. The IaC mechanism in ThreeFold involves components like __Terraform__, __TypeScript Client__, __GraphQL Client__, and __Grid Proxy REST API__. __Terraform__ acts as the foundation for infrastructure provisioning, allowing users to define their desired infrastructure state using declarative configuration files. __The TypeScript and GraphQL clients__ provide interfaces for interacting with the ThreeFold Grid and managing resources programmatically, while the__ Grid Proxy REST API__ enables integration with external systems and applications. How it Works Firstly, __Terraform__ acts as the primary infrastructure provisioning tool. It provides a declarative language for defining infrastructure resources and their configurations, enabling users to express their infrastructure requirements in a human-readable and version-controlled manner. __TypeScript Client and GraphQL Client__ serve as interfaces for interacting with the ThreeFold Grid, allowing users to create, update, and manage their infrastructure resources programmatically. These clients offer rich functionality and flexibility for managing various aspects of the ThreeFold Grid, including node deployment, capacity allocation, networking, and more. __Grid Proxy REST API__ further enhances the extensibility of the IaC mechanism by enabling integration with external systems and applications, allowing for seamless automation and orchestration of infrastructure tasks. Together, these components form a robust and efficient IaC framework within the ThreeFold ecosystem, empowering users to manage their infrastructure as code with ease and precision. Dive Deeper - How the Grid Works - ThreeFold's Component List - Grace Periods Manuals - Terraform - Typescript Client",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/grid3_components.md",
    "title": "TFGrid Component List",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/grid3_components",
    "content": "Introduction This list serves as a comprehensive glossary that provides an overview of the various components and tools within the ThreeFold Grid ecosystem. It serves as a valuable reference for developers, stakeholders, and enthusiasts who want to gain a deeper understanding of the building blocks that power the ThreeFold Grid. The glossary covers a wide range of components, including infrastructure elements, software tools, protocols, and services that are integral to the functioning and expansion of the grid. From blockchain-based technologies like TFChain and TFGrid Explorer to networking components like RMB-RS and Zinit, the TFGrid Component List offers concise explanations of each component's purpose and functionality. * TFGrid Components (Alphabetical Orders) TF Admin Portal A tool within TF Dashboard provided by ThreeFold for administrators to manage and monitor various aspects of the ThreeFold Grid ecosystem. It serves as a central hub where administrators can access and control different components of the grid, including nodes, capacity, workloads, and user management. The TF Admin Portal provides a comprehensive set of tools and features to configure, deploy, and monitor resources within the grid, ensuring efficient management and utilization of the decentralized infrastructure. Through the portal, administrators can track the performance and health of the grid, allocate resources, manage user permissions, and gain insights into the grid's utilization and usage patterns. > Component Repository on Github (Archived) AtomicSwap A component within the ThreeFold ecosystem that refers to Atomic Swaps, a cryptographic technology that enables the peer-to-peer exchange of cryptocurrencies or digital assets between different blockchain networks without the need for intermediaries. Atomic swaps use smart contracts to facilitate trustless and secure transactions, ensuring that both parties involved in the swap fulfill their obligations. By leveraging atomic swaps, users can seamlessly exchange digital assets across different blockchains, fostering interoperability and eliminating the reliance on centralized exchanges. > Component Repository on Github Builders A Docker-based component within the ThreeFold Grid ecosystem. This particular aspect of Builders involves leveraging Docker containers to package and deploy applications and services on the ThreeFold Grid. Docker is an open-source platform that enables developers to build, package, and distribute applications as lightweight, portable containers. By using Builders as a Docker-based component, developers can easily containerize their applications, ensuring consistency and compatibility across different environments. This approach simplifies the deployment process, allowing developers to quickly deploy their applications on the ThreeFold Grid with minimal configuration and setup. The Builders component takes care of managing the underlying infrastructure and orchestrating the deployment of Docker containers, making it an efficient and convenient way to leverage the capabilities of the ThreeFold Grid for hosting and running applications. > Component Repository on Github TF Capacity Explorer A tool within the TF Dashboard provided by ThreeFold that allows users to explore and analyze the available capacity within the ThreeFold Grid. It provides insights into the distributed computing resources, including storage, processing power, and network bandwidth, that are available for utilization within the ThreeFold network. The TF Capacity Explorer enables users to discover and assess the capacity of different nodes and data centers within the ThreeFold Grid, helping them make informed decisions when deploying their workloads or applications. > Component Repository on Github (Archived) Cloud Container A containerization technology provided by ThreeFold that enables the deployment and management of applications and services in a cloud environment. It offers a lightweight and isolated execution environment for running applications, ensuring scalability, portability, and efficient resource utilization. With ThreeFold's Cloud Container, developers and organizations can package their applications along with their dependencies and configurations, making it easier to deploy and manage them in a cloud-native manner. The Cloud Container technology provides features such as automated scaling, load balancing, and resource allocation, allowing for efficient utilization of computing resources and optimal performance of applications. > Component Repository on Github Cloud Console A web-based graphical user interface (GUI) provided by ThreeFold that allows users to manage and control their cloud infrastructure and resources. It serves as a central hub for managing various aspects of the cloud environment, including virtual machines, storage, networking, and other services. Through the cloud console, users can perform a wide range of tasks, such as provisioning and configuring virtual machines, managing storage volumes, creating and managing networks, monitoring resource usage, and accessing logs and metrics. It provides an intuitive and user-friendly interface that simplifies the management and administration of the cloud infrastructure. > Component Repository on Github TF Dashboard A Graphical user interface (GUI) provided by ThreeFold for users to access and manage their ThreeFold Grid resources. It serves as a centralized control panel where users can monitor and control various aspects of their infrastructure, including their deployed workloads, storage capacity, network connectivity, and overall system health. The TF Dashboard provides real-time statistics, logs, and metrics to help users gain insights into the performance and utilization of their resources. It also offers tools for managing user accounts, configuring security settings, and accessing support and documentation. > Component Repository on Github (Archived) Farm Management A set of tools, processes, and functionalities provided by ThreeFold to manage and operate farms within the ThreeFold Grid. Farms are the physical locations where ThreeFold Farmers deploy and maintain the infrastructure that powers the decentralized network. TF Farm Management offers a comprehensive suite of features that enable farmers to efficiently manage their resources, monitor the health and performance of their infrastructure, and handle various administrative tasks. This includes functionalities such as capacity allocation, monitoring and reporting tools, farmer reputation management, billing and invoicing systems, and overall farm administration. Note: This is a feature that involves multiple component repositories. It is listed here to give a complete picture of ThreeFold's component list. TF Farming Calculator A tool provided by ThreeFold that allows users to estimate and calculate potential earnings from farming on the ThreeFold Grid. Farming refers to the process of providing computing resources, such as storage and processing power, to the ThreeFold Grid and earning tokens in return. The tf-farming-calculator takes into account various factors, including the amount of resources contributed, the duration of farming, and the current market conditions, to provide users with an estimate of their potential earnings in terms of ThreeFold Tokens (TFT). > Component Repository on Github Farmerbot A software tool developed by ThreeFold that serves as a management and monitoring system for ThreeFold farmers. It is designed to automate various tasks related to operating and managing the ThreeFold Grid infrastructure. The TF Farmerbot helps farmers to efficiently manage their resources, including storage capacity, compute power, and network bandwidth. It provides real-time monitoring of the farmer's nodes, ensuring optimal performance and availability. > Component Repository on Github Freeflow Twin Main App or Freeflow Connect (previously Uhuru) FFTwin is a component of the ThreeFold ecosystem that serves as the main interface for users to access and utilize the features of Freeflow Twin. Freeflow Twin is a decentralized communication and collaboration platform developed by ThreeFold. The Twin Main App allows users to securely communicate, share files, and collaborate with others in a decentralized manner, ensuring privacy and data sovereignty. Users can create chat channels, join communities, and engage in real-time messaging with end-to-end encryption. The app also supports file sharing, voice and video calls, and other collaborative features. With the Freeflow Twin Main App, users can experience a decentralized and secure communication platform that empowers them to connect and collaborate with others while maintaining control over their data. > Component Repository on Github GetTFT Shop An official, online platform provided by ThreeFold where users can purchase ThreeFold Tokens (TFT) directly. It serves as a dedicated marketplace for individuals and organizations to buy TFT tokens using various payment methods. The GetTFT Shop ensures a seamless and user-friendly experience for acquiring TFT, which is the native cryptocurrency of the ThreeFold ecosystem. Note: This repository is private. You can visit the GetTFT Shop here. TF Grid3 Client TS A software component that serves as a client library for interacting with the Grid3 platform. It provides developers with a set of tools, functions, and interfaces to communicate with the ThreeFold Grid and utilize its resources. The Grid3 Client TS allows users to perform various operations, such as creating and managing virtual machines, deploying applications, accessing storage services, and interacting with the decentralized network. It acts as a bridge between developers and the ThreeFold Grid, enabling them to leverage the platform's decentralized infrastructure and harness its capabilities programmatically. TF Grid Proxy A fundamental component which serves as a gateway that allows external applications and users to interact with the grid. Acting as a bridge between the decentralized infrastructure of the ThreeFold Grid and external networks, GridProxy facilitates seamless communication and integration. It provides a standardized interface for accessing and managing resources within the grid, enabling developers, businesses, and users to leverage the power and scalability of the ThreeFold Grid in their applications and workflows. By abstracting the complexities of the grid infrastructure, GridProxy simplifies the process of interacting with the grid, making it more accessible and user-friendly. > Component Repository on Github (Archived) TF Grid-SDK-Go ThreeFold Grid Software Development Kit (SDK) for the Go programming language. It is a collection of tools, libraries, and APIs provided by ThreeFold to facilitate the development and integration of applications with the ThreeFold Grid. The TFGrid-SDK-Go allows developers to interact with the ThreeFold Grid infrastructure, such as provisioning and managing compute resources, accessing storage, and interacting with blockchain-based services. It provides a standardized and efficient way to leverage the features and capabilities of the ThreeFold Grid within Go applications. > Component Repository on Github TF Grid-SDK-TS ThreeFold Grid Software Development Kit (SDK) for TypeScript. It is a set of tools, libraries, and APIs provided by ThreeFold to simplify the development and integration of applications with the ThreeFold Grid. The TFGrid-SDK-TS enables developers to interact with the ThreeFold Grid infrastructure, such as provisioning and managing compute resources, accessing storage, and interacting with the blockchain-based services. It provides a standardized and convenient way to leverage the features and capabilities of the ThreeFold Grid within TypeScript applications. > Component Repository on Github TF Grid Simulator A component or tool within the ThreeFold ecosystem that allows for the simulation of the ThreeFold Grid infrastructure. It provides a simulated environment where users can test and evaluate the behavior and performance of the grid without the need for actual hardware or network resources. The tfgrid_simulator mimics the functionalities of the real ThreeFold Grid, enabling users to experiment with various configurations, scenarios, and workloads. This simulation tool is valuable for developers, administrators, and users who want to understand and optimize the behavior of the ThreeFold Grid, test applications, and evaluate the impact of different factors on grid performance. It helps in fine-tuning the grid setup and ensuring optimal resource allocation and utilization. > Component Repository on Github TF Grid Stats A component or tool within the ThreeFold ecosystem that is designed to gather and provide statistics and metrics related to the ThreeFold Grid. It collects data on various aspects of the grid, such as the number of active nodes, their capacities, network performance, usage patterns, and other relevant information. tfgrid_stats allows users and administrators to monitor the health and performance of the grid, track its growth and utilization, and make informed decisions based on the collected data. > Component Repository on Github (Archived) JS-SDK A software development kit (SDK) provided by ThreeFold that enables developers to interact with and utilize the ThreeFold Grid infrastructure using JavaScript. It provides a set of libraries, tools, and APIs that simplify the integration and interaction with various ThreeFold services and functionalities. With the JS-SDK, developers can programmatically manage and deploy resources, interact with the ThreeFold Grid's decentralized storage, perform transactions on the ThreeFold Chain blockchain, and access other platform features. The JS-SDK empowers developers to build decentralized applications (dApps), create custom automation scripts, and leverage the capabilities of the ThreeFold Grid using the familiar JavaScript programming language. > Component Repository on Github JS-NG JavaScript Next-Generation (js-ng) framework, which is a modern and advanced framework for building web applications using JavaScript. It provides developers with a set of tools, libraries, and utilities to streamline the development process and create high-performance, scalable, and maintainable web applications. The js-ng framework incorporates the latest features and best practices of JavaScript, allowing developers to write clean and efficient code. It offers a modular architecture, allowing for easy integration of third-party libraries and extensions. With js-ng, developers can build interactive user interfaces, handle data management, perform client-server communication, and implement various functionalities required for robust web applications. The framework promotes code reusability, testability, and code organization, making it an ideal choice for developing modern web applications. > Component Repository on Github Itenv_TFGridv2 The development and testing environment for the TFGrid v2, which is the second version of the ThreeFold Grid. It is a comprehensive set of tools, configurations, and resources that enable developers to create, test, and deploy applications on the ThreeFold Grid infrastructure. The itenv_tfgridv2 environment provides developers with the necessary tools and utilities to set up a local development environment that closely resembles the production environment of the ThreeFold Grid. It includes various components such as virtual machines, containers, networking configurations, and monitoring tools, all specifically tailored for the development and testing of applications on the ThreeFold Grid. Note: This repository is private. Libp2p-relay A component within the ThreeFold ecosystem that refers to the libp2p relay functionality. libp2p is a modular networking stack that allows peer-to-peer communication and data transfer between nodes in a decentralized network. The libp2p-relay component specifically focuses on providing relay services, which enable nodes that are behind firewalls or NATs (Network Address Translators) to establish direct connections with other nodes in the network. This relaying functionality helps overcome network obstacles and facilitates seamless communication between nodes, ensuring that the ThreeFold Grid operates efficiently and nodes can interact with each other effectively. > Component Repository on Github Minting v3 The third version of the ThreeFold Token (TFT) minting process. It is a protocol implemented by ThreeFold to create new TFT tokens and manage the token supply. TF Minting v3 incorporates various features and improvements over its previous versions to enhance the functionality and security of token creation. It involves the issuance of new TFT tokens according to predefined rules and algorithms, such as token distribution, inflation rates, and token unlocking schedules. TF Minting v3 ensures a fair and transparent distribution of tokens while maintaining the integrity and stability of the ThreeFold ecosystem. > Component Repository on Github Node-Pilot A software package provided by ThreeFold for running and managing individual nodes on the ThreeFold Grid. It is designed to enable users to set up and operate their own decentralized infrastructure nodes. TFNode-Pilot provides the necessary tools and functionality to deploy, configure, and monitor nodes, allowing users to contribute their computing resources to the ThreeFold Grid and participate in the decentralized ecosystem. With TFNode-Pilot, users can easily transform their hardware into powerful nodes that contribute to the storage, compute, and networking capabilities of the ThreeFold Grid. The software package includes features such as node management, resource monitoring, security measures, and integration with other components of the ThreeFold ecosystem. > Component Repository on Github Oauth-Proxy A component specifically developed by ThreeFold to enhance security and facilitate the authentication process for accessing ThreeFold services and resources. It acts as a middleware between users, applications, and the ThreeFold infrastructure, implementing the OAuth protocol. By using the oauth-proxy, applications can securely obtain authorization to access protected resources on the ThreeFold network without directly handling user credentials. The oauth-proxy handles the authentication flow, obtaining consent from users, and issuing access tokens to authorized applications. This helps ensure that access to ThreeFold's services and resources is controlled and secure, protecting user data and privacy. > Component Repository on Github TF Planetary Network Tool A software application or platform that provides users with the necessary tools and functionalities to interact with and utilize the ThreeFold Planetary Network. The ThreeFold Planetary Network is a decentralized and distributed infrastructure network that spans across the globe. It is built on the principles of autonomy, neutrality, and sustainability. The network consists of a vast number of interconnected computing resources, including servers, storage devices, and networking equipment, which are owned and operated by individuals and organizations called farmers. > Component Repository on Github TF Dashboard and Weblets TF Dashboard and TF Weblets are two interconnected components of the ThreeFold ecosystem. TF Dashboard is a user-friendly web-based interface that serves as a sandbox environment for developers, allowing them to experiment, test, and deploy their applications on the ThreeFold Grid. It provides an intuitive interface where users can write, compile, and execute code, explore various programming languages and frameworks, and interact with the ThreeFold infrastructure. TF Weblets, on the other hand, are modular, lightweight applications that run on the ThreeFold Grid. They are designed to be decentralized, secure, and easily deployable, enabling users to create and deploy their own web-based services and applications on the ThreeFold network. > Component Repository on Github (Archived) QSFS It is ThreeFold's innovative storage solution designed to address the security challenges posed by quantum computing. QSFS employs advanced cryptographic techniques that are resistant to attacks from quantum computers, ensuring the confidentiality and integrity of stored data. By utilizing quantum-resistant algorithms, QSFS offers long-term data protection, even in the face of quantum threats. This technology is crucial in a future where quantum computers could potentially break traditional encryption methods. With ThreeFold's QSFS, users can have peace of mind knowing that their data is safeguarded against emerging quantum computing risks, reinforcing the security and resilience of the ThreeFold ecosystem. > Component Repository on Github Reliable Message Bus Relay (RMB-RS) A component or system that facilitates the reliable and secure transfer of messages between different entities or systems within the ThreeFold ecosystem. It acts as a relay or intermediary, ensuring that messages are delivered accurately and efficiently, even in the presence of network disruptions or failures. The RMB-RS employs robust protocols and mechanisms to guarantee message reliability, integrity, and confidentiality. It plays a crucial role in enabling seamless communication and data exchange between various components, applications, or nodes within the ThreeFold network, enhancing the overall reliability and performance of the system. > Component Repository on Github RMB-SDK-Go Software development kit (SDK) for interacting with the Reliable Message Bus (RMB) in the Go programming language. The Reliable Message Bus is a messaging system used within the ThreeFold ecosystem to enable reliable and secure communication between different components and services. The rmb-sdk-go provides a set of tools, libraries, and APIs that developers can use to integrate their Go applications with the RMB infrastructure. It simplifies the process of sending and receiving messages, managing subscriptions, and handling the reliability and security aspects of messaging within the ThreeFold environment. > Component Repository on Github Terraform Provider A software tool that integrates with the popular infrastructure-as-code platform, Terraform. It enables users to provision and manage resources on the ThreeFold Grid using Terraform's declarative configuration language. The provider acts as a bridge between Terraform and the ThreeFold Grid, allowing users to define and deploy infrastructure components such as virtual machines, storage, and networking resources with ease. This integration simplifies the process of building and managing infrastructure on the ThreeFold Grid, offering users the familiar and powerful capabilities of Terraform while leveraging the decentralized and scalable nature of the ThreeFold technology. > Component Repository on Github TCP-Router A component of the ThreeFold technology stack that acts as a TCP (Transmission Control Protocol) router and load balancer. It serves as a network gateway for incoming TCP connections, routing them to the appropriate destinations based on predefined rules and configurations. The TCP-Router component is responsible for distributing incoming network traffic across multiple backend services or nodes, ensuring efficient load balancing and high availability. It helps optimize network performance by evenly distributing the workload and preventing any single node from being overwhelmed. By managing and balancing TCP connections, tcprouter contributes to the overall scalability, reliability, and performance of applications running on the ThreeFold Grid. > Component Repository on Github TFChain A blockchain developed by ThreeFold. It serves as the underlying technology for managing the ThreeFold Grid. TFChain is built on Parity Substrate. It is responsible for storing information related to the ThreeFold Grid, including identity information of entities, 3Node and farmer details, reputation information, digital twin registry, and more. TFChain also acts as the backend for the TFChain database and supports smart contracts for provisioning workloads on top of the ThreeFold Grid. > Component Repository on Github TFChain Activation Service A component within the ThreeFold ecosystem that facilitates the activation of TFChain accounts. TFChain is a blockchain developed by ThreeFold that serves as the backbone of the ThreeFold Grid. The Activation Service provides the necessary infrastructure and processes to activate and onboard users onto the TFChain network. It ensures that users can securely create and manage their TFChain accounts, including generating cryptographic keys, validating user identities, and enabling the activation of TFChain functionalities. > Component Repository on Github TFChain Explorer A web-based tool that allows users to explore and interact with the TFChain blockchain. It provides a graphical interface where users can view transaction history, account balances, smart contracts, and other blockchain-related information. The TFChain Explorer offers transparency and visibility into the TFChain ecosystem, enabling users to track transactions, verify balances, and monitor the overall health of the network. > Component Repository on Github TFChain Block Explorer A web-based tool provided by ThreeFold that allows users to explore and interact with the TFChain blockchain. It provides a user-friendly interface to browse through blocks, transactions, and addresses on the TFChain network. Users can view detailed information about individual blocks and transactions, including timestamps, transaction amounts, and involved addresses. The block explorer also enables searching for specific transactions or addresses, making it easier to track and verify transactions on the TFChain blockchain. With the TFChain Block Explorer, users can gain transparency and visibility into the TFChain network, facilitating better understanding and analysis of blockchain activities. > Component Repository on Github TFChain-GraphQL The integration of GraphQL, a query language for APIs, with TFChain, the blockchain technology used by ThreeFold. It enables developers and users to interact with the TFChain blockchain using GraphQL queries and mutations. GraphQL provides a flexible and efficient way to retrieve and manipulate data from the TFChain blockchain, allowing for customized and precise data retrieval. With TFChain-GraphQL, users can easily query blockchain information, such as transaction details, account balances, or smart contract data, and perform mutations, such as submitting transactions or updating contract states. > Component Repository on Github TFChain TFT Bridge The bridge mechanism that enables the conversion of TFT tokens between different blockchain networks, specifically between the ThreeFold Chain (TFChain) and other blockchain networks such as Ethereum or Stellar. The TFChain TFT Bridge allows TFT tokens to be transferred seamlessly and securely across different blockchain platforms, maintaining their value and integrity. This bridge plays a crucial role in interoperability, enabling users to leverage TFT tokens on multiple blockchain networks, unlocking new possibilities for decentralized applications and token ecosystems. > Component Repository on Github 3Bot or Threebot 3Bot is a component of the ThreeFold ecosystem that refers to a personal digital assistant. It is a software entity that acts as a virtual representation of an individual or organization, providing various services and performing tasks on their behalf. The 3Bot is designed to be decentralized and secure, running on the ThreeFold Grid infrastructure. It can handle functions such as managing personal data, interacting with other digital entities, executing transactions, and offering a range of services through its customizable capabilities. The 3Bot component enables individuals and organizations to have their own private and secure digital assistant, tailored to their specific needs and preferences. Note: This is a feature that involves multiple component repositories. It is listed here to give a complete picture of ThreeFold's component list. Threebot-deployer or 3Bot Deployer A tool provided by ThreeFold that facilitates the deployment of ThreeFold's ThreeBot applications. A ThreeBot is a personal digital assistant that can perform various tasks and provide services to users. The threebot-deployer simplifies the process of setting up and configuring a ThreeBot instance by automating many of the steps involved. It allows users to specify the desired configuration and parameters for their ThreeBot, such as the domain name, authentication settings, and available services. The threebot-deployer then handles the deployment process, ensuring that the ThreeBot is properly installed and configured according to the specified parameters. This tool streamlines the deployment process and enables users to quickly and easily set up their own personalized ThreeBot instances. > Component Repository on Github ThreeFold Wallet A digital wallet designed to securely store and manage ThreeFold Tokens (TFT) and other digital assets inside the ThreeFold Connect App (TFConnect App). It provides users with a convenient and user-friendly interface to interact with their tokens, perform transactions, and track their token balances. The ThreeFold Wallet offers features such as wallet creation, private key management, token transfers, and transaction history. It ensures the security of users' assets through encryption and various authentication methods. The wallet serves as a gateway for users to access and engage with the ThreeFold ecosystem, enabling them to participate in token transactions, staking, and other activities. > Component Repository on Github ThreeFold Connect App Mobile application developed by ThreeFold that serves as a gateway to the ThreeFold Grid. It provides users with a secure and user-friendly wallet interface to access and manage their digital assets, such as ThreeFold Tokens (TFT), and interact with various services and applications within the ThreeFold ecosystem. The ThreeFold Connect App also provides an authenticator feature that ensures secure access and authentication to various services within the ThreeFold ecosystem. As an authenticator, it verifies the identity of users and provides them with secure access to their accounts and associated resources. > Component Repository on Github Zinit A lightweight, fast, and versatile package manager designed to simplify the installation and management of software components within the ThreeFold ecosystem. It provides a user-friendly interface for developers and system administrators to easily install, update, and remove software packages on their ThreeFold nodes. Zinit supports various package sources, including remote repositories, local files, and even directly from Git repositories, allowing users to easily fetch and install the desired software components. It also supports dependency resolution, ensuring that all required dependencies are installed correctly. > Component Repository on Github 0-OS or ZOS ZOS (Zero Operating System) is a lightweight and secure operating system designed specifically for running workloads on the ThreeFold Grid. ZOS provides a minimalistic and containerized environment for applications, enabling efficient resource allocation and management. With ZOS, developers can deploy their applications easily and take advantage of the scalability and resilience offered by the ThreeFold Grid. > Component Repository on Github 0-bootstrap Also known as Zero-Bootstrap, is a component of the ThreeFold Grid infrastructure. It serves as the initial bootstrap mechanism for setting up and initializing the ThreeFold Grid network. 0-bootstrap provides the necessary tools and processes to deploy the core components of the ThreeFold Grid, including the Zero-OS operating system and other essential services. It helps in establishing the foundational layer of the grid network, enabling the deployment and management of compute resources, storage, and other decentralized services. > Component Repository on Github 0-Bus or ZBus A component that facilitates interprocess communication (IPC) within the ThreeFold technology stack. It provides a lightweight and efficient messaging system that allows different software components or services to communicate with each other in a distributed environment. zbus implements a message bus architecture, where components can publish messages to topics and subscribe to receive messages from those topics. It enables decoupled and asynchronous communication between various parts of the system, promoting modularity and scalability. zbus plays a crucial role in enabling communication and coordination between different components of the ThreeFold infrastructure, such as the ThreeBot, ThreeFold Chain, and storage services, allowing them to work together seamlessly to deliver the desired functionality. > Component Repository on Github 0-DB a distributed key-value database system. It is designed to provide efficient and secure storage for data in a decentralized environment. In 0-db, data is stored as key-value pairs, allowing for fast and efficient retrieval of information. It provides high-performance read and write operations, making it suitable for applications that require quick access to data. The distributed nature of 0-db ensures that data is replicated and stored across multiple nodes, enhancing data availability and durability. > Component Repository on Github 0-DB-FS A storage system that allows for efficient and secure storage of files on the ThreeFold Grid. 0-db-fs is built on top of 0-db, which is a key-value store optimized for high performance and scalability. It provides a decentralized and distributed approach to file storage, ensuring data redundancy and availability. With 0-db-fs, users can securely store and retrieve files, benefiting from the decentralized nature of the ThreeFold Grid, which enhances data privacy, security, and resilience. > Component Repository on Github 0-Flist Also known as Zero-Flist, is a file system image format used in the ThreeFold Grid infrastructure. It represents a compressed and immutable snapshot of a specific file system configuration or application stack. 0-Flist files are used to package and distribute software, data, and configurations within the ThreeFold Grid. They contain all the necessary files and dependencies required to run an application or service. 0-Flist files are lightweight, portable, and easy to distribute, making them ideal for deploying applications across the decentralized network. > Component Repository on Github 0-Hub Also known as Zero-Hub, is a key component of the ThreeFold Grid infrastructure. It serves as the central hub or entry point for users and applications to connect with the decentralized network. 0-hub provides a user-friendly interface and API endpoints that allow users to interact with the ThreeFold Grid and access its resources. It acts as a bridge between the users and the underlying infrastructure, enabling them to deploy and manage their workloads, access decentralized storage, and utilize other services provided by the ThreeFold Grid. 0-hub also plays a crucial role in facilitating peer-to-peer communication and collaboration within the network, connecting users and allowing them to share and exchange resources securely. > Component Repository on Github 0-InitramFS Initial RAM file system used in the ThreeFold ecosystem. An initramfs is a temporary file system that is loaded into memory during the boot process before the root file system is mounted. It contains essential files and utilities needed to initialize the system and prepare it for the boot process. In the context of ThreeFold, the 0-initramfs is a customized initial RAM file system specifically designed for the ThreeFold Grid infrastructure. It includes necessary components and configurations to ensure a smooth and efficient boot process for ThreeFold nodes. By utilizing the 0-initramfs, the ThreeFold ecosystem can optimize the boot sequence and ensure the proper initialization of the system components before transitioning to the main operating system. > Component Repository on Github 0-stor_v2 A component of the ThreeFold technology stack that refers to the second version of the 0-stor storage system. 0-stor_v2 is a distributed and decentralized storage solution that enables data storage and retrieval on the ThreeFold Grid. It utilizes erasure coding and sharding techniques to distribute data across multiple storage nodes, ensuring high availability and data redundancy. The 0-stor_v2 component provides an efficient and secure way to store data on the ThreeFold Grid, with features such as data encryption, replication, and integrity checks. It is designed to be scalable and fault-tolerant, allowing for the seamless expansion of storage capacity as needed. Developers and users can leverage 0-stor_v2 to store and manage their data in a decentralized and resilient manner, ensuring data privacy and accessibility on the ThreeFold Grid. > Component Repository on Github",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/contract_grace_period.md",
    "title": "Contract Grace Period",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/contract_grace_period",
    "content": "Introduction __The Grace Period__ serves as a crucial aspect of the ThreeFold ecosystem, providing a safety net for users when their funds run low. Let's explore the key details in a user-friendly manner: What is the Grace Period? When a contract owner exhausts their wallet funds required for their deployment, the contract enters a Grace Period. During this time, the deployment becomes temporarily inaccessible to the user. However, once the wallet is replenished with TFT (ThreeFold Tokens), the contract resumes normal operation. It's important to note that if the Grace Period expires (typically after 2 weeks), the user's deployment and data will be deleted from the node. How does it work? When a twin (a user account) depletes its funds, all linked contracts enter a Grace Period during the next billing cycle. By default, the Grace Period lasts for 14 days. Throughout this period, users cannot utilize any deployments associated with the twin. Additionally, users cannot delete contracts during the Grace Period, whether they are related to nodes, names, or rent. Workloads become usable again when the twin is funded with the required amount of TFT. If the twin is not funded during the Grace Period, the contracts will be automatically deleted after this period. When does the Grace Period kick in? The Grace Period commences when the twin balance falls below the minimum required for the respective deployments or workloads. How to resume your workloads: To regain access to workloads within the Grace Period, it is essential to fund your twin with sufficient TFT tokens. This action ensures the resumption of operations and allows you to continue your work seamlessly. The Grace Period feature acts as a safeguard, providing users with the opportunity to manage their funds effectively and maintain uninterrupted operations within the ThreeFold ecosystem. Grace Period Contract State: Easily Accessible Information Checking the state of your contracts within the Grace Period is simple and convenient. Here's how you can do it: Grid Weblets: The Contracts tab on the Dashboard provides an easy way to monitor your contracts. Here, you can find comprehensive details about the desired contract, including its State and Expiration date if the node is in the Grace Period. ! ThreeFold Grid Proxy: Access the Grace Period contracts through the following endpoint: https://gridproxy.grid.tf/contracts?state=GracePeriod&twin_id= ! This allows you to retrieve information about contracts that are currently in the Grace Period. TFChain GraphQL: You can also check the Contract State using __GraphQL queries__. Depending on the contract type, utilize the appropriate queries available for Node Contract and Rent Contract. Node Contract ! Rent Contract These queries provide insights into the status and details of the contracts. ! PolkadotJS UI: Another option is to check the Contract state using the __PolkadotJS UI__. Simply navigate to chainstate -> SmartContractModule -> Contracts(ID_OF_CONTRACT) to view the relevant contract information. ! With these user-friendly options at your disposal, you can effortlessly track and monitor the state of your contracts within the Grace Period.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/concepts_readme.md",
    "title": "Grid Concepts",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme",
    "content": "ThreeFold Grid Concepts On this section we will explore the fundamental principles and concepts behind the ThreeFold Grid. This comprehensive resource will take you on a journey through the core technologies that underpin the ThreeFold Grid, empowering you to understand and leverage the decentralized nature of this groundbreaking infrastructure. Learn the Basics - Zero-OS - TFGrid Primitives - TFGrid Component List - ThreeFold's Infrastructure as Code (IaC) - Proof of Utilization - Contract Grace Period - What's New on TFGrid v3.x - TFChain - TFGrid by Design",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/technology_toc/concepts_readme/tfchain/tfchain.md",
    "title": "TFChain",
    "url": "/labs/knowledge_base/technology_toc/concepts_readme/tfchain",
    "content": "Introduction ThreeFold Chain (TFChain) is the base layer for everything that interacts with the grid. Nodes, farms, users are registered on the chain. It plays the central role in achieving decentralised consensus between a user and Node to deploy a certain workload. A contract can be created on the chain that is essentially an agreement between a node and user. Twins A twin is the central Identity object that is used for every entity that lives on the grid. A twin optionally has an IPV6 planetary network address which can be used for communication between twins no matter of the location they are in. A twin is coupled to a private/public keypair on chain. This keypair can hold TFT on TF Chain. Farms A farm must be created before a Node can be booted. Every farms needs to have an unique name and is linked to the Twin that creates the farm. Once a farm is created, a unique ID is generated. This ID can be used to provide to the boot image of a Node. Nodes When a node is booted for the first time, it registers itself on the chain and a unique identity is generated for this Node. Node Contract A node contract is a contract between a user and a Node to deploy a certain workload. The contract is specified as following: We don't save the raw workload definition on the chain but only a hash of the definition. After the contract is created, the user must send the raw deployment to the specified node in the contract. He can find where to send this data by looking up the Node's twin and contacting that twin over the planetary network. Rent Contract A rent contract is also a contract between a user and a Node, but instead of being able to reserve a part of the node's capacity, the full capacity is rented. Once a rent contract is created on a Node by a user, only this user can deploy node contracts on this specific node. A discount of 50% is given if a the user wishes to rent the full capacity of a node by creating a rent contract. All node contracts deployed on a node where a user has a rent contract are free of use expect for the public ip's which can be added on a node contract. Name Contract A name contract is a contract that specifies a unique name to be used on the grid's webgateways. Once a name contract is created, this name can be used as and entrypoint for an application on the grid. Contract billing Every contract is billed every 1 hour on the chain, the amount that is due is deducted from the user's wallet every 24 hours or when the user cancels his contract. The total amount acrued in those 24 hours gets send to following destinations: - 10% goes to ThreeFold - 5% goes to staking pool wallet (to be implemented in a later phase) - 50% goes to certified sales channel - 35% TFT gets burned See pricing for more information on how the cost for a contract is calculated. Contract locking To not overload the chain with transfer events and others we choose to lock the amount due for a contract every hour and after 24 hours unlock the amount and deduct it in one go. This lock is saved on a user's account, if the user has multiple contracts the locked amount will be stacked. Contract grace period When the owner of a contract runs out funds on his wallet to pay for his deployment, the contract goes in to a Grace Period state. The deployment, whatever that might be, will be unaccessible during this period to the user. When the wallet is funded with TFT again, the contract goes back to a normal operating state. If the grace period runs out (by default 2 weeks) the user's deployment and data will be deleted from the node. DAO See DAO for more information on the DAO on TF Chain. Farming Policies See farming_policies for more information on the farming policies on TF Chain. Node Connection price A connection price is set to every new Node that boots on the Grid. This connection price influences the amount of TFT farmed in a period. The connection price set on a node is permanent. The DAO can propose the increase or decrease of the connection price. At the time of writing the connection price is set to $ 0.08. When the DAO proposes a connection price and the vote is passed, new nodes will attach to the new connection price. Node Certifiers Node certifiers are entities who are allowed to set a node's certification level to . The DAO can propose to add or remove entities that can certify nodes. This is usefull for allowing approved resellers of Threefold nodes to mark nodes as Certified. A certified node farms 25% more tokens than a node.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_9_0.md",
    "title": "TFGrid v3.9.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_9_0",
    "content": "ThreeFold Grid v3.9.0 Release Note Release Note of ThreeFold Grid v3.9.0. - Live on Mainnet 12/04/2023 - Live on Testnet 23/03/2023 This release is mainly around power management/capacity planning orchestrated by the farmerbot based on Wake-on Lan (WOL) and the reliable message bus (RMB) and the toolings update to utilize both. It also includes several other updates, improvements and fixes of numerous grid components as described below: The Components - TFChain v2.3.0 - ZOS v3.6.0 - TF Farmerbot v1.0.0 - TF Weblets v1.7.0 - TF Dashboard v1.4.0 - TF Gridclient v2.0.0 - TF Gridproxy v1.7.0 - Terraform v1.8.x - RMB-RS v1.0.2 - TFChain-GraphQL v2.9.0 Upgrades and Improvement Highlights Below are some of the highlights of TFGrid v3.9.0 component upgrades and improvements. Feel free to check TFGrid v3.9.0 Project for a more detailed overview of the TFGrid v3.9.0 release. RMB-RS v1.0.2 Reliable Message Bus Relay (RMB-RS) is a secure communication panel that allows bots to communicate together in a chat-like way. It makes it very easy to host a service or a set of functions to be used by anyone, even if your service is running behind NAT. - Guarantee authenticity of the messages. You are always sure that the received message is authentic from the sender. - End-to-end encryption support. - Support for third-party hosted Relays. Anyone can host a Relay and people can use it safely since there is no way messages can be inspected while using e2e. That's similar to home servers by matrix. See Specifications for more information. > Below is the list of the __Public Relay Addresses__ hosted by Threefold: - Dev: wss://relay.dev.grid.tf - QA: wss://relay.qa.grid.tf - Test: wss://relay.test.grid.tf - Main: wss://relay.grid.tf __Impacted Clients:__ - RMB-SDK-TS - RMB-SDK-GO TFChain v2.3.0 On this release, we modified the twin objects on TFChain and removed the notion of an . We added 2 fields ( and ) onto the twins. - __Relay__: an RMB Relay Address which a client can connect to (See RMB changes) - __PK__: a public key for an encryption key which can be used to encrypt messages on the Public Relay, if not set, traffic will be unencrypted. __Impacted Clients:__ - Grid3_Client_RS TFChain-GraphQL v2.9.0 An important note for users, that multiple steps would be required to upgrade your TFChain-GraphQL into the latest v2.9.0 release, as described below: 1. Restart the ingester from scratch using the new config 2. Restart the processor from scratch using the new code Please make sure all data is wiped before restarting both services. TF Famerbot v1.0.0 TF Farmerbot is a new component that aim as a power management solution that would allow farmer to setup to enable Wake-on-LAN mechanism on their farms. Other Component Changelogs TFChain v2.3.0 - Fixed locked balances - Added extra field to twin for publickey - Fixed serial number validation was blocking nodes from registration - Added fixes on Farming policies on Testnet - Allow farms to Add public IP ranges - Support power management and capacity planning - Fixed TFT price on mainnet - Reworked migrations - Set node's last uptime when the node send an uptime event - Disable twin deletion - Bug fixes around data validations, and more. Please follow this milestone for more. ZOS v3.6.0 - Support Switching dhcpd from udhcpd - WOL support - Power Management support - Fixed gateways backend validation - Added number of workloads and deployments to zos reported statistics - Support the new RMB and Relay - Provide clearer messaging during twin registration Please follow this milestone for more details TF Farmerbot v1.0.0 - Initial Release - Added Support for Power Management feature - Added Support for Capacity Planning feature TF Weblets v1.7.0 - NEW Wordpress solution - NEW Umbrel solution - Added live button support - Better error reporting mechanism - Support Mnemonics field editing - Removed flash messages after successfull deployment Please follow this milestone for more details TF Dashboard v1.4.0 - Public IP validation - RenameD 'Swap' page to 'Bridge' - Support setting Relay and Public Key - Added filter by Country validation - Filter farms by pricing policy support - Resource pricing calculator discount distinction between shared and dedicated nodes Please follow this milestone for more details TF GridClient v2.0.0 - Added Support for RMB and Public Key of Twins - Added Support for Farmerbot - Added pricing calculator module - Support service contracts - Added size property to QSFS model - HTTP server mode allows configuration file for user credentials - Added fixes on 'Filter nodes by farmID' featue Terraform v1.8.x - Added Support for RMB and RMB Relay - Added Support for deployment using direct client - Added Support for parallel deployment of resources - Expand resources and data sources documentation Please follow this milestone for more details RMB v1.0.2 The new version of RMB written in Rust - Added Federation support - Added Signing and end-to-end encryption - RMB-Peer for compatibility - Added Ratelimiting support TFGrid Proxy v1.7.0 - Removed the proxying features, obsoleted by the new RMB. Please follow this milestone for more details",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_8_0.md",
    "title": "TFGrid v3.8.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_8_0",
    "content": "ThreeFold Grid v3.8.0 Release Note Release Note of ThreeFold Grid v3.8.0. Live on Testnet 02/02/2023 This release note includes updates, improvements and fixes of numerous grid components as described below: The Components - TFChain v2.2.0 - ZOS v3.4.0 - TF Weblets v1.6.0 - TF Dashboard v1.3.0 - TFGrid Client v1.5.0 - TFGrid Proxy v1.6.5 - Terraform v1.6.0 Upgrades and Improvements TFChain v2.2.0 - Added Third Party Billing Services, allowing defining contracts between TFChain users for a service and the billing. - Reworked billing flow, see details here. - Infrastructure wise, we have integrated Firesquid, which is showing promising improvements in regards of the storage and data syncing. - Added Bugfixes around data validations and improving migrations ZOS v3.4.0 This release was mainly focused on the stabilization of ZOS, Monitoring Support, upgrading components and fixing bugs as described below: - Vector and Node-exporter support for monitoring - Bugfixes / hardening around uptime reports, capacity reports and QSFS workloads cleanup - Added fixes for Grace Period regression - Added fixes for ZOS Nodes Recovery after Network Outages - Uptime reports rework: allowing it to happen every 40 minutes, instead of evey 2 hours - Added Grace Period Workload Regression fixes 3.4 milestone for more details TF Weblets v1.6.0 - Support Algorand solution deployment - Simplified Weblet's Profile Manager - Support Mastodon solution deployment - Upgraded Discourse solution deployment support - Various bugfixes and UI Improvements For more detailed information on this component release, please see TF Weblets v1.6.0 Milestone TF Dashboard v1.3.0 - Fixed broken 'Filter by Farm ID' - Added fixes on HRU Filter - Added Validation function on recipient's TFT address - Added updates to sidebar icons - Improved new farm addition function - Added node filters validations fix - Support filtering nodes by farm name - Added Monitoring dashboard For more detailed information on this component release, please see TF Dashboard v1.3.0 Milestone TFGrid Client 1.5.0 - Added ZLogs workload support - Added documentation updates Terraform 1.6.0 - Capacity planning upgrade - Added Kubernetes token validation function TFGrid Proxy v1.6.5 - Added fixes on dedicated nodes reservation - Added fixes on TCP connection leaks - Added Swagger Docs fixes - Added Updates to stats endpoint - Added new queries for total resources - Added more parameters to /nodes enpoint for filter by twin_id and node_id For more detailed information on this component release, please see TFGrid Proxy v1.6.5 Milestone",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_7_0.md",
    "title": "TFGrid v3.7.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_7_0",
    "content": "ThreeFold Grid v3.7.0 Release Note Release Note of ThreeFold Grid v3.7.0. It includes updates, improvements and fixes of numerous grid components as described below. Component Upgrades ThreeFold Wallet v3.7.0 - Include the option to show transaction details (Sender, Receiver, Memo, Blockchain hash, Amount, Asset, Date - Added Farmer types details - GraphQL types fix - Enabled wallet deletion - Wallet Cache fixes - Bugs fixes and generic improvements ThreeFold Connect v3.7.0 - Improved loading of webpages - Released the IOS version of planetary network - Improved login flow (backend) - Removed the concept of .3bot from the app registration and other display - Re-enable TFChain bridge after twin changed - Backend: Upgraded from Vue v2 to Vue v3 - Backend: Full kubernetes test deploy stack. - Frontend: Add typescript, tailwind. Removed the use of vuetify - Generic Bug fixes ThreeFold Grid Proxy Client v1.5.9 - Initial Grid Proxy Client implementation - Includes the gridproxy API client along with API-specific information - Includes classes that represent entities in the context of the API in the sub-module model (for making conversions between JSON objects and V objects). - Added CI pipeline to run tests ThreeFold Chain v2.1.0 - Improved Validation for Public Config (Node) by Implementing a maximum size on all types that are filled in by the user or ZOS tfchain - Improved Validation for Interfaces (Node) by Implementing a maximum size on all types that are filled in by the user or ZOS tfchain - Improved Validationfor Public IPs (Farm) - Improved Validation for Twin IPs - Reworked public IPs on Contract, they are now shown as a list with the actual public IP object - Executed billing in a transactional operation tfchain - Added Restriction of deployment hash length (32 bytes) Planetary Network v.3.7.0 - Added support for M1 Mac. - Refresh list of peers. - Allow extra peers to be added by TF org. - Fix UI crashing/lags - Build for Ubuntu, Windows, Build for Mac Freeflow Twin Beta 1.5 - Major Rebranding from Uhuru to Freeflow Twin - Generic Bug fixes - Enabled tagging people in chats - Improved dev setup - Improved staging+production link setup. - Self-deploy improvements. - PWA support - Add info labels - HTML encoding of messages - Overflow handling - Remember login session - Chat: Added File upload progress view - Chat: Added Link preview - Chat: Adding more search options TFGrid Dashboard v1.1.4 - UX/UI : Updated Color Palette - Updated Font styles - Updated sidebar menu UX to include TF Portal, TF Explorer - Enabled day/night mode - TFGrid Explorer: Added Nodes page, Statistic Page, and Farms page ON TFGrid Explorer - TFGrid Explorer: Added category of listed nodes as (dedicated, rented, and arentable) - TFGrid Stats: Updated Minting Details on TF Dashboard - TFGrid Stats: show receipts of previous nodes - TFGrid Stats: Added Calendar UI - Clickable Live Support Chat Popup TF Playground v1.4.4 - UX/UI : Updated Color Palette - Updated Fonts. - New Deployment/Solutions Icons in the sidebar. - New Actions Icons in the deployment list. - Added Solution Categories - Enabled custom ‘Presearch instance’ deployment - New Capacity Filter - Add IPv4 Planetary Network Filter for specific instance deployments - Newly improved Capacity Management for solution deployment: enabling the setting of a full VM as the default Virtual Machine for deployment, - Easily fund a deployment profile / ID by scanning your ID wallet QR Code - Profile Manager: Avoid losing deployment with Grace Period Listing - provide a simple list where you can select one of the online Grid gateways - Profile Management: Add ‘Confirmation’ popup before deleting a deployment profile - Added an Identifier for the current network in the sidebar (main/test/devnet) - TF Playground Wallet: show unlocked/locked tokens in balance - Profile Management: allow a user to create a profile with no SSH key. - TFGrid Client TS supports Algorand, Stellar, and TFChain Modules. - NEW Node Pilot Instance Deployment - NEW Subsquid Solution",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_6_1.md",
    "title": "TFGrid v3.6.1",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_6_1",
    "content": "ThreeFold Grid v3.6.1 Release Note Release Note of ThreeFold Grid v3.6.1 It includes updates, improvements and fixes of numerous grid components as described below. TFGrid 3.6.1 components - testnet tfchain 1.12.1 - substrate client (go) release for type change - tfchain client (JS) release for type change - graphql 2.3.3 - tfchain bridge v2.1.0 - ZOS 3.1.0-rc1 - weblets 1.4.3-rc1 - terraform 1.2.1 - gridproxy v1.5.1 - explorer 3.2.2 - tfgrid_dashboard 1.0.6 Component Upgrades TFPlayground v1.4.3 - Updated Farming Calculator - Better node-filtering mechanism by adding 'capacity' filter - Simplified K8s solution deployment by eliminating 'add ssh key' part - Improved UX for manual solution deployment on dedicated nodes - Fixed solution's post-deployment bad gateway issue. - Validation enhancements ThreeFold Wallet v3.1.0 - Enable token unlocking feature - Allow users to unlock their locked tokens via TFwallet. - Improvements and fixes included, including usability supports for iOS devices that will be greatly improved. TFConnect App v3.6.0 - Better usability and user experience through the app workflow improvements as well as - Improved design and interface, look and feel. TF Planetary Network v0.3.0 TF Planetary Network is an application that allows users to access Peer To Peer end2end encrypted global network which lives on top of the existing internet or other Peer To Peer networks created. This release's improvements: - New P2P functionalities on Desktop Client - Improved the desktop clients for planetary network by adding support for M1 version of Mac. - Allowed the application to refresh the list of ‘peers’, allowing extra ‘peers’ to be added by TF org - Debugged multiple account issues on Mac. TFTShop (GetTFT) v1.1.1 - Better usability and user experience through the app workflow improvements - Improved design and interface, look and feel, such as Improvement on TFT purchase flows on all BTC-TFT, and FIAT-TFT transactions TFGrid Proxy v1.5.0 TFGrid Proxy is a REST API-based server used to interact with TFGridDB (Database) in order to access all available node-related information. This release's improvements: - Added querying for dedicated nodes support in gridproxy API. - Added support for twins and contracts. - Added filter for dedicated nodes - Added missing queries on farms - Added country API for node distribution ZOS v3.1.0 - Support pausing workloads to allow grace period before canceling contract. - Enabled log streaming from VMs/Containers to a remote logs aggregation server. TFNode-Pilot v0.1.0 Pocket Network is a blockchain data platform built for applications that use cost-efficient economics to coordinate and distribute data at scale, enabling seamless interactions between blockchains and applications. This release's content: - Optimized node pilot by Threefold. - Deployed first version of PoktNetwork with TF Terraform Grid Provider. TFChain v1.12 - DAO support - Dedicated nodes support - General stability improvement - Reworked farming policies - Introduction of contract grace periods - Farm certificaation through DAO - New bridge code TFgrid Dashboard Tfgrid Dashboard is the mainhighlight of this release. We aim to have a simpler workflow for our Threefold users and more unified experience. The supported functionalites for this release are: - Farm management - Twin management - Dedicated nodes - Tfchain DAO - Transferring money to TFChain accounts - Swapping tokens on Binance and stellar - Exploring farms - Explorring nodes - Grid statistics service is deployed on https://dashboard.test.grid.tf Uhuru v1.4.0 (beta) - Improved mobile View - Improved multiple screen size views - Added support and usability for more browsers (Firefox, Safari, etc) - Added features on chat group management - Full backend rewrite for improved performance, stability and security TFConnect App v3.6.0 - UX rewrite on for userflows like the welcome screen, registration screen, planetary network and many more - Added Planetary network for iOS users",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_6_0.md",
    "title": "TFGrid v3.6.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_6_0",
    "content": "ThreeFold Grid v3.6 Release Note Release Note of ThreeFold Grid v3.6. It includes updates, improvements and fixes of numerous grid components as described below. TFPlayground v1.4.3 - Updated Farming Calculator - Better node-filtering mechanism by adding 'capacity' filter - Simplified K8s solution deployment by eliminating 'add ssh key' part - Improved UX for manual solution deployment on dedicated nodes - Fixed solution's post-deployment bad gateway issue. - Validation enhancements Uhuru v1.2 (beta) - Tackled the UI/UX issues and bugs. - Added many features except for main missing things such as 'logout' option. ThreeFold Wallet v3.1.0 - Enable token unlocking feature - Allow users to unlock their locked tokens via TFwallet. - Improvements and fixes included, including usability supports for iOS devices that will be greatly improved. TFConnect App v3.6.0 - Better usability and user experience through the app workflow improvements as well as - Improved design and interface, look and feel. TF Planetary Network v0.3.0 TF Planetary Network is an application that allows users to access Peer To Peer end2end encrypted global network which lives on top of the existing internet or other Peer To Peer networks created. This release's improvements: - New P2P functionalities on Desktop Client - Improved the desktop clients for planetary network by adding support for M1 version of Mac. - Allowed the application to refresh the list of ‘peers’, allowing extra ‘peers’ to be added by TF org - Debugged multiple account issues on Mac. TFTShop (GetTFT) v1.1.1 - Better usability and user experience through the app workflow improvements - Improved design and interface, look and feel, such as Improvement on TFT purchase flows on all BTC-TFT, and FIAT-TFT transactions TFGrid Proxy v1.5.0 TFGrid Proxy is a REST API-based server used to interact with TFGridDB (Database) in order to access all available node-related information. This release's improvements: - Added querying for dedicated nodes support in gridproxy API. - Added support for twins and contracts. - Added filter for dedicated nodes - Added missing queries on farms - Added country API for node distribution ZOS v3.1.0 - Support pausing workloads to allow grace period before canceling contract. - Enabled log streaming from VMs/Containers to a remote logs aggregation server. TFNode-Pilot v0.1.0 Pocket Network is a blockchain data platform built for applications that use cost-efficient economics to coordinate and distribute data at scale, enabling seamless interactions between blockchains and applications. This release's content: - Reverse-engineered the Pokt node pilot into Node Pilot Light. - Deployed first version of PoktNetwork with TF Terraform Grid Provider. TFChain v1.12 - DAO support - Dedicated nodes support - General stability improvement - Reworked farming policies - Introduction of contract grace periods - Farm certificaation through DAO - New bridge code",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_16_0.md",
    "title": "TFGrid v3.16.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_16_0",
    "content": "ThreeFold Grid v3.16.0 Release Note Zos (version: 3.12.13) Another stability release for zos - Add number of open connections to node statistics - Add location endpoint so that information can be scraped - Cleanup unused net links that limited the number of deployments on the machine - Fixed reserving and deploying with specific gpu providers (specially nvidia 4090\\) - General improvements on outgoing substrate connections from the nodes - Reworked the upgrader - support in-memory cache expiration for twindb that, that was the reason for some communications with zos nodes timing out. Milestone: https://github.com/orgs/threefoldtech/projects/212/views/5 Zoslight (version:0.2.12 ) This is the first prerelease to support zoslight, which allows easily deploying zos on cloud providers e.g Hetzner and OVH where we reworked the network layer to be compatible with these cloud providers requirements - Set public config in zoslight - Fixed listing GPUs - support of deploying on Hetzner, can find more details here https://github.com/threefoldtech/zos/issues/2506 - Fixed reserving and deploying with specific gpu providers (specially nvidia 4090\\) - Fixed the listing of private ips - Add location endpoint - Reworked the upgrader - support in-memory cache expiration for twindb that, that was the reason for some communications with zos nodes timing out. Milestone: https://github.com/orgs/threefoldtech/projects/212/views/5 tfchain/graphql (version: 2.9.3) No Change Graphql (version: 2.12.2) No Change Mycelium (version:0.5.7 ) No new release Sdk-go (version: 0.16.6) - Sentry support - Solving https://github.com/threefoldtech/tfgrid-sdk-go/issues/1118 https://github.com/threefoldtech/tfgrid-sdk-go/issues/1288 Grid-proxy (version: 0.16.6) - Fix the GPU numbers and properly list them in the node response - Track number of open connections - Rewrote the gpu indexer for more reliable GPU information - Added Location indexer for more reliable node location information - Fix listing memory types that was incorrectly shown in the dashboard - Support feature filters, which allows querying nodes based on their capabilities ## Farmerbot (version: 0.16.6) No Changes Terraform (version: 1.11.3) No Changes Pulumi (version: 0.8.1) No Changes RFS (version: 2.0.6) No Changes Threefold Connect (version: 4.2.0) This release was about 80 tickets (features or bugfixes) including - Support tfchain/stellar bridge - Support Stellar/Solana bridge - Support creating v4 farms - Enable kyc on the imported wallets - Add refresh indicator on screens Milestone https://github.com/orgs/threefoldtech/projects/212/views/13 Sdk-ts (version: 2.7.0) This release was about 140 tickets solved including - Support zos light deployments in the client - Seemless integration of zoslight deployments in the dashboard Milestone: https://github.com/orgs/threefoldtech/projects/212/views/3",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_15_0.md",
    "title": "TFGrid v3.15.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_15_0",
    "content": "ThreeFold Grid v3.15.0 Release Note ZOS - Mycelium upgrade 0.5.4 #2398 - ZDB upgrade 2.0.8 #2348 - Slowdown speed of retries in healthcheckers #2380 - Improve HDD errors on the ZUI #2376 - Add features call on ZOS #2421 - Add validation for workload's name length #2368 - Add to virtiofsd #2420 - Fix network speed tests #2325 - Supporting multiple stacks in ZOS #2372 - ZOS can now run on cloud providers e.g Hetzner #2378 - Periodically update the node location #2401 - Fix reporting Read only disks #2409 - Controlled rollout process is established in ZOS #2413 - Introduce more stability by replacing the usage of MacVlans #2403 - Restriction of outgoing traffic (NOT DONE) #2399 TFChain/GraphQL This release introduce lots of stability and bugsquashing in TFChain/GraphQL. - During the grace period, the NU consumption may be incorrectly accumulated #994 - Certified capacity paid as DIY capacity #991 - Refactor/remove lock balance logic in billing flow #990 - Contract is not getting billed #982 - What will happen to a rent contract on a grace period for an offline node #979 - Misuse of balance lock #969 - Error distributing cultivation rewards #834 - Improve off-chain worker logic #932 - Instrument billing logic to improve audibility and log all major steps #989 - Replacing the locking mechanism with a more reliable system #990 Mycelium - Desktop/Mobile applications #1544 - Stable 1.0.0 release Milestone 0.9.0 grid-proxy - Include GPU info in node response #1144 - Fix error when getting consumption for a newly created twin #1186 - Return in node reponse #1160 - Support farm public ips endpoint #1067 - Farms sorting by IPs #1125 - Added a filter for nodes that are rentable or rented by the user #1078 - Support features healthcheck that helps listing the features supported by the nodes #1214 - More strict healthcheck to filter up nodes #891 Farmerbot - Farmerbot disclaimer #1009 - Improved validations for included, excluded and priority nodes #1017 Terraform - Rename mnemonics to mnemonic #962 - Use the same k8s master's flist for all of the workers #964 - Fix no sshkey path #968 - All of the examples has mycelium network now #967 Pulumi - Python support #452 - Javascript support #453 - Add mycelium to all of the examples #483 - Validations hardening #14 - Support ZOS4 #517 sdk-go - Support of multiple stacks per network #1113 - Support of ZOS4 deploymnets #1213 - Unify kubernetes flists #1210 - Harden the validation for deployment, disk, and network names #1055 - Harden the validation of workload fields #1165 RFS - Lightweight Flist server #61 - Flist Frontend #67 - Improve Dir store for performance #52 - Implement HTTP Store #51 - Support Syncing from on location to another e.g dir to S3 - Support tracking progress while packing flists #69 Threefold Connect - More native rewrite of the application - Support of DAO - Support of Light/dark modes - KYC support For a detailed view, please check the project here. sdk-ts - KYC support, the user needs to go through KYC to be able to deploy - Monitring via Sentry integration #3101 - Support of multiple stacks #3078 - Enable SMTP settings in case of public IP of solutions #2522 - Add last deployment date to the node card #2718 - Sorting for Farms and Nodes tables #1685 - Include bandwidth cost when doing price estimates #3018 - Configure the timeout for poor internet/connectivity of the node #3169 - Separately managed domains page #3178 - Deleta All contracts button #3056 - Use te same master flist in kubernetes for all of the newly added workers #3320 > Note: Various bugfixes and UX rework can be checked in detail here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_14_0.md",
    "title": "TFGrid v3.14.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_14_0",
    "content": "ThreeFold Grid v3.14.0 Release Note ZOS - Stricter health checks for filtering nodes to deploy on. #2153 - Don't send uptime reports when the zos node can't resolve grid services. #2213 - Network tests improvements. #2163 - Exposing last deployment date. #2213 - Supporting compressed kernels (also now supported by newer version from cloudhypervisor). #2236 - Zui became more responsive. #2263 - Updating node info if the zos IP changed. #2242 - Display the right size in the microvm (not the full node disk size). #2007 - Tools to debug images/flists if they're bootable in zos. #2233 - Zos able to download/mount flists over mycelium IPs - Zos to support zdb over mycelium IPs - Support HDD only nodes TFChain/GraphQL - Runtime upgrades - Support of HDD only nodes. #967 - More validation for farms IPs - Improvements of indexing (tft price and farm policy) Grid Proxy - Sorting/querying by prices. #608 - Filters by number of gpus, region, ipv6 - Options for encoding and decoding for rmbpeer. #507 - Add farm name/ rentable / rented information to the responses. #612 #639 - Filtering nodes by multiple statuses Farmerbot - Improved capacity planning to wakeup nodes - Allowing farmers to specify the priority to wakeup nodes Pulumi - Support mycelium - Add more examples sdk-go - Support volume workload",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_13_0.md",
    "title": "TFGrid v3.13.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_13_0",
    "content": "ThreeFold Grid v3.13.0 Release Note This release having lots of features and fixes around the new dashboard and mycelium support, and more stability and healthchecks in ZOS. sdk-ts - Full rewrite of the dashboard and playground. #268 - Full rewrite for the statistics website. #467 - Support node Manual selection. #1094 - Redesign the node selection flow. #1872 - Support hex secrets in login flow (and ed25519). #1113 - Add node performance test results to node details. #1388 - Improve the contract page UX by separating the contracts by their type (node, name, and rent). #1593 - Add Nextcloud to applications. #1773 - Add logs tab. #1468 - Support mycelium on deployments. #2085 - Show deployment health status in deployment table. #2245 sdk-go Client - Mycelium integration in go-client including (grid-cli, tfrobot). #677 - Concurrent preprocessing for each network before deployment, which showed a significant performance improvements. #676 - Fix same private IPs assigned to different VMs. #457 - Fix failed batch calls to cancel contracts if count of contracts to delete > 400. #833 RMB - Add router for direct client to allow building custom servers using the RMB. #499 - Fix mismatched public keys generated by mnemonic and seed for the same twin. #551 - Introducing twin cache and how long the twin cache is kept before refreshing. #898 - Add relay cache warmer update relay's Redis cache with twins data periodically. #899 Gridproxy - Support sorting on resources based on its fields. #243 - Improve the queries by denormalizing some of the repeatedly retrieved tables. #308 - Better decoding for URL parameters with validation support. #269 - A faster GPU indexing for new registered nodes. #322 - Add node-health indexer that periodically check the reachability for nodes. #603 - Allow sorting and querying nodes by price. #608 - Various new node fields/filters (region, excluded, total_cru, owned_by, farm_name, in_dedicated_farm) Farmerbot - Rewrite farmerbot in go. #484 - Add a detailed report for the nodes of the farm used in running the farmerbot every update round. #658 - Power on any dedicated nodes if found offline. #585 TFCMD - Support new commands (get contracts details and cancel contracts). #534 - Allow getting deployments created using the dashboard in tfcmd and vice versa. #882 TFRobot - Creating a new command line tool to allow deploying mass deployments with large counts of VMs in different groups against different node groups, all using only one command. #604 Terraform - Mycelium integration. #888 - Add nomad module in terraform. #765 ZOS - Support both mycelium and yggdrasil. #2208 - Add healthcheck to report to zui for errors. #2143 - Add iperf service. #2042 - Main perf tests by. #2052 - Add cpu benchmark binary. #2053 - Add kernel version to zui. #2058 - Validate cpus according to actual number of node cpus. #2057 - Performance monitor package. #2046 - Filter out integrated GPUs. #2064 - Adds flag to disable gpu. #2067 - Add CPU benchmark task. #2066 - Vlan support. #2084 - Add cmdline param pub:mac to configure public mac. #2090 - Unify rfs and zufs pkgs. #2091 - RFS new format integration. Avoid hub specific calls by @muhamadazmy in. #2094 - Add public IPs validation task. #2070 - Fix setting the gateway and caching the request. #2100 - Add rmb diagnostics call, that will be giving insights to the tooling to do more proper planning around the nodes. #2160 - Assign ipv6 and gw6 to vm via config. #2199 - Add list and list_private_ips rmb calls. #2206 - Improve VM detection. #2105 - Clean up host keys before first boot. #2138 - Update cloud-container tolatest cloud-container. #2150 - Update yggdrasil to latest 0.5.2. #2108 - Update cache quota checker. #2152 - Update virt-what to rhel-9.3. #2191 TFChain - Allow renting standby node. #933 - Fix discount level calculation. #946 - Allowing a collective proposal (council or farmers) to cancel a contract. #884 - Upgrade to polkadot v1.0.0. #802 - Fix expired proposals outcome. #803 - Fix unrecoverable bridge transfers. #883 - Other bug fixes, client improvements, documentation improvements, and CI enhancements. Mycelium An IPv6 overlay network completely writing in Rust, developed by Threefold. The overlay network uses some of the core principles of the Babel routing protocol (https://www.irif.fr/~jch/software/babel/). Each node that joins the overlay network will receive an overlay network IP in the 400::/7 range. Please check this introduction on mycelium or the repository for detailed instructions For detailed list of features and bugfixes introduced, please check the github project for 3.13.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_12_0.md",
    "title": "TFGrid v3.12.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_12_0",
    "content": "ThreeFold Grid v3.12.0 Release Note 3.12 introduced limited number of new features including (pulumi support, mycelium) and lots of fixes across all of Grid's components. sdk-ts Playground Users should be able to attach more than one domain to a VM, edit and remove them. #1055 The user will be notified every 15 minutes if there are deployments on an offline node. #1220 Improvements of load time during listing deployments and error reporting. #1213 An error message will notify the user when contracts’ details cannot not be retrieved.#1295 Deploy button will be enabled and disabled after all verification is done.#1300 Node Id and status will be included in the contracts list.#1277 A new version of flist is supported while deploying a vm.#1322 UI Packages The PDF Signer Web Component simplifies the process of signing PDF documents and sending them to a specified endpoint. This user-friendly PDF viewer is designed to make PDF signing and processing straightforward for your web applications.#1056 The Script Editor Web Component is a powerful tool that enables developers to seamlessly integrate a code editor into their web applications. It offers essential features such as script management and code copying, making it an ideal choice for building code-related applications or platforms.#1057 sdk-go Client No changes Gridproxy Separate contracts bills in a new endpoint to speed up the contracts endpoint. The new endpoint for bills is . #356 Fix the possible duplicate records in the node table caused by the node gpu indexer. #388 Monbot Add bridges monitor that periodically do transfers between stellar and tfchain and send a report by telegram bot. #384 Add contracts monitor that periodically send notifications for contracts in grace period or contracts on down nodes. #405 Terraform No changes Pulumi Our latest addition to infrastructure as code, along with terraform, we offer a powerful solution to have a reproducible infrastructure using pulumi and Threefold. Updating a vm in Pulumi can cause a replacement to a new vm, deleting the old one if not all vm inputs are given. #37 Our Pulumi provider has been released and its available on the Pulumi registry now (latest version v3.0.0). Plugin page ZOS Mainly the performance tests reports #1454 Improvement to power mgmt Cache upgrade packages Kernel version show up in ZUI #2058 Filter out integrated GPUs #2064 Adding flag to disable GPUs #2068 Validation of allocated VCores to the VMs #2057 TFChain Improve IP validation and clean invalid public ips from TFChain storage. #869 Fix a DAO bug that allows multiple vetoes from the same council member on the same proposal. #858 Mycelium An IPv6 overlay network completely writing in Rust, developed by Threefold. The overlay network uses some of the core principles of the Babel routing protocol (https://www.irif.fr/~jch/software/babel/). Each node that joins the overlay network will receive an overlay network IP in the 200::/7 range. Please check this introduction on mycelium or the repository for detailed instructions For detailed list of features and bugfixes introduced, please check the github project 3.12.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_11_0.md",
    "title": "TFGrid v3.11.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_11_0",
    "content": "ThreeFold Grid v3.11.0 Release Note 3.11 introduced the GPU support on the grid and more stabilization on the chain and reworks of certain parts of the UI to reflect the support for the GPU. sdk-ts and UI - GPU support - Grace period notifications - Minting receipts in the dashboard support - Migration to use a local wallet - Improving the experience around custom domains management - Grouping of packages for solutions Can check the forum post for more detailed updates and the board for the exact details of issues and features Terraform GPU support: https://github.com/orgs/threefoldtech/projects/196/views/13 ZOS 3.7.x GPU Support and bugfixes can be found https://github.com/orgs/threefoldtech/projects/196/views/4 TFChain GPU Support Allowing the farmer to set extra fees on their nodes Removal of sudo pallet Chores around the documentation Link: https://github.com/orgs/threefoldtech/projects/196/views/5",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_10_0.md",
    "title": "TFGrid v3.10.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_10_0",
    "content": "ThreeFold Grid v3.10.0 Release Note Release Note of ThreeFold Grid v3.10.0. - Deployed on Mainnet on 3rd July 2023. Components and Services The following components and services have been upgraded in this release: - TFChain - ZOS - Terraform - TFGrid-SDK-GO - TF Gridclient - TF Gridproxy - RMB - TF Weblets - TF Playground - TF-Grid-CLI - Gridify - TFGrid-SDK-TS Upgrades and Improvement Highlights Below are some of the key highlights of the TFGrid v3.10.0 component upgrades and improvements. TFChain 2.4.0 - Addressed syncing issues. - Introduced the attachment of solution provider IDs to contracts. - Enabled the bonding of a stash account to a twin. - Implemented various bug fixes. ZOS 3.7.1 - Restructured the capacity to enhance dynamism. - Added support for proxying traffic to private networks using WireGuard-based gateways. - Introduced support for cloud-based consoles. - Resolved various issues related to error messages, user validations, and error handling. Terraform 1.9 - Added support for WireGuard-based gateway options. - Implemented proper timeout handling for deployments. - Introduced gateway node validation before submitting deployments. - Resolved various bugs and issues. TFGrid-SDK-GO 0.8.0 - Consolidated multiple Go projects into a single repository for simplified administration and quicker releases. - Extracted reusable code from the Terraform project and created a standalone library for creating new platforms or plugins. Grid-Client - Enhanced the grid client to serve as the foundation layer for the Terraform plugin, enabling deployment of networks, virtual machines, and Kubernetes. Grid-Proxy - Added support for standby status for nodes powered off by the farmerbot. - Enabled farm filtering based on requested resources. RMB - Improved the direct client's resilience to recover from close connections. TF-Grid-CLI - Introduced a simple tool for creating virtual machines and Kubernetes clusters. Note that is now . - Get started here. Gridify - An experimental project that allows developers to deploy their projects on ThreeFold as a platform with a single command, \"gridify,\" using a Procfile in their code repository. - Currently supported platforms include: - Go 1.18 - Python 3.10.10 - Node 16.17.1 - NPM 8.10.0 - Caddy - Learn more here. TFGrid-SDK-TS 2.0.0 - Consolidated all components targeting web/TypeScript developers and frontend efforts into a single repository for easier management and rapid releases. - Moved gridclient, dashboard, statistics websites, and other TypeScript-based projects to the new repository here. Grid-Client - Gateways now support WireGuard backends. - Added support for hex secrets. - Various fixes are detailed here. TF Dashboard - Added support for IPv4 pricing in the resources calculator. - Included TFT/USD exchange rate in the dashboard navbar. - Introduced new standby status for nodes powered off by the farmerbot. - In the explorer, a node monitoring page is now available. - Fixed high CPU usage in the DAO Pages. - Tracking improperly set serial number on nodes with a clear message. TFGrid Weblets - We are phasing out the TFGrid Weblets for a newer playground rewritten in vue3, however, we introduced some maintenance bugfixes. - Support umbrel on the grid. TF Playground v2.0.0 This release introduces a new playground with a more consistent user experience. Some components have been reworked for consistency. - Simplified the profile manager, requiring only the provision of a mnemonic and a password for encryption on the device. Mnemonics are never shared or sent across the network. - Real-time calculation of deployment costs. - Ability to generate WireGuard configurations. - Direct link to the monitoring page of a deployment’s hosting node. RMB 1.0.5 - Deprecated seed flag.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_0_a5.md",
    "title": "TFGrid v3.0.0 Alpha-5",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_0_a5",
    "content": "ThreeFold Grid v3.0.0 Alpha - 5 Release Note This is the release note of TFGrid v3.0.0 Alpha 5. It includes updates, improvements and fixes of numerous grid components as described below. TFT Shop v1.1.0 On the first initial release of TFT Shop v1.0.0, we have made it easier for users to buy TFT by BTC on the TFT Shop website. On this v1.1.0 release, we are giving users another option to buy TFT by using fiat currency. This is made possible by integrating mercuryo.io (third-party) widget onto the shop. By buying TFT using TFT Shop, you confirm that you have read and agree to ThreeFold’s terms and conditions. ZOS v3.1.0 Performance Improvements This new feature release of ZOS v3.1.0 includes a lot of improvements such as improvements on performance issues (disk and IO), grid events handling, and improvement on the current yggdrasil network by start and maintaining our public peers. ZOS Supoort Dedicated Nodes To empower community-driven decentralization on the TFGrid, we would like to soon invite anyone to deploy their own solutions on the TFGrid. This is feasible to do by allowing any external developers to deploy their own workloads on dedicated nodes and provide the deployment documentation. By choosing to deploy on dedicated nodes, a user can reserve an entire node, then use it exclusively to deploy solutions for themselves or for other customers. Therefore on this release we are happy to announce that we are supporting dedicated nodes deployment, apply the dedicated node contracts on TFChain and support mechanism on ZOS' next release. TF Playground v3.0.0 Alpha-5 New community and blockchain solutions On the last release, we have added new deployable community solutions on TF Playground, such as Peertube, Funkwhale and Taiga, Mattermost as well as some developer tools like CapRover, Virtual Machine, Kubernetes and Owncloud. On this release, we have added community and blockchain solutions such as Discourse (forum), Presearch Node and Casperlabs validator node. Uhuru v1.1 (beta) Uhuru Backend Changes Uhuru is a digital product on top of a the TFGrid that enhance collaboration with features such as chat, videocall, office tools, and file storage, all in one platform. ThreeFold Wallet v3.0.0 Add (substrate-based) TFChain Wallet TFGrid v3 is powered by substrate-based blockchain. A TFT is moveable from Stellar blockchain to TFChain through the use of a bridge.ThreeFold Wallet now has successfully added (substrate-based) TFChain Wallet in order to support the bridge transaction. However, TFT is still the native currency on TFChain. As such, there is no need for an external service to transfer tokens on TFChain. A transaction fee is charged (currently 0.01 TFT) for every transaction/extrinsic call. TF Farm Management Tool v3.0.2 Adjust farm management for the latest TFChain upgrade On the last release of 3 alpha-4, we have released Farm Management Tool v3.0.1 which allows farmers to migrate their farms from v2 to v3 through the TF Connect application. Recently a change was made within the codes of TFChain, thus broke the farm management function in the wallet. Therefore, on the v3.0.2 release, code changes were done on Farm Management Tool to adapt itself with TFChain changes. This was done quickly in production. TFConnect App v3.5.0 Generic Frontend and Backend Improvements This new feature release of TFConnect App includes new features such as enabling user to sign documents on the app directly, and many other backend improvements. Integrate TFConnect SSO to TFPlay Solutions We need to simplify peer-to-peer collaboration and how users interact with their TFPlay solutions. On this release, we have eliminated a complicated way of signing up to solutions (emails, username and password) by replacing it using TFConnect app SSO login. Therefore on this release, we successfully created TFConnect Native SSO backend environments for the following TFPlay solutions: Discourse. Mattermost, and Gitea, that will allow users to sign in and start using the solutions with just few clicks. TFChain v1.2.0 ThreeFold DAO Pt. 2: Adjoint Validator-Council member request From version 3.0 on, ThreeFold Grid operates as a DAO. On the last release of TFChain v1.0.0, we have successfully implemented The first TF-DAO that allows users to request to become DAO council members. On this release we also have successfully implemented ThreeFold DAO Request part 2 where any user could request to become an adjoint validator-council member: by running a a validator node, not only that they become a validator, they would also gain a seat as DAO council member that give them the right to vote for organizational changes. ThreeFold DAO Pt. 2: Enable Validator Application On this release we implemented ThreeFold DAO Request part 2 any user could apply to become a validator and register the validator application on-chain if they meet the validator requirements.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_0_a4.md",
    "title": "TFGrid v3.0.0 Alpha-4",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_0_a4",
    "content": "ThreeFold Grid v3.0.0 Alpha - 4 Release Note TFConnect v3.4.0 TFConnect Backend Services Migration We moved ThreeFold Connect’s backend services from a data storage in Lochristi to TFGrid. From TF Wallet, to TF account, and TFNews, all active services are migrated by using Helm charts. TFPlay v1.1.4 Listed Mattermost as Deployable Solution On this release, we added Mattermost as one of our deployable decentralised solutions. Mattermost is a secure, open source platform for communication, collaboration, and workflow orchestration across tools and teams. Separated TFPlay into 3 different networks Node upgrades could happen anytime, and it could make solution deployments on different networks incompatible. Therefore, we separated TFPlay into 3 different networks: - Deployment on TFGrid Mainnet: play.grid.tf - Deployment on TFGrid Testnet: play.test.grid.tf - Deployment on TFGrid Devnet: play.dev.grid.tf This way, if some nodes on one network are being upgraded, deployments on the other nets should not be affected. Minting v3.0 Minting V3 code Repo: https://github.com/threefoldtech/minting_v3 There was a change the way how the CU/SU are calculated from the resource units calculations, please see https://library.threefold.me/info/threefold#/resource_units_calc_cloudunits for details. Therefore, we updated the calculations on the minting code (minting v3), as well as adjusted price calculation for workloads on TFchain. GetTFT Shop v1.0.4 Story: https://github.com/threefoldtech/home/issues/1171 Minor UX / UI improvements On this release we created minor UX improvements on the existing GetTFT Shop website that create a better experience for our customers, such as improved interactivity, fixed embedded media, revised UX content, improved screen responsiveness, and many more. TF Capacity Explorer v0.1.0 An all-in-one Unified Capacity Explorer Currently we have a few separate capacity explorers for both TFGrid v2 Explorer and TFGrid v3 Explorer. On this release we unified all versions and networks into one explorer, where users can find capacity information on both TFGrid v2 and v3 mainnet, testnet, and devnet. This all-in-one unified Capacity Explorer will be hosted under the domain https://explorer.threefold.io. TF Farm Management v1.1 On TFGrid v3, node and farm management are also moved to substrate-based blockchains. A farm can be managed by making calls directly to the blockchain using objects created in TFChain called Twins. TFWallet app can reuse the wallet keypair to support a twin. A twin is also associated with a Planetary Network address that is supported by the Threefold Connect App. Therefore we added a ‘Farm Management’ feature on the TFConnect App that would enable farmers to list their farms and create new ones directly on the mobile app. The ‘Farm Management’ feature will allow users to create new farms, list farms, as well as migrate their farms from TFGrid v2 to TFGrid v3.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_0_a2.md",
    "title": "TFGrid v3.0.0 Alpha-2",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_0_a2",
    "content": "ThreeFold Release Notes TFGrid 3.0.0 Alpha 2 (Live on testnet) TFChain v1.0.0 - DAO Requests - Becoming council member - Becoming a validator node - Pricing changes - Upgrading tfchain - Changing farming rewards Admin Portal v3.0.1-rc1 - Terms and conditions support - Fix reasking for activation when the balance reaches 0 - Show amount of bridge deposit/withdraw fee - Get more TFT button when connected to devnet tfchain explorer v3.0.0-rc19 - certification type filter - adding certification type to nodes - add zos version to node details - update map to reflect the selected node - UX fixes for filters and data sorting - include version of tfchain, explorer, grid proxy - showing available resources - showing online / offline nodes - showing number of available IPs in a farm - adding favicon - statistics page improvements ZOS v3.0.4 - public IPv6 support - Min rootfs for more than 1 CU = 2GB, and anything less will be 500MB - Mainnet image - Fix IPv6 rules that broke SLAAC - Update SRU calculation - bug don't wait for QSFS shutdown - Update traefik version - Fixing crashes caused by slow disks - Avoid lsblk blocking for QSFS - Decommission on too many QSFS metric fetches failure https://github.com/threefoldtech/zos/releases Terraform v0.1.20 - Support for public IPv6 - Support planetary option for k8s grid3_client_ts v1.0.3 - Cert type for nodes - public IPv6 support - TwinServer command to be used from other langauges Weblets v1.2.0 - Support peertube - Support funkwhale - Remove rootfs specification from machine - Support adding/deleting workers in kubernetes - Add more images ubuntu, alpine, centos - Updating the balance periodically - Adding access for nodes by default for hidden nodes issues - Resolving issues detailed projects list - - - - - - QSFS TODO gridproxy v1.0.0-rc8 - generic performance improvements - reduce caching time - enable CORS in version - include certification types in nodes - fix regression on nodes query - Known Issues 3.0.0 Alpha 2 Following list is incomplete but gives some issues to think about. - Weblets limitations - QSFS integration is a work in progress - ZOS and SSD performance issue - Threefold Connect having issues - Docker & ZOS containers differences - ZOS workloads upgrade issue - Terraform projects don't reflect in the weblets - Can't detach public IP from a VM and removing it from a contract issue, please note you can still create each in separate contracts. ThreeFold Release Notes TFGrid 3.0.0 Alpha 1 (Live on mainnet) - TFgrid 3.0 announcement - Whats new in TFGrid 3.0 - Roadmap - TFChain - Staking support (as the moment of this writing it's only on devnet now) - KeyValue store support - Bridging tokens from stellar to tfchain - Smart contract for IT - Billing - Consumption Reports - Discounts support Admin Portal - Creation of twins - Bridge from and to Stellar - Farm Management Tfchain explorer - Nodes view - Gateways listing - Farms information - Resources/utilization - Better filtering ZOS - zmachine support - Integration with latest subtsrate client event types - public ipv6 support in VMs - planetary support in VMs - upgrade to new file system RFS - support for QSFS - support for gateways - capacity reporting to the blockchain support - Support of SR25519 - Improvements in .zosrc creation - Safer mechanism for environment variables and init arguments - improvments in cleaning unused mounts Terraform - Support ZMachine - Support Kubernetes - Support QSFS - Support Capacity Planning - Support Gateways grid3_client_ts - Support ZMachine - Support Kubernetes - Support QSFS - Support Capacity Planning - Support Gateways Weblets - Support Profile manager - Support Virtual machine - Support CapRover - Support Kubernetes - Capacity planning deployment QSFS TODO - TFgrid 3.0 announcement - Whats new in TFGrid 3.0 - Roadmap Known Issues 3.0.0 Alpha 1 Following list is incomplete but gives some issues to think about. - Weblets limitations - Public IP6 support in ZOS - QSFS integration is a work in progress - ZOS and SSD performance issue - Threefold Connect having issues - Docker & ZOS containers differences - ZOS workloads upgrade issue - Terraform projects don't reflect in the weblets - Can't detach public IP from a VM and removing it from a contract issue, please note you can still create each in separate contracts.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/tfgrid_release_3_0.md",
    "title": "TFGrid v3.0.0",
    "url": "/labs/knowledge_base/releasenotes_readme/tfgrid_release_3_0",
    "content": "TFGrid release 3.0 TFGrid 3.0 will be released gradually during Q3/Q4 2021. What's new ? TFGrid 3.0 is a full redesign of the ThreeFold Grid architecture. The main purpose of this redesign is to decentralize all the components that the Grid is built with. TFChain 3.0 A decentralised chain holding all information on entities that make up the ThreeFold Grid. It runs on Parity Substrate blockchain infrastructure. Features : - Your identity and proofs/reputation on our blockchain - All info about TFGrid (nodes, farmers, …) - A Graphql interface to be able to query the blockchain - Support of side chains (unlimited scalability, allow others to run their own blockchain) - TFT exists now also on TFChain (allows us to work around Stellar scalability issues) - Bridge between TFT on Stellar and TFT on TFChain (one way to start) - Blockchain based provisioning process - TFChain API (javascript, golang, vlang) - Support for 'Infrastructure as Code' : IAC frameworks - Terraform - Kubernetes, Helm, Kubernetes - Ansible (planned for Q4 2021) - Use RMB = peer2peer secure Reliable Message Bus to communicate with Zero-OS Proof of Utilization - Resource utilisation is captured and calculated on hourly basis - Resource utilisation stored in TFChain - An automated discount system has been put in place, rewarding users who pre-purchased their cloud needs. Price discounts are applied, in line with amount of TFT you have in your account and the period you are holding these TFT. E.g. if you have 12 months worth of TFT in your account in relation to the last hour used capacity you get 40% discount, 36 months results in 60% discount. New Explorer UI - An updated User Interface of the TF Grid Explorer, nicer and easier to use - It uses the Graphql layer of TFChain Roadmap The feature overview split over different releases can be found here. More info and announcements on Grid 3.0 to be found on our forum",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/releasenotes_readme/releasenotes_readme.md",
    "title": "Release Notes",
    "url": "/labs/knowledge_base/releasenotes_readme",
    "content": "ThreeFold Grid Release Notes We're delighted to have you here as we explore the latest updates and enhancements to our decentralized grid ecosystem. In these release notes, you'll discover a wealth of information about the exciting features, bug fixes, performance optimizations, and new functionalities that have been introduced in each release. Whether you're a developer, a farmer, a user, or simply curious about the cutting-edge advancements happening in the world of distributed computing, these release notes will provide you with valuable insights and keep you up to date with our progress. So dive in, explore the details, and join us in shaping the future of the ThreeFold Grid! ThreeFold TFGrid v3.x Release Notes - TFGrid v3.16.0 - TFGrid v3.15.0 - TFGrid v3.14.0 - TFGrid v3.13.0 - TFGrid v3.12.0 - TFGrid v3.11.0 - TFGrid v3.10.0 - TFGrid v3.9.0 - TFGrid v3.8.0 - TFGrid v3.7.0 - TFGrid v3.6.1 - TFGrid v3.6.0 - TFGrid v3.0.0 Alpha-5 - TFGrid v3.0.0 Alpha-4 - TFGrid v3.0.0 Alpha-2 - TFGrid v3.0.0",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/farming_toc/proof_of_utilization.md",
    "title": "Proof-of-Utilization",
    "url": "/labs/knowledge_base/farming_toc/proof_of_utilization",
    "content": "Introduction The ThreeFold Grid employs a unique mechanism called __Proof of Utilization__ to track and measure resource utilization within its decentralized network. We provide here an overview of this mechanism. Overview Proof of Utilization is a system that records resource usage on an hourly basis and serves as a transparent and reliable way to validate and verify the utilization of various components of the grid. The Proof of Utilization concept encompasses the monitoring and tracking of three key types of resources within the ThreeFold Grid:__Compute Resources (CU)__, __Storage Resources (SU)__, and __Network resources (NU)__. These resources are essential for supporting the diverse needs of users and applications on the grid. CU, SU, NU __Compute resources (CU)__ refer to the computational power and processing capabilities provided by the ThreeFold Grid. This includes the ability to run applications, execute tasks, and perform complex computations in a distributed and decentralized manner. __Storage resources (SU)__ encompass the capacity to store and manage data within the ThreeFold Grid. It enables users to securely store and retrieve their data, ensuring reliable and scalable data management solutions. __Network resources (NU)__ focus on the network connectivity and bandwidth available within the ThreeFold Grid. This includes the transmission of data, communication between nodes, and facilitating the seamless flow of information across the decentralized network. In addition to the resources mentioned above, the Proof of Utilization system also tracks network utilization parameters such as __IPv4 addresses__, __DNS services__, and __name-on-web gateways__. These elements play a crucial role in enabling effective communication and accessibility within the ThreeFold Grid.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/farming_toc/proof_of_capacity.md",
    "title": "Proof-of-Capacity",
    "url": "/labs/knowledge_base/farming_toc/proof_of_capacity",
    "content": "> Note: The proof-of-capacity parameters will be updated for the next 3.14 grid release. Stay tuned. Introduction The ThreeFold Blockchain (TFChain) uses work algorythm called \"Proof-of-Capacity\" to verify the Internet capacity provided by 3Nodes. Put simply, PoC verifies, on an ongoing basis, that farms are honestly representing the Internet capacity they provide to the network. What is proof-of-capacity? POC allows ThreeFold Farmers to earn reward according to their contribution. Farming is the \"work\" itself, the act of providing Internet capacity to the network and making it accessible via our TFDAO and TFChain. The PoC algorythm records four different types of Internet capacity: - Compute Capacity (CPU) - Memory Capacity (RAM) - Storage Capacity (SSD/HDD) - Network Capacity (Bandwidth, IP Addresses) Why proof-of-capacity? PoC comes with a number of benefits, including: - Energy efficiency: earning reward in form of TFT does not waste energy. - Lower barriers to entry with reduced hardware requirements: no need for elite hardware to stand a chance for earning rewards. - Decentralized: allows anyone to connect a 3node to the network. TFGrid runs as a DAO. The main advantage of PoC to farmers it makes it really easy to run a 3Node. It doesn't require huge investments in hardware or energy and everyone earns a fair reward for their contribution. It is more decentralized, allowing for increased participation, and more 3Nodes doesn't mean increased returns, like in mining. How does Proof-of-Capacity work? 1. A farmer boots hardware with Zero-OS (multiple boot methods available). 2. Zero-OS is a low level OS, with no shell, farmers cannot access Zero-OS. 3. Zero-OS reports used IT capacity towards TFChain. 4. TFChain and TFDAO will calculate rewards as required for the farmer (TFGrid 3.1.x). 5. The required TFT are minted on Stellar and sent to the account of the farmer on Stellar. 6. Everyone can use the ThreeFold Node Finder to see where capacity is available. This info comes from the TFChain. PoC Rewards 100% of specified farming rewards goes to the farmer. Farming Reward Calculation Each 3Node has certain amount of compute, storage and network resources: - Compute Capacity (CPU) - Memory Capacity (RAM) - Storage Capacity (SSD/HDD) - Network Capacity (Bandwidth, IP Addresses) For making this Internet Capacity available, Farmers are rewarded with TFT. The amount of resources availabe in a 3Node are translated into compute units (CU), storage units (SU), Network units (NU) and IP addresses (IPAddr) to calculate farming rewards. See also Cloud Units Calculation For Farming. > Unless explicitly specified otherwise, calculations of \"gigabytes\" use base > 1024. That is, 1 GB is equal to 1073741824 bytes. The formula to calculate farming rewards is the following: The below table expands on CU, SU, NU and IPAddr and their farming rewards: | Unit | description | v3 farming rewards in TFT | | ------------------- | ----------------------------------------------------------------- | ------------------------- | | Compute Unit (CU) | typically 2 vcpu, 4 GB mem, 50 GB storage | 30.00 TFT/month | | Storage Unit (SU) | typically 1 TB of netto usable storage | 12.50 TFT/month | | Network Unit (NU) | 1 GB of data transfered as used by TFGrid user for Public IP Addr | 0.38 TFT/GB | | Public IPv4 Address | Public IP Address as used by a TFGrid user | 0.06 TFT/hour | > The rewards above are calculated according to the current TFT to USD price in TFChain of 0.08. TFDAO is responsible to change this price in accordance to the current market and liquidity. The above farming rewards apply for 3Nodes registered in TFChain for ThreeFold Grid v3. Anyone can calculate their potential rewards using the Farming Reward Simulator. The same CU, SU, NU and IPAddr principles apply to the sales of Internet capacity in the form of cloud units. Reward Simulator You can use the Dashboard Farming Calculator to simulate capacity rewards. To simulate rewards, follow those steps: - Access the Farming Calculator on the Dashboard via this link - Choose - Enter your node specs in the calculator - Set the TFT selling price in - Check the rewards over a given period of time > Note: Capacity rewards are sent to Stellar chain.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/farming_toc/poc_dao_rules.md",
    "title": "PoC DAO Rules",
    "url": "/labs/knowledge_base/farming_toc/poc_dao_rules",
    "content": "> Note: The proof-of-capacity DAO rules will be updated for the next 3.14 grid release. Stay tuned. Introduction - The CU/SU reward gets expressed in TFT and registered in TFChain at 3Node registration time - For certified Nodes, the CU/SU reward was specified at sales/promotion time, this process is managed by ThreeFold. - CU/SU rewards are calculated from Resource Units - Certified Node gets 25% more farming rewards - TFT pricing is pegged to USD (pricing changes in line with TFT/USD rate) - Rewards for NU and IP Addresses are dynamic - The TFChain tracks capacity utilization and as such the reward can be calculated for the Farmer - All Internet capacity farmed is rewarded on a monthly basis according to minimum service level agreements - Minimum SLA = Service Level Agreement (see special section about SLA) needs to be achieved before TFT can be rewarded Technical Farming Requirements - Make sure you have 50GB SSD capacity min available per logical core (physical core times number of threads it can run), if not your calculated CU will be lower. - Make sure your network connection is good enough, in future it will be measured and part of the Service Level Agreement. Minimum requirement Service Level Agreement (SLA) Minimal SLA's need to be achieved before the farming reward can be earned (uptime, bandwidth, latency, ...). This is not yet fully implemented. More service levels agreements will be required, the DAO will decide on those changes. Requests can be made by everyone by means of GEP. Some Ideas - minimal uptime - minimal bandwidth requirement - minimal network latency requirement - minimal distance between Certified Nodes for the super node concept - different uptime requirement for Certified vs DIY nodes If SLA (Service Level Agreement) was not achieved for 3 consecutive months, then the 3Node will have to re-register which means the CU/SU reward will be recalculated at that time and re-registered in TFChain for that node, just like a new one. Important Information around TFT USD Price Used at Registration This is for mainnet TFGrid 3.0: - The TFT USD price used at 3Node registration at launch of mainnet is hardcoded in TFChain 3.0 at 0.08 USD per TFT (TFChain 3.0 as used in Jan 2022). - Once the DAO is life, a new price will be approved by the DAO voters. Idea is to have this price re-visited more or less once a month, if needed faster. - The TFT USD price used at 3Node registration is defined by the TFDAO at least once a month by means of GEP. Suggested: improvements to proof-of-capacity Suggestions will be made to improve PoC, the DAO will have to come to consensus before changes can be made. - How to deal with a situation where a 3node adds or removes compute or storage capacity. - ThreeFold is developing a way of how to detect possible fraud on PoC using TPM chip and dynamic generated code to execute random PoC checks. - If PoC finds fraud e.g. trying to fake Internet capacity provided, the 3Node will be disabled automatically by Zero-OS and flagged as fraudulant. The Farmer will then have to re-register with a lower reputation for transparancy to the ecosystem. If TFTs are staked at that time, they will be locked permanently. - How to improve the calculation of CU rewards to mitigate the difference in power provided between new and old hardware. TFGrid is a DAO - All of above information is public and can be see by everone of the community as per 3Node and Farmer (part of TFChain). - Farming rewards methodology can and probably will get revised if the community wants this, DAO consensus needs to be achieved before changes can happen, this happens by means of a GEP. Grid Enhancement Proposal - Changes to above described mechanism or any other change request for the TFGrid is managed by grid enhancement proposals (GEP). - Because we are a DAO, everything is open for change as long as consensus of community in accordance of TFDAO has been achieved.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/farming_toc/farming_toc.md",
    "title": "Farming",
    "url": "/labs/knowledge_base/farming_toc",
    "content": "Farming This section covers the essential information concerning ThreeFold Farming. To farm on the ThreeFold Grid, refer to the Farmers section. TABLE OF CONTENTS - Farming Rewards - Proof-of-Capacity - Proof-of-Utilization - PoC DAO Rules",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/farming_toc/farming_reward.md",
    "title": "Farming Rewards",
    "url": "/labs/knowledge_base/farming_toc/farming_reward",
    "content": "Introduction The amount of TFT earned by farmers is relative to the amount of compute, storage or network capacity they provide to the ThreeFold Grid as recorded by the proof-of-capacity algorythm. This section covers some farming and token reward basics. How do farmers earn TFT? ThreeFold Blockchain (TFChain) rewards farmers for providing Internet capacity and expanding the ThreeFold Grid. They earn TFT. When successfully verified by proof-of-capacity, farmers earn TFT according to the amount of Internet capacity registered in TFChain. Proof-of-Capacity The Proof-of-Capacity records Internet resources from the 3Node: The ThreeFold Blockchain (TFChain) uses work algorythm called \"Proof-of-Capacity\" to verify the Internet capacity provided by 3Nodes. Put simply, PoC verifies, on an ongoing basis, that farms are honestly representing the Internet capacity they provide to the network. See Proof-of-Capacity in action by visiting the ThreeFold Grid Node Finder which represents the best resource to view POC-related data. What is proof-of-capacity? POC allows ThreeFold Farmers to earn reward according to their contribution. Farming is the \"work\" itself, the act of providing Internet capacity to the network and making it accessible via our TFDAO and TFChain. The PoC algorythm records four different types of Internet capacity: - Compute Capacity (CPU) - Memory Capacity (RAM) - Storage Capacity (SSD/HDD) - Network Capacity (Bandwidth, IP Addresses) Why proof-of-capacity? PoC comes with a number of benefits, including: - Energy efficiency: earning reward in form of TFT does not waste energy, farming TFT is a carbon_negative operation. - Lower barriers to entry with reduced hardware requirements: no need for elite hardware to stand a chance for earning rewards. - Decentralized: allows anyone to connect a 3node to the network. TFGrid runs as a DAO. The main advantage of PoC to farmers it makes it really easy to run a 3Node. It doesn't require huge investments in hardware or energy and everyone earns a fair reward for their contribution. It is more decentralized, allowing for increased participation, and more 3Nodes doesn't mean increased returns, like in mining. How does Proof-of-Capacity work? 1. A farmer boots hardware with Zero-OS (multiple boot methods available) 2. Zero-OS is a low level OS, with no shell, farmers cannot access Zero-OS 3. Zero-OS reports used IT capacity towards TFChain 4. TFChain and TFDAO will calculate rewards as required for the farmer (TFGrid 3.1.x) 5. TFChain will mint the required TFT and send them to account on TFChain of TFFarmer. 6. Everyone can use the ThreeFold Node Finder to see where capacity is available. This info comes from the TFChain. > DISCLAIMER: ThreeFold organizes this process. This process is the result of the execution of code written by open source developers (Zero-OS and minting code) and a group of people who checks this process voluntarily. No claims can be made or damages asked for to any person or group related to ThreeFold like, but not limited to, the different councils. This process changes for TFGrid 3.X once the TFDAO is fully active. > Important note: The ThreeFold Token (TFT) is not an investment instrument. > TFTs are used to buy and sell IT capacity on the ThreeFold Grid. > More info: see Proof of Capacity DAO rules",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/contribute.md",
    "title": "How to Contribute",
    "url": "/labs/knowledge_base/collaboration_toc/contribute",
    "content": "Quick Method: Create an Issue If you've found some issues or typos in the ThreeFold Manual, feel free to create an issue on the ThreeFold Manual repository to let us know. We will then be able to fix it as soon as possible. The steps are simple: Go to the issues section of ThreeFold Manual repository on GitHub Click on Choose an appropriate title Explain briefly the issue you found Click Advanced Method: Create a Pull Request If you found an issue in the manual and you wish to fix the issue yourself, you can always fork the repository and propose the changes in a pull request. We present the main steps in this section as well as further details on how to proceed efficiently. Main Steps to Add Content We present here the main steps to add content to the Threefold Manual by forking the repository to your own Github account. Go to the Threefold Manual repository: https://github.com/threefoldtech/info_grid Fork the Development branch On the top right corner, click Make changes in the forked repository To add a new section Add a new Markdown file to the appropriate directory under Update the sidebar configuration in if needed To modify an existing section: Make the changes directly in the Markdown file Test your changes locally Clone your forked repository: Install dependencies and start the development server: The development server will start automatically at http://localhost:3000 Make changes and see them live-reload in your browser Ask for a pull request In the forked repository, click Once the pull request is accepted, the changes will be available on the live site Note: You can update your forked repository by clicking . How to View the Site Locally To view the site locally and test your changes: 1. Install dependencies and start the development server: This will: - Update pricing values from external sources - Start the development server with live reloading - Open the site in your default browser at http://localhost:3000 2. To build the site for production: 3. To clean build artifacts:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/collaboration_toc.md",
    "title": "Collaboration",
    "url": "/labs/knowledge_base/collaboration_toc",
    "content": "ThreeFold strongly believes in the power of open-source projects and community-driven collaboration. The following documentation is ideal for anyone who wants to know ways to collaborate to the ThreeFold ecosystem. To become a farmer, a developer or a sysadmin on the ThreeFold, read the documentation. TABLE OF CONTENTS - How to Contribute - Development Process - Collaboration Tools - How to Test - Code of Conduct",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/code_conduct.md",
    "title": "Code of Conduct",
    "url": "/labs/knowledge_base/collaboration_toc/code_conduct",
    "content": "Introduction: Collaboration Manifest FreeFlow nation created this collaboration manifest which can be freely used by any organization who finds them useful. If you would like to see any changes to this document please email to info@freeflownation.org. We at ThreeFold want to follow these guidelines. This document has been created honoring the FreeFlow Nation Manifesto. Code of Conduct Forum & Chat Rules We are committed to making participation a harassment-free experience for everyone, regardless of level of experience, gender, gender identity or expression, sexual orientation, disability, personal appearance, race, ethnicity, age, religion, or nationality. Examples of unacceptable behavior include, but are not limited to: Use of sexualized language or imagery Personal attacks Trolling or insulting/derogatory comments Public or private harassment Publishing private information without explicit permission (e.g. physical or electronic address) Moderation Rights Content moderators have the right and responsibility to remove, edit, or reject all posts, comments, and other contributions that are not aligned to this Code of Conduct. They may also suspend or ban any forum member for behaviors that they deem inappropriate, threatening, offensive, or harmful. By adopting this Code of Conduct, moderators commit themselves to fairly and consistently applying these principles to every aspect of managing this community. Moderators who do not follow or enforce the Code of Conduct may be permanently removed from the moderation team. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by flagging the post or comment in question. All complaints will be reviewed and investigated and will result in a response deemed both necessary and appropriate to the circumstances. Moderators are obligated to maintain confidentiality regarding the identity of the reporting party. The forum is a place where we bring people together that share the same values and want to make the world a better place. Positive feedback is well appreciated but must always stay respectful and helpful. Moderators thus have the right to remove any posts spreading negativity and/or attacking the project and its founders. Contribution We welcome everyone to contribute and thank you for your content contribution. Content can be chat, questions, answers, blogs, articles, knowledge base information, tutorials, … The more people collaborate the more relevant set of information will be created. Creating content constitutes your agreement to release submitted content as public domain (CC0 10 4). Keep It Simple and Relevant Overload of information is maybe even worse as not enough information. Please keep your discussions and contributions information-rich. If your signal-to-noise ratio gets too low, you will be muted or banned from the forum or relevant chat. This is up to the discretion of ThreeFold moderators. Content Verification Guidelines We believe it’s in the best interest of our community to know the origin and authenticity of any information contributed. We want to do everything possible to verify the authenticity of the content created (e.g. messages, knowledge-base, chats, etc.). As such it’s our right to block a contributor from creating any content if identity cannot be verified. Freedom of Speech. We believe in freedom of speech as long as it’s not in contradiction with our Content Verification Guidelines. Contribution Guidelines This is a Civilized Place for Public Discussion Please treat this discussion forum with the same respect you would a public park. We, too, are a shared community resource — a place to share skills, knowledge and interests through ongoing conversation. These are not hard and fast rules, merely guidelines to aid the human judgment of our community and keep this a clean and well-lighted place for civilized public discourse. Improve the Discussion Help us make this a great place for discussion by always working to improve the discussion in some way, however small. If you are not sure your post adds to the conversation, think over what you want to say and try again later. The topics discussed here matter to us, and we want you to act as if they matter to you, too. Be respectful of the topics and the people discussing them, even if you disagree with some of what is being said. One way to improve the discussion is by discovering ones that are already happening. Spend time browsing the topics here before replying or starting your own, and you’ll have a better chance of meeting others who share your interests. Be Agreeable, Even When You Disagree You may wish to respond to something by disagreeing with it. That’s fine. But remember to criticize ideas, not people. Please avoid any of the following: Name-calling Ad hominem attacks Responding to a post’s tone instead of its actual content Knee-jerk contradiction Instead, provide reasoned counter-arguments that improve the conversation. Your Participation Counts The conversations we have here set the tone for every new arrival. Help us influence the future of this community by choosing to engage in discussions that make this forum an interesting place to be — and avoiding those that do not. The forum we use (Discourse) provides tools that enable the community to collectively identify the best (and worst) contributions: bookmarks, likes, flags, replies, edits, and so forth. Use these tools to improve your own experience, and everyone else’s, too. Let’s leave our community better than we found it. If You See a Problem, Flag It Moderators have special authority: they are responsible for this forum, but so are you. With your help, moderators can be community facilitators, not just janitors or police. When you see bad behavior, don’t reply. It encourages bad behavior by acknowledging it, consumes your energy, and wastes everyone’s time. Just flag it. If enough flags accrue, action will be taken, either automatically or by moderator intervention. In order to maintain our community, moderators reserve the right to remove any content and any user account for any reason at any time. Moderators do not preview new posts: the moderators and site operators take no responsibility for any content posted by the community. Always Be Civil Nothing sabotages a healthy conversation like rudeness: Be civil. Don’t post anything that a reasonable person would consider offensive, abusive, or hate speech. Keep it clean. Don’t post anything obscene or sexually explicit. Respect each other. Don’t harass or grief anyone, impersonate people, or expose their private information. Respect our forum. Don’t post spam or otherwise vandalize the forum. These are not concrete terms with precise definitions — avoid even the appearance of any of these things. If you’re unsure, ask yourself how you would feel if your post was featured on the front page of the New York Times. This is a public forum, and search engines index these discussions. Keep the language, links, and images safe for family and friends. Keep It Tidy Make the effort to put things in the right place, so that we can spend more time discussing and less time cleaning up. In brief: Don’t start a topic in the wrong category. Don’t cross-post the same thing in multiple topics. Don’t post no-content replies. Don’t divert a topic by changing it midstream. Don’t sign your posts — every post has your profile information attached to it. * Rather than posting “+1” or “Agreed”, use the Like button. Rather than taking an existing topic in a radically different direction, use Reply as a Linked Topic. Post Only Your Own Stuff You may not post anything digital that belongs to someone else without permission. You may not post descriptions of, links to, or methods for stealing someone’s intellectual property (e.g. software, video, audio, images, etc.), or for breaking any other law. Powered by You This site is operated by your friendly local staff and you, the community. If you have any further questions about how things should work here, open a new topic in the site feedback category and let’s discuss! If there’s a critical or urgent issue that can’t be handled by a meta topic or flag, contact us via the support live chat. Terms of Service Yes, legalese is boring, but we must protect ourselves – and by extension, you and your data – against unfriendly folks. We have a Terms of Service describing your (and our) behavior and rights related to content, privacy, and laws. To use this service, you must agree to abide by our TOS. See below for more information on this. Terms of Service (TOS) These terms include a number of important provisions that affect your rights and responsibilities, such as the disclaimers in Disclaimers, limits on the company’s liability to you in Limits on Liability, your agreement to cover the company for damages caused by your misuse of the forum in Responsibility for Your Use, and an agreement to arbitrate disputes in Disputes. Please read: To use this forum, or any other collaboration/communication tool of ThreeFold you must agree to these terms with threefold, the company that runs the forum or any other tool (FreeFlow Pages and others). The company may offer other products and services, under different terms. These terms apply only to use of the forum. Important Terms These terms include a number of important provisions that affect your rights and responsibilities, such as the disclaimers in Disclaimers, limits on the company’s liability to you in Limits on Liability, your agreement to cover the company for damages caused by your misuse of the forum in Responsibility for Your Use, and an agreement to arbitrate disputes in Disputes. Your Permission to Use the Forum) Subject to these terms, the company gives you permission to use the forum. Everyone needs to agree to these terms to use the forum. Conditions for Use of the Forum Your permission to use the forum is subject to the following conditions: 1. You must be at least thirteen years old. 2. You may no longer use the forum if the company contacts you directly to say that you may not. 3. You must use the forum in accordance with Acceptable Use and Content Standards. Acceptable Use 1. You may not break the law using the forum. 2. You may not use or try to use another’s account on the forum without their specific permission. 3. You may not buy, sell, or otherwise trade in user names or other unique identifiers on the forum. 4. You may not send advertisements, chain letters, or other solicitations through the forum, or use the forum to gather addresses or other personal data for commercial mailing lists or databases. 5. You may not automate access to the forum, or monitor the forum, such as with a web crawler, browser plug-in or add-on, or other computer program that is not a web browser. You may crawl the forum to index it for a publicly available search engine, if you run one. 6. You may not use the forum to send e-mail to distribution lists, newsgroups, or group mail aliases. 7. You may not falsely imply that you’re affiliated with or endorsed by the company. 8. You may not hyperlink to images or other non-hypertext content on the forum on other webpages. 9. You may not remove any marks showing proprietary ownership from materials you download from the forum. 10. You may not show any part of the forum on other websites with \\. 11. You may not disable, avoid, or circumvent any security or access restrictions of the forum. 12. You may not strain infrastructure of the forum with an unreasonable volume of requests, or requests designed to impose an unreasonable load on information systems underlying the forum. 13. You may not impersonate others through the forum. 14. You may not encourage or help anyone in violation of these terms. Content Standards 1. You may not submit content to the forum that is illegal, offensive, or otherwise harmful to others. This includes content that is harassing, inappropriate, or abusive. 2. You may not submit content to the forum that violates the law, infringes anyone’s intellectual property rights, violates anyone’s privacy, or breaches agreements you have with others. 3. You may not submit content to the forum containing malicious computer code, such as computer viruses or spyware. 4. You may not submit content to the forum as a mere placeholder, to hold a particular address, user name, or other unique identifier. 5. You may not use the forum to disclose information that you don’t have the right to disclose, like others’ confidential or personal information. Enforcement The company may investigate and prosecute violations of these terms to the fullest legal extent. The company may notify and cooperate with law enforcement authorities in prosecuting violations of the law and these terms. The company reserves the right to change, redact, and delete content on the forum for any reason. If you believe someone has submitted content to the forum in violation of these terms, contact us immediately. Your Account You must create and log into an account to use some features of the forum. To create an account, you must provide some information about yourself. If you create an account, you agree to provide, at a minimum, a valid e-mail address, and to keep that address up-to-date. You may close your account at any time by e-mailing info@threefold.io. You agree to be responsible for all action taken using your account, whether authorized by you or not, until you either close your account or notify the company that your account has been compromised. You agree to notify the company immediately if you suspect your account has been compromised. You agree to select a secure password for your account, and keep it secret. The company may restrict, suspend, or close your account on the forum according to its policy for handling copyright-related takedown requests, or if the company reasonably believes that you’ve broken any rule in these terms. Your Content Nothing in these terms gives the company any ownership rights in intellectual property that you share with the forum, such as your account information, posts, or other content you submit to the forum. Nothing in these terms gives you any ownership rights in the company’s intellectual property, either. Between you and the company, you remain solely responsible for content you submit to the forum. You agree not to wrongly imply that content you submit to the forum is sponsored or approved by the company. These terms do not obligate the company to store, maintain, or provide copies of content you submit, and to change it, according to these terms. Content you submit to the forum belongs to you, and you decide what permission to give others for it. But at a minimum, you license the company to provide content that you submit to the forum to other users of the forum. That special license allows the company to copy, publish, and analyze content you submit to the forum. When content you submit is removed from the forum, whether by you or by the company, the company’s special license ends when the last copy disappears from the company’s backups, caches, and other systems. Other licenses you apply to content you submit, such as Creative Commons licenses, may continue after your content is removed. Those licenses may give others, or the company itself, the right to share your content through the forum again. Others who receive content you submit to the forum may violate the terms on which you license your content. You agree that the company will not be liable to you for those violations or their consequences. Your Responsibility You agree to indemnify the company from legal claims by others related to your breach of these terms, or breach of these terms by others using your account on the forum. Both you and the company agree to notify the other side of any legal claims for which you might have to indemnify the company as soon as possible. If the company fails to notify you of a legal claim promptly, you won’t have to indemnify the company for damages that you could have defended against or mitigated with prompt notice. You agree to allow the company to control investigation, defense, and settlement of legal claims for which you would have to indemnify the company, and to cooperate with those efforts. The company agrees not to agree to any settlement that admits fault for you or imposes obligations on you without your prior agreement. Disclaimers You accept all risks of using the forum and content on the forum. As far as the law allows, the company and its suppliers provide the forum as is, without any warranty whatsoever. The forum may hyperlink to and integrate forums and services run by others. The company does not make any warranty about services run by others, or content they may provide. Use of services run by others may be governed by other terms between you and the one running service. Limits on Liability Neither the company nor its suppliers will be liable to you for breach-of-contract damages their personnel could not have reasonably foreseen when you agreed to these terms. As far as the law allows, the total liability to you for claims of any kind that are related to the forum or content on the forum will be limited to $50. Feedback The company welcomes your feedback and suggestions for the forum. See the Contact section below for ways to get in touch with us. You agree that the company will be free to act on feedback and suggestions you provide, and that the company won’t have to notify you that your feedback was used, get your permission to use it, or pay you. You agree not to submit feedback or suggestions that you believe might be confidential or proprietary, to you or others. Termination Either you or the company may end the agreement written out in these terms at any time. When our agreement ends, your permission to use the forum also ends. The following provisions survive the end of our agreement: Your Content, Feedback, Your Responsibility, Disclaimers, Limits on Liability, and General Terms. Disputes The governing law will govern any dispute related to these terms or your use of the forum. You and the company agree to seek injunctions related to these terms only in state or federal court in the city for disputes. Neither you nor the company will object to jurisdiction, forum, or venue in those courts. Other than to seek an injunction or for claims under the Computer Fraud and Abuse Act, you and the company will resolve any dispute by binding American Arbitration Association arbitration. Arbitration will follow the AAA’s Commercial Arbitration Rules and Supplementary Procedures for Consumer Related Disputes. Arbitration will happen in the city for disputes. You will settle any dispute as an individual, and not as part of a class action or other representative proceeding, whether as the plaintiff or a class member. No arbitrator will consolidate any dispute with any other arbitration without the company’s permission. Any arbitration award will include costs of the arbitration, reasonable attorneys’ fees, and reasonable costs for witnesses. You and the company may enter arbitration awards in any court with jurisdiction. General Terms If a provision of these terms is unenforceable as written, but could be changed to make it enforceable, that provision should be modified to the minimum extent necessary to make it enforceable. Otherwise, that provision should be removed. You may not assign your agreement with the company. The company may assign your agreement to any affiliate of the company, any other company that obtains control of the company, or any other company that buys assets of the company related to the forum. Any attempted assignment against these terms has no legal effect. Neither the exercise of any right under this Agreement, nor waiver of any breach of this Agreement, waives any other breach of this Agreement. These terms embody all the terms of agreement between you and the company about use of the forum. These terms entirely replace any other agreements about your use of the forum, written or not. Contact You may notify the company under these terms, and send questions to the company, at info@threefold.io. The company may notify you under these terms using the e-mail address you provide for your account on the forum, or by posting a message to the homepage of the forum or your account page. Changes The company last updated these terms on Aug, 2020, and may update these terms again. For updates that contain substantial changes, the company agrees to e-mail you, if you’ve created an account and provided a valid e-mail address. The company may also announce updates with special messages or alerts on the forum. Once you get notice of an update to these terms, you must agree to the new terms in order to keep using the forum.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/testing_readme/testlodge.md",
    "title": "TestLodge",
    "url": "/labs/knowledge_base/collaboration_toc/testing_readme/testlodge",
    "content": "Introduction After each release of a newer version of the ThreeFold Grid, we encourage the ThreeFold Community to participate in testing the grid's product components and provide valuable feedback to our engineering team. To facilitate this process, we have adopted TestLodge as our QA and testing platform. TestLodge allows us to efficiently manage test plans, test cases, and test runs for our products. By joining TestLodge as a user, you can assist us in running test cases and reporting any issues encountered during our product deployment processes. Getting Started on TestLodge Joining the TF GRID Project on TestLodge by Invitation To become one of our testers on TestLodge, please request an invitation by joining our official TF Grid Tester Telegram Group and sending a personal message to the group's moderator, providing your email address. Once you receive an invitation, check your email for further instructions and create an account on TestLodge. This will grant you access to the TF GRID Project on TestLodge. Accessing the TF GRID 3.x Projects After successfully creating your account, you can access the TF GRID 3.x Project from your Testlodge dashboard. Simply click on the project to begin the testing process. Project Overview Inside the project, you will find an overview that displays the project's testing environment. Here's a brief description of the project's content: - Total Test Plans: Indicates the number of test plans or products being tested in this project. - Total Requirement Docs: Represents the amount of testing documentation provided for each test within the project. - Total Test Suites: Displays the number of individual test use cases for each product being tested. These test suites are the procedures you will follow as a user/tester. - Total Test Runs: Reflects the total number of testing rounds conducted by users within the project. Each tester has their own Test Run, which serves as a testing dashboard for reporting test results. To get started with testing the TF Grid Test Suites, you need to create your own Test Run by using your name as the title. Creating Your Own Personal Test Run To create your personal Test Run, follow these steps: 1. Click on the \"Test Runs\" tab in the top navigation bar and select \"New Test Run.\" ! 2. Provide your name as the test name and select \"eVDC Deployer\" as your test suite since it is a test run for eVDC Deployer. Click on \"Select Test Suites and Cases\" to view the details of the use cases you want to test. ! 3. On the \"Select Test Suites and Cases\" page, choose the \"Deploy a new eVDC\" test suite as your Test Suite. This suite includes the different use cases required to deploy an eVDC. ! 4. Click \"Add Test Run\" to complete the registration of your new test run. ! 5. You will see a list of all created test runs, including your own. Click on the test run you just created to access your test run profile. ! 6. In your test run profile, you will find a summary and a list of the test suites you need to run. ! 7. Click on the \"Deploy eVDC\" test suite from the list and select \"Run Test\" to begin testing. ! 8. Proceed to the eVDC Deployer and commence your test. ! 9. Provide your remarks in the provided comment box and click \"Pass,\" \"Fail,\" or \"Skip\" based on the result of your test run to provide feedback to the ThreeFold QA Team. ! 10. Repeat the previous step to complete all 11. Go back to the ‘test runs’ page to see the overview of all test runs, and make sure that you completed your own test runs as shown below. ! 12. Thank you for completing test runs for ThreeFold Grid Project! You can now create an issue on ThreeFold's Test Feedback repository on Github, and report to our development teams about your test findings and feedback.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/testing_readme/testing_readme.md",
    "title": "How to Test",
    "url": "/labs/knowledge_base/collaboration_toc/testing_readme",
    "content": "Introduction With each release of a newer version of the ThreeFold Grid, the ThreeFold Community plays a vital role in testing the product components and providing constructive feedback to the engineering team. This article explores the testing strategy employed by ThreeFold, which includes both automation and manual testing, and highlights the covered functionality tested by the procedures. Automation Testing The internal QA team conducts automation testing, where they automate various test scenarios and run them in nightly builds. This approach helps identify the status of the code and allows for the early detection of functionality and regression issues. Manual Testing The QA team, along with the grid testing community, performs manual testing. TestLodge is the chosen platform for managing test plans, test cases, and test runs. By joining TestLodge as a user, individuals can actively participate in running test use cases and reporting any issues encountered during product deployment. Issues can be reported by creating an issue on ThreeFold's Test Feedback repository on Github. Covered Tests The ThreeFold Grid 3 encompasses a wide range of functionalities that are thoroughly tested to ensure their reliability and performance. Some of the covered functionalities include: - Compute - Virtual machine - Caprover - Kubernetes - Network - WebGateway - Planetary Network - Storage - Quantum Safe Storage System (Quantum Safe Filesystem) - 0-DB - S3 minio - TFChain - Portal - IPFS - Farming - Create Farm - Farm Management - TwinServer v2 - TerraForm Deployments Testing is a crucial aspect of the ThreeFold Grid's development process. By actively involving the ThreeFold Community in testing the product components and leveraging automation and manual testing approaches, the engineering team ensures the reliability and quality of the Grid3. With TestLodge as the testing platform, users can contribute to the testing efforts by running test use cases and reporting any issues encountered. Through collaborative testing, the ThreeFold Grid continues to evolve and deliver a robust and efficient infrastructure for users worldwide.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/release_process.md",
    "title": "Release Process",
    "url": "/labs/knowledge_base/collaboration_toc/development_process/release_process",
    "content": "Github projects - We are going to use new github style projects to manage the development process, all repos are linked against tfgrid product e.g 3.6.0 - You can have different views e.g StoryCards only view for Highlever overview, a view by repositories, priorities - We will drive all repos from that one project - We should use milestones (semantic version to sort out the issues) Releasing the Grid Environments - Grid releases are no longer linked to an environment in a pipeline, while this makes sense in lots of scenarios, it won't scale - An environment hosts a specific grid version based on the components it has - In the future, we should be able to create ephermal environments e.g deploy this grid version on these X number of nodes Versions - Releasing should follow semantic versioning - Every grid release is linked to X number of components. For example, TFGrid 3.6.1 is linked to terraform 1.0.0, portal 2.0.1, .. etc Branching/Tagging - As mentioned above, releases should should follow semantic versioning. The tag itself is prefixed with a . so vx.y.z or vx.y.z-rc1 - Devnet(s) should host development branches and once it reaches a specific quality they get verified on that branch - THIS IS NOT TRUE: it can be that on a dev net you have production components - Once verification happens and everything goes ok, we should tag a release of a component - Once all components are ready a grid release is complete and we can host that release on whatever environment - Container image tags must not contain the -prefix Blocking Bugfixes for Mainnet - In case of a blocking bug happening only on mainnet, we branch out of the tag on the affected component repository - do the fix on that branch - host a new grid release on a testing environment to verify - tag the new component - merge to trunk - create a new grid release - host that grid release (its components) on mainnet",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/issue_labels.md",
    "title": "Issue Labels",
    "url": "/labs/knowledge_base/collaboration_toc/development_process/issue_labels",
    "content": "Issue Labels Usage Guidelines Kindly refrain from using labels other than the specified ones. Priority-based Labels - : This label indicates that the issue requires immediate attention, with a maximum resolution timeframe of the same day. - If the assigned developer deems this timeline unachievable, they must escalate the issue immediately. - The term \"critical\" implies that the resolution is of utmost urgency, and everyone involved should prioritize it until it is resolved. - : This label designates issues that are very urgent and should be addressed within a minimal timeframe, typically within 1-2 days but no more than 3 days. - If the developer anticipates challenges in meeting this timeframe, they are required to escalate the issue promptly. - : Issues labeled as such are given a lower priority and are typically positioned towards the end of the sprint cycle. Types Labels - - - - : This label is used to distinguish story cards, providing an overview of a use case the team aims to achieve. For monorepos Repository owners are free to create labels per component in the monorepo for easier repo management",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/feature_request.md",
    "title": "Feature Request",
    "url": "/labs/knowledge_base/collaboration_toc/development_process/feature_request",
    "content": "--- name: Feature request about: Suggest an idea for this project title: '' labels: '' assignees: '' --- Is your feature request related to a problem? Please describe A clear and concise description of what the problem is. Ex. I'm always frustrated when \\[...] Describe the solution you'd like A clear and concise description of what you want to happen.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/development_process.md",
    "title": "Development Process",
    "url": "/labs/knowledge_base/collaboration_toc/development_process",
    "content": "Our project development process is characterized by agility, collaboration, and, most importantly, respect. We firmly believe in harnessing the collective ingenuity of our team, recognizing that each individual contributes invaluable insights to our codebase, our development process is completely managed on Github, using Github based projects. Product Definition on Home repo serves a special role in the organization, it's the starting point of all development. - It links to all products & components - Put only stories, identified with tag in the home repo To streamline our development workflow, we have adopted the GitHub-style projects framework, with all repositories linked to the ThreeFold Grid (tfgrid) product (e.g., version 3.6.0). - Various views, such as StoryCards for a high-level overview, repository-specific views, and prioritized views, enhance project visibility. - All repositories are managed within a centralized project, ensuring unified control and coordination. - Milestones, aligned with semantic versioning, serve as a means to categorize and organize issues, providing versioning per component. - Each product is clearly outlined in a dedicated project section within the \"home\" repository. - The home page in the home repository serves as a hub linking to individual product pages. - Products are associated with relevant components slated for the upcoming release. - Product release milestones are clearly marked on the product page. - Release notes, accessible through each product, offer a historical overview with links to specific components used in each release. - Interlinked relationships between products and components, as well as links to third-party products with specified version numbers, provide comprehensive tracking. - Components are meticulously monitored within the same product project. - A commitment to semantic versioning is mandated for all components. Github Project When creating a new project, please use the grid template project (private repository) available at . Github project columns - - Stakeholder or project owner suggests a feature/story/bug to be resolved in this release - - The project owner accepts the item, the issue will be worked on and he commits to solve within the release - Once accepted = then escalation is needed if it can not be done in time - - The issue is being worked on - - We are using the Kanban way of thinking - something in this swimlane needs to be resolved asap, can be e.g. a question - Means issue cannot be completed, attention from e.g. stakeholders is needed - : work is being verified - The team delivered the feature/bug/story - Stakeholders need to agree that the issue has been resolved appropriately - Project owner can never go from 'Verification' to 'Done' without approval from stakeholders (often represented by QA team) - - Everyone agreed (project owner and stakeholders) agreed that the issue was done ok Project Special Columns Some projects require special columns like the following - : Work is done, waiting for review; no need for daily progress updates. - : If deployment is needed for QA testing on the staging instance. Repository Creating a repository involves establishing a foundation for collaborative development. Follow these guidelines to ensure consistency and best practices in repository creation. Naming - Choose a clear and descriptive name for the repository. - Use lowercase letters and hyphens for improved readability. README - Include a comprehensive README.md file. - Provide essential information about the project, including setup instructions, dependencies, and usage guidelines. License - Include a LICENSE file specifying the project's licensing terms, threefoldtech is using Apache2 License. Github Templates - Use github templates to provide proper template for issues bug_report or feature request - Use github templates to provide proper template for pull requests Expected Workflows - Set up a continuous integration (CI) pipeline using a tool like GitHub Actions. - Include linting, tests and code quality checks in the CI process. - Set up automation to deployment on staging, and production server - Building docker images - Building flists - Pushing to the hub - Publishing packages Issues Consider the following for Effective Issue Reporting 1. Title: - Provide a clear and concise title that summarizes the issue. 2. Description: - Offer a detailed description of the issue, including what you expected to happen and what actually occurred. - Provide steps to reproduce the issue, if possible. - Include any error messages received. 3. Environment: - Specify the environment in which the issue occurred (e.g., operating system, browser, version). 4. Attachments: - Attach relevant files or screenshots to help visualize the problem. 5. Issue Type: - Label the issue with an appropriate type (e.g., bug, feature request, question). 6. Priority: - If applicable, assign a priority level to indicate the urgency of the issue. 7. Version Information: - Include information about the version of the software or application where the issue was encountered. 8. Labels: - Apply relevant labels to categorize the issue (e.g., priority levels, type of issue). 9. Reproducibility: - Clearly state whether the issue is reproducible and under what conditions. 10. Additional Context: - Provide any additional context that might help in understanding and addressing the issue. 11. Assigned: - If known, assign the issue to the responsible team member or developer. 12. Discussion: - Engage in discussions with the development team and other stakeholders to gather insights and potential solutions. By following these guidelines, you contribute to a more efficient issue resolution process, enabling developers and the team to address concerns promptly and effectively. Issue Labels See issue labels Branch Names in Issue titles Each issue has the name of a branch in the title as [development_something], the name 'development' can be skipped and its the default or previous could also be written as [something] but don't forget branch is development_... If not specified, it is to be fixed/developed on development. Milestones for Issues We use milestones for version numbers e.g means this issue is going to be part of the release of of the component. > It's very important that nobody works on any issue in milestones not part of the global project plan - No milestone means need to be sorted - Number e.g means So issues with no milestones can only be in 1 condition: new and not sorted out yet where (repo) it belongs Branching We encourage collaborative branching. Meaning any group of people working within the same scope are highly encouraged to work on the same branch, trusting and communicating with one another. Our branching strategy is: - is the last stable release - is only for solving BLOCKING issues which are in the field on the last release - short living - is where all stories branch from, and the one that has hotfixes if needed - - branch for a story - always updated from development(_hotfixes) - - short living branch for when reviews are needed for a story - short living hotfix(es) to allow people to review and then put on development - now everyone should update from or development or development_hotfixes - development_hotfixes is always newer than development - is a branch used to integrate development branches - never develop on it, its for verifying & doing tests We have branches for new features/disruptive changes. These have a prefix of Each project and story should define which branches to use & the branching strategy. There should never be any branch on the system which can not be found back by looking at the stories in the repo. Title of the story : in between [] Pull Requests When developers or a group initiate work on a separate branch and seek input from their peers, it is recommended to promptly open a for seamless communication. Upon completion of the work, opening a pull request signals that the work is: - Complete as Defined in the Project: The work aligns with the predefined goals and specifications outlined in the project. - Well Tested: Thorough testing has been conducted to ensure the reliability and functionality of the code. - Well Documented: Comprehensive documentation accompanies the code, aiding in understanding and future maintenance. Pull Requests Best Practices When creating pull requests (PRs), adhere to the following best practices for effective collaboration: - Early Draft PRs: Open a draft pull request as soon as work begins on a different branch. This allows for ongoing communication and collaboration with peers throughout the development process. - Timely Updates: Regularly update the PR as new changes are made to keep reviewers informed of progress. - Clear and Concise Title: Use a clear and concise title that summarizes the purpose or goal of the pull request. - Detailed Description: Provide a comprehensive description of the changes made, the problem solved, and any relevant context. This aids reviewers in understanding the purpose and impact of the changes. - Link to Issues: If the pull request addresses specific issues, link them to provide additional context and traceability. - Reviewers and Assignees: Assign the appropriate reviewers and, if applicable, assignees to ensure that the right people are involved in the review process. - Complete Work: Ensure that the work is complete as defined in the project requirements. Address any outstanding issues before marking the PR as ready for review. - Thorough Testing: Verify that the code has undergone thorough testing. Include details about the testing strategy and results in the PR description. - Documentation: Confirm that the changes are well-documented. Documentation should not only explain how the code works but also guide future developers on its usage and maintenance. - Address Feedback: Be responsive to feedback from reviewers. Address comments and concerns promptly to facilitate a smooth review process. - Code Style and Standards: Ensure that the code follows established style guidelines and coding standards. Consistent formatting contributes to maintainability. - Status Checks: Ensure that automated status checks, such as continuous integration (CI) tests, pass successfully before merging. By adhering to these best practices, you contribute to a collaborative and efficient development process, fostering a culture of high-quality code and effective communication within the team. Commits Clear and informative commit messages are essential for understanding the history of a project. Follow these guidelines to create meaningful commit messages. Message Structure Header - Start with a concise one-line summary - Use present-tense verbs (e.g., \"Add,\" \"Fix,\" \"Update\") to describe the action. Body - Optionally, provide a more detailed explanation. - Break long explanations into bullet points if needed. Be Descriptive - Clearly describe the purpose of the commit. - Include information about why the change is necessary. Reference Issues - If the commit is related to an issue, reference it in the message. - Use keywords like \"Fixes,\" \"Closes,\" or \"Resolves.\" Consistency - Be consistent with your writing style and formatting. - Use the imperative mood consistently throughout. Examples Good Example Here's a good example of a commit message Bad Example Merge or Rebase If you're the sole developer on the branch, you can use rebase, if more people are collaborating together, use merge Merge or Squash merge Squash only when it makes the history cleaner. Feature branch is a good example, because it is often short-lived, small, and authored by 1 developer. On the other hand, use regular merge for big feature co-authored by multiple developers eg. long-lived branches, please be aware of the Disadvantages of squash merges Releasing Process Before tagging a release, open a branch named with the intended version e.g 10.5.x with the quality level - alpha: doesn't have all the features, but you can use the features in there - beta: no major, or blocking bugs. All features working for the customer as promised, no blocking bugs - production: no major, no blocking, no minor bugs and the documentation is ready check the release process document for more information Blocking Issues categorized as blockers include: - Inability of the customer to access the functionality as described in the manual. - Stability concerns that impede progress, particularly instances where the system crashes. - Security issues that act as barriers to further development. - Stability issues that hinder smooth operation. - Performance concerns labeled as blockers when they prevent continuation. - Performance issues classified as major when they allow for continued work. Progress Reporting In teams operating remotely, complete transparency is of utmost importance. Visibility into development progress is crucial and is best achieved through the use of storycards and issues. To facilitate clear communication, commenting daily is a critical aspect of our process. We advocate for the following format, which aids in asynchronous communication: For issues or stories labeled with , continuous updates should be at least two updates per day to keep stakeholders informed. Including an Estimated Time of Arrival (ETA) in the comments is essential. While it serves as an estimation subject to change with new findings, it provides a valuable projection of completion. Quality Assurance (QA) Process QA plays a crucial role in delivering high-quality software. This document outlines responsibilities, expectations, and best practices. QA Responsibilities Daily Standups - Attend daily standups for progress updates, issue discussions, and coordination. Provide Test Plans - Collaborate on test plans for each sprint. Test Execution - Execute test plans manually and through automated testing. - Log and prioritize defects. - Track nightly tests. Test Documentation - Maintain updated test documentation. Verification and Closure - Verify issues and user stories before closure. Cross-Environment Testing - Conduct test runs across different environments. Bug Assessment Meetings (BAM) - Conduct BAM sessions twice weekly to address community feedback, covering both repository and active projects. Additional Testing Types - Expand responsibilities to include various testing types such as: - Performance testing - Security testing - Compatibility testing - Usability testing - Regression testing Expectations for QA Leads Test Planning - Lead the creation of detailed test plans. Test Strategy - Define a testing strategy, emphasizing automation. Review and Closure - Review and close issues, ensuring alignment with the test plan. Communication - Facilitate communication between QA and development teams. QA Verification and Testing Testplan - Provide a comprehensive test plan, authored exclusively by the QA lead that serves as the source of truth for the verification process Verification Process - Verify stories in a two-step process - As soon as the story is moved to In Verification column, QA team can pickup the issue, they need to log their scenarios, executions and link to the testcase in the testplan. - QA lead can then verify it's aligned to the original requirements and it was properly verified before closing - QA leads need to test the main features by themselves. - Automate regression testing through github workflows, and any other means needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/development_cycle.md",
    "title": "Development Cycle",
    "url": "/labs/knowledge_base/collaboration_toc/development_process/development_cycle",
    "content": "The development cycle is explained below: ! Devnet: - continuous development for active version - can be reset - should be against a branch named with the version being developed (example: 10.2.3) Nextnet: - for parallel version development - oftentimes, the next major version while development has bugfixes - should be against a branch named with the version being developed (example: 10.3.1) QAnet: - once development is complete, each component is tagged with an rc (example: 10.2.3-rc1) and the new version to be tested is deployed on QAnet - this net is for INTERNAL QA - Here, we expect most bugs to be reported - Once QA signs off, it moves to testnet Testnet: - tag as beta release (example: 10.2.3-rc3-beta) - This is for the community and stability testing - should be almost completely stable Mainnet: - if testnet has no blockers for 2 weeks, community votes to move to mainnet - everything is merged to main - final release is tagged (example: 10.2.3) GOAL: moving away from that model to be able to use ephermal environments instead of maintaining such environments, but now they're available for simplicity",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/bug_report.md",
    "title": "Bug Report",
    "url": "/labs/knowledge_base/collaboration_toc/development_process/bug_report",
    "content": "--- name: Bug report about: Create a report to help us improve title: '' labels: '' assignees: '' --- Describe the bug A clear and concise description of what the bug is. To Reproduce Steps to reproduce the behavior: 1. Go to '...' 2. Click on '....' 3. Scroll down to '....' 4. See error Expected behavior A clear and concise description of what you expected to happen. Screenshots If applicable, add screenshots to help explain your problem.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/development_process/PULL_REQUEST_TEMPLATE.md",
    "title": "Pull Request Template",
    "url": "/labs/knowledge_base/collaboration_toc/development_process/PULL_REQUEST_TEMPLATE",
    "content": "Description Describe the changes introduced by this PR and what does it affect Changes List of changes this PR includes Related Issues List of related issues Checklist - [ ] Tests included - [ ] Build pass - [ ] Documentation - [ ] Code format and docstring",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/collaboration_tools/website_tool.md",
    "title": "Website Deployer",
    "url": "/labs/knowledge_base/collaboration_toc/collaboration_tools/website_tool",
    "content": "Overview ThreeFold Website Tool is a customized open-source Zola-based web deployment framework and static website template repository that is available for anyone to use. At ThreeFold, we utilized Website Tool to deploy all of our web presences. For example, www.threefold.io. What is Zola Framework? Zola is a static site generator (SSG), similar to Hugo, Pelican, and Jekyll (for a comprehensive list of SSGs, please see Jamstack). It is written in Rust and uses the Tera template engine, which is similar to Jinja2, Django templates, Liquid, and Twig. Content is written in CommonMark, a strongly defined, highly compatible specification of Markdown. While you can also publish a static website using Zola alone, we at ThreeFold have customized the framework and created a static website template that makes it even easier for anyone to build a website by simply cloning template and fill it with their own website content. Prerequisites - Github Account - Zola Framework - VS Code, or any code editor of choice - Markdown language knowledge - Basic Command Line (Terminal) Knowledge In order to deploy and publish a website using ThreeFold Website Tool, you would need to have an account on github (to store your website data in a github repository), as well as to have Zola framework installed on your machine. Important Links > - How to Sign Up for a Github Account > - Download VS Code > - Learn Markdown Language > - Command Line Cheat Sheet Installing Zola Onto Your Machine To install Zola on your machine, simply go to your terminal and run the following command: MacOS (brew): Please make sure you have Brew installed on your MacOS machine before installing Zola. Windows (scoop) Please make sure you have Scoop installed on your Windows machine before installing Zola. You should see a similar screen as below when successful: ! For more details on Zola Installation, and installation guidelines for other operating systems, please read: Zola Installation Manual. Important Links > - How to Install Brew (MacOS) > - How to Install Scoop (Windows) > - Zola Installation for other OS > - Command Line Cheat Sheet > Next Step: Template Guide: How to use the TF Web Template Get Started Now that you have successfully installed Zola on your machine. You are ready to create and build your own website using ThreeFold Website Tool. In order to do that you would need to clone ThreeFold's Website Template to your own github account, and open it locally on your computer by using VS Code or your code editing program of choice. Fork ThreeFold's Website Template to Your Github Account Our Team has especially created an html/css/markdown based template repository on github, free for anyone to use. To start working on your project, simply fork this repository to your own github account by clicking the 'fork' account on the repository, and rename it with your website's name. ! Clone the Forked Repository Locally After you forked the template, now you can clone the repository to your local computer so we can start working on it. Please remember the directory or folder of where you cloned the repository in your computer to make it easier for you to locate and edit it. ! Open and Edit Your Cloned Zola Template with a Code Editor Once the template is forked and cloned, open your code editor and start working on your website. I will explain a little more about the content editing process and procedure on the next pages... ! Template Guide On this page you will find an introduction on TF Web Template and how to navigate the different template component that enable you to edit the template with your own content. Navigating the Template All editable content of your website would be found under ‘content’ folder. Each page of your website is a markdown (.md) file. Each page and all the images on the page will be put into its own folder under content/ folder. ! For example, here, my homepage (index.md) is put into content/home folder. ! If I want to edit the homepage of my website, I would go to the following: and start editing. ! ### Top Navbar Made Easy ! Every time you make a new page folder, we have designed it in a way that the website would automatically generate a new navbar item using the name of each folder you created. based on the navbar picture above, it means that I have created 3 separate content subfolders, each with an index.md file on it called Home, ThreeFoldFeed and GetServer. Replace Logo with your Own logo ! To replace the logo, add your own logo image to ‘home’ folder. And then go to _index.md file and replace the logo_path: images/yourlogoimagename.jpg ! Important Links > TF Web Template Customization We have designed the template in certain ways that it would accommodate different indentation web page style, such as placeholders, footer, header, left-indentation, right-indentation. All you need to do is just replace the texts and images using markdown language, and use the indentation style you would like to use for your page. Don’t know how to markdown? Here’s a complete markdown syntax guide for you to begin with. Happy experimenting! Some Tutorials on Markdown Creating A Single-Column Page Section Since we only have one column, Every one column section begins only with row indentation syntax (style, margin, padding). for example: and ends with Adding Image To add image to your page please use The Result: ! Creating Page Section with Multiple Columns For more than one column section, we need to configure the row and column syntax. For example: Sometimes you would like to have a page where you place your texts and buttons on left column and an image on the right column, like: What you need to do is add: in between your text and images for every column you want to create. For example, this page consist of two columns (left and right): ! The Result: ! You can add more than two column like this one, a page section consist of 3 columns. The code: ! The Result: ! Important Links > - Learn Markdown Language Build and Preview Your Website Locally After customizing your website, you might want to review and build your website locally before publishing it online. On this page you will find tutorials on how to preview and deploy your website. To preview your website locally, simply open the terminal via your code editor and type in: So that the framework starts building your website. Then So that the framework starts serving your website preview locally. Please make sure you are on located on the right website folder, for example: $ user/doc/mywebsitename before typing the command above. The preview won't successfuly be built if you run the command in the wrong folder. When successful, it will give you a link to a local preview of your website. Go ahead and copy paste the url onto your web browser to preview your website locally. ! And, Congratulations! You just built your website locally! ! Check the Website Links When you are in the main directory of your Zola website, you can check the following command to check the links of the complete website locally: Once your website is online, you can also use the Website Link Checker. Important Links > - Command Line Cheat Sheet Publish Your Website (Via Github Pages) Since we're using github repository to save our website content, the easiest way to publish our website is also through github pages and by using our own domain. Once all commits have been pushed back to your github repository online, you can start publishing your website. The first thing you need to do is to go back to your code editor, and find config.toml file on your website repo. Edit the base_url on the config.toml file on your repo to your own domain. ! Save all your changes and push all your commits to its origin again. Publish your Github page Later on, go to your github repo settings, go to Pages on the left navigation sidebar. Add your own custom domain to start publishing your website. ! And you are done! Your website will be published, and it will take only a minute or so to complete the process. Refresh page, and you will see a link to your newly published website. ! Important Links > - Pushing Changes to Github > - Github Pages How-to > - Adding Custom Domain to my Github Page",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/collaboration_tools/website_link_checker.md",
    "title": "Website Link Checker",
    "url": "/labs/knowledge_base/collaboration_toc/collaboration_tools/website_link_checker",
    "content": "Introduction This is a Python program that calls muffet on a whole website and then filters and displays the HTTP errors. > Note: It can take a couple of minutes to run if the website has a lot of URLs. How the Program Exits Exits with error code 1 if at least one error is found, as specified with --errors flag. Otherwise exits with code 0. Note that errors set as --warnings will always exit with code 0. Program Arguments url The URL to scan. Please include https:// or http://. (e.g. https://google.com) -h, --help show this help message and exit -e ERRORS [ERRORS ...], --errors ERRORS [ERRORS ...] Specify one, many or all error codes to be filtered (e.g. -e 404, -e 403 404, -e all). Use -e all to show all errors. -w WARNINGS [WARNINGS ...], --warnings WARNINGS [WARNINGS ...] Specify one, many or all error codes to be filtered as warnings (e.g. -w 404, -w 403 404, -w all). Use -w all to show all warnings. How to Use the Program With Python Clone the repository Change directory Run the program With Docker You can use the following command to run the website link checker with Docker: With Github Action The website link checker can be run as an action (e.g. ) set in of a Github repository. The following action example runs everytime there is a push on the development branch and also every Monday at 6:00AM as set by the cron job.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/collaboration_tools/collaboration_tools.md",
    "title": "Collaboration Tools",
    "url": "/labs/knowledge_base/collaboration_toc/collaboration_tools",
    "content": "In this section, we will introduce powerful collaboration tools utilized by ThreeFold, such as the Circle Tool and the Website Deployer. These tools play a crucial role in enhancing as well as simplifying collaboration and communication at ThreeFold. The tools we use at ThreeFold are chosen for their open-source design and their focus on ease of comprehension and use. TABLE OF CONTENTS - Circle Tool - This ThreeFold's project management tool, made by using Taiga, is an open-source project management platform designed to facilitate collaboration and to streamline workflows for teams. It provides a comprehensive set of features and tools to help teams plan, track, and manage their projects effectively. - Website Deployer - This ThreeFold's website builder tool, made by using Zola, is a static site generator (SSG) and content management system (CMS) that empowers developers and content creators to build and manage websites efficiently. It is an open-source framework written in the Rust programming language, known for its performance, security, and reliability. - Website Link Checker - The ThreeFold website link checker is a wrapper around muffet to check for specific link errors on live websites written in Python.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/collaboration_toc/collaboration_tools/circle_tool.md",
    "title": "Circle Tool",
    "url": "/labs/knowledge_base/collaboration_toc/collaboration_tools/circle_tool",
    "content": "Introduction The __ThreeFold Circle Tool__ is our own self-hosted (desktop only) project management tool based on Taiga, an open-source project management tool for cross-functional agile. It offers a lot of different project management kits and features such as the scrum board, kanban board, issues management, and many more. Our teams at ThreeFold use the Circle Tool to self-manage our tasks, thus it is deemed necessary for the new onboarded team members to learn how to use the tool. Unfortunately we only provide the desktop version of the tool at this moment since we normally manage our projects on the computer. This manual will be a beneficial thing to read for anyone: our team members, as well as our community members who are interested in using Circle Tool for their projects. Overview Here is an overview of the tool. ! Prerequisites You would need to install and create an account on the TF Connect App before being able to register and use the Circle Tool. How to Use the Circle Tool Go to Circle Tool's desktop homepage on your computer as shown below. Click on '__Login__' button on the very top right corner of your screen. ! Click on \"TF Connect\" button to log into the Circle Tool by using your TF Connect Account. ! Fill in your TF Connect usernames (without adding the '@' sign) on the provided box, and click on the 'Sign in' button. ! Circle Tool will ask you to verify your login by clicking the right emoji that is sent to your TF Connect App. ! Verify your sign in process by loggin in to your TF Connect App on your mobile phone. Click on the same emoji that you see on your circle tool (desktop). ! Congratulations, you are now officially logged in on the circle tool. The Dashboard view will be the first thing you will see once you are logged in to the tool. ! * Circle Tool Overview The Circle Tool always try to make things easy and intuitive for new users but it’s good to have a nice & quick overview for your first couple of days. Dashboard View ! Upon login or if you just go to your Circle Tool, you’re confronted with your dashboard with quick access to your working on items, a list of watched items and shortcuts to your projects. You can always go back to your dashboard by clicking on the Taiga icon on the top bar. Profile view ! Circle Tool has an additional section to get a multiproject view where you can find and list everything that is accessible to you. Simply click on your avatar and you access your personal profile section where you can check from what your personal bio looks like for people that might have access to it to all sorts of information on your activities and relevant content. Projects ! You can access your assigned projects by clicking on Projects link at the top left of your screen. You can hover and get an interactive shortlist or click on the link and go to a dedicated page where you can access them as well as rearrange them. Once you have clicked on a project, you access your default view for that project, which is always the Project’s Timeline if you haven’t changed that. Scrum Module on Project ! Every circle project can activate the Scrum module. This also happens automatically if you chose the Scrum template upon project creation. You can find the scrum module on the sidebar of your project page. Scrum is an agile framework for developing, delivering, and sustaining complex products. Although it had an initial emphasis on software development, it has been used in other fields including research, sales, marketing and advanced technologies. Scrum Backlog ! There are various so called artifacts in Scrum. The top three are the Backlog, the User Stories and the Sprints. They respectively represent what is to be done ordered by priority and readyness, the pieces of work themselves and the fixed time periods in which we put selected User Stories to be worked upon and finished. Scrum Sprints ! The Scrum Backlog view will always show a summary view of ongoing or closed Sprints but teams generally stick to the Sprint Taskboard view when they are focused on getting things done for that Sprint. Click on either the Sprint name or the “Sprint Taskboard” button so you can access the very important Sprint Taskboard. Open Sprints appear as shortcuts through the left navigation pane’s Scrum icon. More Info You can read more about the Circle Tool (Taiga), scrum, sprints, and other documentations on Taiga's project management features on Taiga's official documentation here. Happy Project Managing!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/resourceunits_advanced.md",
    "title": "Resource Units Advanced",
    "url": "/labs/knowledge_base/cloud_toc/resourceunits_advanced",
    "content": "Calculation from resource units to CU/SU for farming purposes The threefold Zero-OS and TFChain software translates resource units (CRU, MRU, HRU, SRU) into cloud units (CU, SU) for farming reward purposes. Compute For farming, 1 CU equals: - 2 virtual CPUs with a maximum over subscription of 4 CPUs and minimum required memory of 4GB. - An over subscription of 4 CPUs remains still gentle as we understand many other providers use more. - There needs to be at least 50GB SSD per CU, if not there is penalty for nr of CU, reasoning is that otherwise people cannot deploy their VM's or Containers if there would not be minimal SSD. - 1 GB of memory is subtracted for the operating system to function. - please note minimal passmark per CU (with 4GB mem), needs to be 1000 passmark at farming side, this is not being checked today but might be done in future. If your chosen CPU has less than 1000 passmark per CU (of 4 GB mem), it could be your final CU's will be lower once that feature is introduced. Storage For farming, 1 SU equals to: - 1.2 TB of HD capacity (which can deliver 1 TB of net usable storage) - 200 GB of SSD capacity with a buffer of 20% Storage cost price verification Dec 2021 - price for 16 TB HDD = 300 USD - 16000 / 1200 = 13.3 SU - 1 SU costs = 300 / 13.3 = 22.5 for HDD - price for 2 TB SSD = 200 USD - 2000 * 0.8 / 200 = 8 SU - 1 SU costs 200 / 8 = 25 for SSD",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/resource_units_calc_cloudunits.md",
    "title": "Resource Units",
    "url": "/labs/knowledge_base/cloud_toc/resource_units_calc_cloudunits",
    "content": "Resource Units Overview The ThreeFold Zero-OS and TFChain software translates resource units (CRU, MRU, HRU, SRU) into cloud units (CU, SU) for farming reward purposes. Resource units are used to measure and convert capacity on the hardware level into cloud units: CU & SU. | Unit Type | Description | Code | | ------------ | ------------------------------------ | ---- | | Core Unit | 1 Logical Core (Hyperthreaded Core) | CRU | | Mem Unit | 1 GB mem | MRU | | HDD Unit | 1 GB | HRU | | SSD Unit | 1 GB | SRU | | Network Unit | 1 GB of bandwidth transmitted in/out | NRU | These are raw capacities as measured by the ThreeFold software running on Zero-OS. To learn how they convert into cloudunits see here Compute For farming, 1 CU equals: - 2 virtual CPUs with a maximum over subscription of 4 CPUs and minimum required memory of 4GB. - An over subscription of 4 CPUs remains still gentle as we understand many other providers use more. - There needs to be at least 50GB SSD per CU, if not there is penalty for nr of CU, reasoning is that otherwise people cannot deploy their VM's or Containers if there would not be minimal SSD. - 1 GB of memory is subtracted for the operating system to function. - please note minimal passmark per CU (with 4GB mem), needs to be 1000 passmark at farming side, this is not being checked today but might be done in future. If your chosen CPU has less than 1000 passmark per CU (of 4 GB mem), it could be your final CU's will be lower once that feature is introduced. NOTE 17 Jan: some possible abuse has been found, we will do research how to adjust calculations to avoid this. --> Storage For farming, 1 SU equals to: - 1.2 TB of HD capacity (which can deliver 1 TB of net usable storage) - 200 GB of SSD capacity with a buffer of 20% Storage cost price verification Dec 2021 - price for 16 TB HDD = 300 USD - 16000 / 1200 = 13.3 SU - 1 SU costs = 300 / 13.3 = 22.5 for HDD - price for 2 TB SSD = 200 USD - 2000 * 0.8 / 200 = 8 SU - 1 SU costs 200 / 8 = 25 for SSD Change Log - original non final specs from Summer 2021, was mentioned its not final. - Dec 2021 update for launch v3.x - there need to be at least 50 GB SSD capacity per CU - was in the specs of farming reward but formula above did not take it into consideration, in others nonconsistenty between specs & formula. - sru division to 200, was 300, to be more in line with HDD vs SSD pricing, this check needs to be done +- every 6 months, results in slightly more SU, which is good for farmers. - Jan 2022 update for launch v3.x - reverted change done in Dec, sru does not have to be deducted from cpu, results in increase of farming rewards, in other words good for farmers. Also good formula more easy. - Introduced warning about minimum CPU requirements in relation to passmark. Remarks - There seems to be issue in simulator play.grid.tf, will check asap (17-jan) - We are checking all numbers & the DAO is coming life in Jan/Feb 2022, once we have the DAO every change of the specs needs to be approved by DAO voting members. For now we use the forum to notify and ask feedback and make sure farming reward goes up for the changes if possible. There ia already a minimal DAO life, the blockchain TFChain validators (L1) need to find consensus to upgrade code.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/cloudunits.md",
    "title": "Cloud Units",
    "url": "/labs/knowledge_base/cloud_toc/cloudunits",
    "content": "What are Cloud Units? Cloud units are the basis for price calculation for anyone intending to use/deploy on the Threefold Grid. Cloud units are a unified way to account for virtual hardware resources on the ThreeFold Grid. They represent compute, storage and network equivalents to energy (kW - kilowatt). The are three categories of cloud units: - Compute Unit (CU): The amount of data processing power in terms of virtual CPU (vCPU) cores (logical CPUs) and Random Access Momory (RAM). - Storage Unit (SU): The amount of storage capacity in terms of Hard Disk Drives (HDDs) and Solid State Drives (SSDs) in Gigabytes (GB). - Network Unit (NU): The amount of data that travels in and out of storage units or compute units expressed in GB. > Note: Resource units are used to calculate SU & CU. Resource Units are used to measure compute and storage capacity produced by hardware. When a solution is deployed on the ThreeFold Grid, the system automatically gathers the required amount of CU, SU, or NU. It is important to note that users are not billed upon reservation but only when utilizing the actualy CU, SU and NU. TF Certified Farmers can define the price of CU, SU, and NU they make available on the ThreeFold Grid. How is the price of Cloud Units (v4) calculated? The following tables display how cloud units (v4) are calculated on the ThreeFold Grid. The 4th version of cloud units are used since Grid 2.2+ in mid 2020. Compute Capacity | CU (Compute Unit) | | | | | | ------------------------------------- | --- | --- | ---- | --------------- | | GB Memory | 4 | 8 | 2 | | | nr vCPU | 2 | 1 | 4 | | | Passmark Minimum (expected is double) | 500 | 250 | 1000 | CPU performance | The passmark (CPU benchmark or alternative) is not measured on the grid yet. It is used in simulators to check the mechanisms and ensure enough performance per CU is delivered. Example of Compute unit: - 4 GB memory & 2 virtual CPU (and 50GB of SSD disk space) - Recommended price on TF Grid = 10 USD - Alternative cloud price = between 40 USD and 180 USD See how we compare with the market compute prices here. Storage Capacity | SU (Storage Unit) | HDD | SSD | | ------------------- | ---- | --- | | GB Storage Capacity | 1200 | 200 | HDD is only usable for Zero Database driven storage (e.g. ThreeFold Quantum Safe Storage). 1.2 TB of HDD is provided following the advised storage policy of 16+4 with 20% overhead. So the net usable storage would be 1TB. In other words, the SU corresponds in that case to 1TB of net usable storage and an extra 200GB for redundancy. Example of Storage unit: - 1TB of usable storage as provided by the Zero-DBs (the backend storage systems) - Recommended price on TF Grid for 1 SU = 10 USD - Alternative cloud price = between 20 USD and 200 USD See how we compare with market storage prices here. Network | NU (Network Unit = per GB) = NRU per month | GB (NRU) | | ------------------------------------------ | -------- | | GB transferred OUT or IN | 1 | > We use SU-month and CU-month to show SU monthly costs. This can be compared to kilowatts (kW) to see electricity usage per month. Learn more about how this is calculated with Resource units, a way to measure the compute and storage capacity produced by hardware.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/cloud_toc.md",
    "title": "Cloud",
    "url": "/labs/knowledge_base/cloud_toc",
    "content": "This section covers the essential information concerning Cloud utilization. To deploy on the ThreeFold Grid, refer to the System Administrators section. TABLE OF CONTENTS - Cloud Units - Pricing - Resource Units - Resource Units Advanced",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/pricing_toc/staking_discount_levels.md",
    "title": "Staking Discounts",
    "url": "/labs/knowledge_base/cloud_toc/pricing_toc/staking_discount_levels",
    "content": "Introduction By staking TFT on their TFChain wallet, TFGrid users can benefit to discounts up to 60%. Table of Discounts | type | pricing level | nr months of TFT linked to account | | ---------- | ------------- | ---------------------------------- | | no staking | - 0% | 0 | | default | - 20% | 3 months | | bronze | - 30% | 6 months | | silver | - 40% | 12 months | | gold | - 60% | 36 months | TFChain charges the user for proof_of_utilization every hour. TFChain will calculate the discount based on amount of TFT available in the account of the user on TFChain (not on Stellar or any of the other blockchains we also support). This is an automatic form of staking, the user does not have to do anything to have this benefit. For network related services its max 40% discount. Example for 40% discount - I've used 10 TFT worth of Internet Capacity on tf_grid for the last hour. - 10TFT 24 30 12 = I would need 86,400 TFT for one year - 10TFT 24 30 36 = I would need 259,200 TFT for 3 year - I have 120,000 TFT in my account on TF_Chain, this means that I will get 40% discount. - I don't have enough tokens to get to 60% discount.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/pricing_toc/pricing_toc.md",
    "title": "Pricing",
    "url": "/labs/knowledge_base/cloud_toc/pricing_toc",
    "content": "Pricing TABLE OF CONTENTS - Pricing Overview - Staking Discounts - Cloud Pricing Compare - Grid Billing",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/pricing_toc/pricing.mdx",
    "title": "Pricing Overview",
    "url": "/labs/knowledge_base/cloud_toc/pricing_toc/pricing",
    "content": "import Include from '@site/src/components/Include'; Pricing Policy - The current prices are for resources usage on mainnet (testnet get 50% discount) - A month is considered as 30 days (720 hours) | Cloud Units | Description | mUSD | mTFT | | ----------------- | ------------------------------------------------ | ------------------ | ------------------ | | Compute Unit (CU) | typically 2 vcpu, 4 GB mem, 50 GB storage | /hour | /hour | | Storage Unit (SU) | typically 1 TB of netto usable storage () | /hour | /hour | | Network Unit (NU) | 1 GB transfer, bandwidth as used by TFGrid users | /hour | /hour | | Network Addressing | Description | mUSD | mTFT | | ------------------ | ------------------------------------------ | --------------------- | --------------------- | | IPv4 Address | Public Ip Address as used by a TFGrid user | /hour | /hour | | Unique Name | Usable as name on webgateways | /hour | /hour | | Unique Domain Name | Usable as dns name on webgateways | /hour | /hour | - mUSD = 1/1000 of USD, mTFT = 1/1000 of TFT - TFT pricing pegged to USD (pricing changes in line with TFT/USD rate) - The current TFT to USD price is USD - pricing is calculated per hour for the TFGrid 3.0 > Please check our Cloud Pricing for utilization sheet for more details. Pricing Expressed Per Month | Cloud Units | description | USD NO DISCOUNT | USD 60% DISCOUNT | | ----------------- | ------------------------------------------------ | ------------------- | ---------------------------- | | Compute Unit (CU) | typically 2 vcpu, 4 GB mem, 50 GB storage | 22.00/month | 8.80/month | | Storage Unit (SU) | typically 1 TB of netto usable storage | 14.00/month | 5.60/month | | Network Unit (NU) | 1 GB transfer, bandwidth as used by TFGrid users | 0.05/GB | 0.03/GB | | IPv4 Address | Public Ip Address as used by a TFGrid user | 5.00/month | 3.00/month | Operation Fees Operations on TFChain have a base fee of 0.001 TFT. Creating and destroying deployments usually includes several operations. Certified Capacity Renting capacity on certified nodes is charged 25% extra (x 1.25). Dedicated Nodes Since April 2022, TFGrid has introduced dedicated server support. With dedicated servers, you can reserve a full server exclusively for your use. This comes with 50% discount, making it a cost-effective option. Here are two examples of dedicated nodes and their prices, with maximum staking discount level (Gold => -60%) for 18 months staking: - Dedicated Node 1: 192 GB memory, 24 cores, 1000 GB SSD = $75 per month - Dedicated Node 2: 32 GB memory, 8 cores, 1000 GB SSD = $31 per month > Please check our Cloud Pricing for utilization sheet for more details. These dedicated nodes come with a generous 5TB bandwidth usage per node per month. They are well-suited for deploying blockchain nodes or other resource-intensive workloads. Using a dedicated node requires reserving a 3node in your TFGrid admin portal. Once reserved, you have exclusive deployment rights for that node, and there are no additional costs. When renting a dedicated node, you receive a 50% discount for the entire node. However, it's important to note that you will still be required to pay for the entire node, even with the discount applied. This means that while you enjoy the discount, the cost of the dedicated node is not prorated based on the resources you utilize. Staking Discount | Type | Pricing Level | Nr months of TFT linked to account | | ---------- | ------------- | ---------------------------------- | | No staking | - 0% | 0 | | Default | - 20% | 1.5 months | | Bronze | - 30% | 3 months | | Silver | - 40% | 6 months | | Gold | - 60% | 18 months | TFChain charges users for proof of utilization on an hourly basis. The discount applied is determined by the amount of TFT (ThreeFold Token) available in the user's TFChain account. It's important to note that the discount is calculated based on the TFT balance in the TFChain account, not on other supported blockchains like Stellar. This discount mechanism operates automatically, and users don't need to take any specific actions to avail themselves of this benefit. However, it's worth mentioning that the maximum discount for network-related services is 40%. Example for 40% discount (Silver) Let's break down the example for a 40% discount on Internet Capacity consumption: - Suppose your consumption on the ThreeFold Grid is worth 10 TFT per hour. - To be eligible for a 40% discount, you need to have a minimum of 43,200 TFT in your account, calculated as 10 TFT 24 hours 30 days 6 months. - Similarly, to be eligible for a 60% discount, you would need a minimum of 129,600 TFT in your account, calculated as 10 TFT 24 hours 30 days * 18 months. - If you have 60,000 TFT in your TFChain account, you would receive a 40% discount. - However, since you don't have enough tokens to qualify for the 60% discount, it won't be applicable. - With the 40% discount, your effective payment for the consumption would be 6 TFT per hour, as long as the amount of TFT in your account falls within the range of 43,200 to 129,600 (as calculated above). Keep in mind that these calculations are based on the example provided and the specific discount levels mentioned.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/pricing_toc/grid_billing.md",
    "title": "Grid Billing",
    "url": "/labs/knowledge_base/cloud_toc/pricing_toc/grid_billing",
    "content": "Introduction In this section, we explain how the billing works on the TFGrid by showing different examples such as node, rent and name contracts as well as public IP and network usage. > Note: Values on chain are expressed as units USD per hour, where 1 unit USD = 10.000.000 (or 1e7). To get the amount in TFT, simply divide the amount by 10^7. Resources to Update Some of the used resources should be updated whenever you try to do these calculations, these resources are the TFT price and the cloud units (SU and CU). Current TFT Price TFT price can be retrieved directly through Stellar or from the Dashboard, through the price available in the header. ! Current Cloud Units Values The current cloud units values can be retrieved directly from TChain with the Polkadot UI and the current chain state. - On the page , select as the - Select - Enter the value of the default pricing policy, which is , or enter the value of any other policy if you need to use a custom one - Press ! Node Contract For this example, we will assume that the resources for this deployment are the following: Calculating the CU Let's calculate the CU of this deployment. For our example, the CU value is . Make sure that this value is updated according to the current values. Calculating the SU Let's calculate the SU of this deployment. The current SU value is . Make sure that this value is updated according to the current values. Calculating the Billing Rate for the Contract Let's calculate the billing rate by combining the CU and SU from above. For this example, the current TFT value is . Make sure that this value is updated according to the current TFT value. Applying the Discounts Before assuming that the price above is the final price, check first if your twin is eligible for any of the available staking discount levels. To understand more about discount levels, please read this section. For this example, we assume that this twin has 18 months worth of TFTs staked, so the user will be eligible for a Gold discount level (60% discount). The 60% discount is thus equivalent to paying only 40% of the total price, as shown below: Rent Contract Getting the Resources You can get the resources of a node using different methods. You can use Grid Proxy, GraphQL and the Polkadot UI. - Using Grid Proxy - Grid Proxy API - Go to the section nodes endpoint - Click on - Write the node ID - Click on - Grid Proxy URL - You can use the following URL and replace node_id by the node ID: - Using GraphQL Navigate to ThreeFold's GraphQL, then use the following query and replace the node id with the desired node id. - TFChain and Polkadot UI - On the page Chain State of the polakdot UI, select as the - Select - Enter the node ID - Press ! For our example, these are the resources for node that will be used for the calculations. Calculating the CU Let's calculate the CU of this deployment. For our example, the CU value is . Make sure that this value is updated according to the current values. Calculating the SU For our example, the SU value is . Make sure that this value is updated according to the current values. Calculating the Billing Rate for the Contract For our example, the current TFT value is . Make sure that this value is updated according to the current values. Applying the Dedicated Node Discount There's a default discount for renting a node, this discount is not related to the staking discount. For more information on dedicated node discounts, please read this section. Applying the Staking Discount Before assuming that the price above is the final price, check first if your twin is eligible for any of the available staking discount levels. To understand more about discount levels, please read this section. For this example, let's assume that this twin has 18 months worth of TFTs staked, so the user will be eligible for a Gold discount level (60% discount). Name Contract Let's calculate the cost of a name contract. For our example, we use the following value from the Pricing Policy. ! This value can then be converted to USD. Since the current TFT conversion rate is , we have the following: Applying the Staking Discount Before assuming that the price above is the final price, check first if your twin is eligible for any of the available staking discount levels. To understand more about discount levels, please read this section. For this example, let's assume that this twin has 18 months worth of TFTs staked, so the user will be eligible for a Gold discount level (60% discount). Public IP Let's calculate the cost of public IPs. For our example, we use the following value from the Pricing Policy. ! This value can then be converted to USD. Since the current TFT conversion rate is , we have the following: Applying the Staking Discount Before assuming that the price above is the final price, check first if your twin is eligible for any of the available staking discount levels. To understand more about discount levels, please read this section. For this example, let's assume that this twin has 18 months worth of TFTs staked, so the user will be eligible for a Gold discount level (60% discount). > Note: This value gets added to the billing rate of your deployment. Network Usage Network Usage is calculated for deployments with public IPs. It's reported every hour and its cost can be calculated approximately as follows, where the data usage is the value of data sent and received: Data Usage To start, let's calculate the data usage. This can be tracked with a network tool like nload, where the total amount of data sent and received can be displayed. ! NU Value Let's find the NU value of this deployment. For our example, we use the following value from the Pricing Policy. ! This value can then be converted to USD. Since in our example the current TFT conversion rate is , we have the following: Applying the Staking Discount Before assuming that the price above is the final price, check first if your twin is eligible for any of the available staking discount levels. To understand more about discount levels, please read this section. For this example, let's assume that this twin has 18 months worth of TFTs staked, so the user will be eligible for a Gold discount level (60% discount). As an example, let's assume that we used a total of 10GB in the last hour, so the next hour the billing rate should be updated to: The billing rate in the next hour should be the following: > Note: The calculated value will always be an approximation since it's not possible to manually calculate the exact value of the data used. Billing History Since the billing rate gets updated hourly, you can check the billing history from GraphQL using the following query. Make sure to enter the proper contract ID.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/knowledge_base/cloud_toc/pricing_toc/cloud_pricing_compare.md",
    "title": "Cloud Pricing Compare",
    "url": "/labs/knowledge_base/cloud_toc/pricing_toc/cloud_pricing_compare",
    "content": "Introduction We compare cloud pricing with Cloudorado. Note that the information here can be subject to change and might not reflect current market prices. Compute A ThreeFold Compute Unit is (CU) - 4 GB memory - 2 virtual CPU cores A good site to compare is Cloudorado: https://www.cloudorado.com/ ! | Compute | Compute | | --------------------------------- | --------------------------------- | | ! | ! | Compute Conclusion > Our price can easily be > In market, this is between 36 and 202 USD Storage A ThreeFold Storage Unit is (SU) - 1 TB of storage Again, a good site to compare is Cloudorado: https://www.cloudorado.com/ ! ! Storage Conclusion > Our price can easily be > In market, this is between 19 and 154 USD",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/documentation.md",
    "title": "Documentation",
    "url": "/labs/documentation",
    "content": "The section contains all the practical information for farmers, developers and system administrators of the ThreeFold Grid. For complementary information on ThreeFold, refer to the ThreeFold Knowledge Base. TABLE OF CONTENTS - ThreeFold Dashboard - ThreeFold Connect - Developers - Farmers - System Administrators - ThreeFold Token",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/transaction_fees.md",
    "title": "Transaction Fees",
    "url": "/labs/documentation/threefold_token/transaction_fees",
    "content": "Introduction Here are the TFT transaction fees. Note that these values can be subject to change. We will do our best to update this section of the manual as needed. Bridge Fees The following are the fees for each type of bridge transfer. - BSC-Stellar bridge - From Stellar to BSC - 100 TFT - From BSC to Stellar - 1 TFT - Eth-Stellar bridge - From Stellar to Eth - 2000 TFT - From Eth to Stellar - 1 TFT - TFChain-Stellar bridge - From Stellar to TFChain - 1 TFT - From TFChain to Stellar - 1 TFT Chain Fees The following are the transaction fees for each chain. Every time a transaction is done on a given chain, there are fees for the operation on chain. - Stellar chain - 0.01 TFT - TFChain - 0.001 TFT - Ethereum chain - Fees are the gas price - Consult the Ethereum official documentation for more details - BSC - Fees are the gas price - Consult the BSC official documentation for more details Notes Here are some notes to take into account when doing TFT transfers: The fees paid directly by the users will be shown in the user's wallet at transaction time, not on the bridge page. The bridge fees can vary based on current on-chain gas prices. The current fee will always be shown on the bridge page before a transaction is initiated.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/threefold_token.md",
    "title": "ThreeFold Token",
    "url": "/labs/documentation/threefold_token",
    "content": "Introduction to TFT We present an overview of the ThreeFold token (TFT). Chains with TFT TFT lives on 4 different chains: TFChain, Stellar chain, Ethereum chain and Binance Smart Chain. - TFT are minted on the Stellar chain. - TFT are used to deploy workloads on TFChain. - TFT can be transacted on Ethereum chain, Binance Smart Chain and Stellar chain. TFT Contract Addresses on Chains The TFT contract address on different chains are the following: - TFT Contract address on Stellar - - TFT Contract address on Ethereum - - TFT Contract address on BSC - - TFT Contract address on Solana - Bridges Between Chains Bridges are available to easily navigate between the chains. - TFChain-Stellar Bridge - BSC-Stellar Bridge - Ethereum-Stellar Bridge Storing TFT There are many ways to store TFT. The TF Connect app wallet and a hardwallet wallet are two of the many possibilities. > Easily Store TFT Buy and Sell TFT You can buy and sell TFT with cryptocurrencies on Stellar Chain, Ethereum Chain and BNB Smart Chain. Using Lobstr is very effective to buy TFT with fiat or crypto in no time: > Get TFT: Quick Guide Transaction Fees Each time transactions are done on chains, transaction fees apply. > Learn about Transaction Fees Deploy on the TFGrid with TFT You can do almost anything on the TFGrid: as long as you're doing Linux stuff, ZOS got your back! > Get Started on the TFGrid Disclaimer The information provided in this section of the manual or any related discussion is intended as a proof of concept as part of the first iteration of the ThreeFold Grid. Further, the information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. The ThreeFold Token ($TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/tft_ethereum.md",
    "title": "Ethereum-Stellar Bridge",
    "url": "/labs/documentation/threefold_token/tft_bridges/tft_ethereum",
    "content": "Introduction The TFT Stellar-Ethereum bridge serves as a vital link between the Stellar and Ethereum blockchains, enabling the seamless transfer of TFT tokens between these two networks. This bridge enhances interoperability by allowing users to leverage the strengths of both platforms. With the bridge in place, TFT holders can convert their tokens from the Stellar network to the Ethereum network and vice versa, unlocking new possibilities for engagement with decentralized applications, smart contracts, and the vibrant Ethereum ecosystem. This bridge promotes liquidity, facilitates cross-chain transactions, and encourages collaboration between the Stellar and Ethereum communities. TFT Ethereum-Stellar Bridge The easiest way to transfer TFT between Ethereum and Stellar is to use the TFT Ethereum Bridge. We present here the main steps on how to use this bridge. When you go to the TFT Ethereum-Stellar bridge website, connect your Ethereum wallet. Then the bridge will present a QR code which you scan with your Stellar wallet. This will populate a transaction with the bridge wallet as the destination and an encoded form of your Ethereum address as the memo. The bridge will scan the transaction, decode the Ethereum wallet address, and deliver newly minted TFT on Ethereum, minus the bridge fees. For the reverse operation, going from Ethereum to Stellar, there is a smart contract interaction that burns TFT on Ethereum while embedding your Stellar wallet address. The bridge will scan that transaction and release TFT from its vault wallet to the specified Stellar address, again minus the bridge fees. Note that the contract address for TFT on Ethereum is the following: . To see the ThreeFold Token on Etherscan, check this link. TFT and Metamask The ThreeFold Token (TFT) is available on Ethereum. It is implemented as a wrapped asset with the following token address: We present here the basic steps to add TFT to Metamask. We also show how to buy TFT Metamask. Finally, we present the simple steps to use the TFT Ethereum Bridge. Add TFT to Metamask Open Metamask and import the ThreeFold Token. First click on : ! Then, choose : ! To add the ThreeFold Token, paste its Ethereum address in the field . The address is the following: Once you paste the TFT contract address, the parameter should automatically be filled with . Click on the button . ! To confirm, click on the button : ! TFT is now added to Metamask. Buy TFT on Metamask Liquidity is present on Ethereum so you can use the \"Swap\" functionality from Metamask directly or go to Uniswap to swap Ethereum, or any other token, to TFT. When using Uniswap, paste the TFT token address in the field to select TFT on Ethereum. The TFT token address is the following: ! * Questions and Feedback If you have any question, feel free to write a post on the Threefold Forum.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/tft_bridges.md",
    "title": "TFT Bridges",
    "url": "/labs/documentation/threefold_token/tft_bridges",
    "content": "Introduction The ThreeFold Token (TFT) exists on different chains. To transfer TFTs between chains, you can use different TFT Bridges. The following diagram shows the different bridges and ways to transfer ThreeFold Tokens (TFT) from one chain to another. > Note: You can click on a given bridge to access its related guide. Links The links to the bridges for TFT are the following: Stellar-Ethereum Bridge This bridge is accessible at the following link: https://bridge.eth.threefold.io/ Read this guide for more information Stellar-BSC Bridge This bridge is accessible at the following link: https://bridge.bsc.threefold.io/ Read this guide for more information Stellar-TFChain Mainnet Bridge This bridge is accessible on the ThreeFold Mainnet Dashboard: https://dashboard.grid.tf/. Read this guide for more information Stellar-TFChain Testnet Bridge This bridge is accessible on the ThreeFold Testnet Dashboard: https://dashboard.test.grid.tf/. Read this guide for more information Stellar-Solana Bridge This bridge is accessible on the ThreeFold Connect app. Read this guide for more information Chains Functions The different bridges help you move your TFT and achieve different goals: The TFChain-Stellar Bridge is used to go between the Stellar Chain and TF Chain for Main net and Test net. The BSC-Stellar Bridge is used to go between the Stellar Chain and Binance Smart Chain (BSC). The Stellar-Ethereum Bridge is used to go between the Stellar Chain and the Ethereum blockchain. * The Stellar-Solana Bridge is used to go between the Stellar Chain and the Solana blockchain. As shown in the diagram, to go from BSC to TF Chain, or from TF Chain to BSC, you need to use first the BSC-Stellar bridge, then the Stellar-TFChain bridge. To go from the Ethereum blockchain to TFChain, you need to use the Ethereum-Stellar bridge then the Stellar-TFChain bridge. BSC, Stellar and Ethereum can be used to sell/buy TFT, while TFChain can be used to deploy Dapps on the ThreeFold Dashboard. The TFT minting process happens on Stellar Blockchain. > Note: You should always start with a small amount the first time you try a bridge. Bridge Details When you bridge TFT from Stellar to another chain, the TFT on Stellar is vaulted. When you bridge TFT back to Stellar, the TFT on the other chain is burned and the vaulted TFT is released.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/tfchain_stellar_bridge.md",
    "title": "TFChain-Stellar Bridge",
    "url": "/labs/documentation/threefold_token/tft_bridges/tfchain_stellar_bridge",
    "content": "Introduction We present here the general steps to use the TFChain-Stellar Bridge. Note that the only difference between using the Main net or Test net TFChain-Stellar bridge lies in the ThreeFold Dashboard URL. Read the Dashboard section for more information. How to Use the TFChain-Stellar Bridge 1. Go on the ThreeFold Dashboard 1. Main Net 2. Test Net 2. Go to TFChain -> TF Token Bridge 3. 2-Way Bridge: Transfer TFT from Stellar to TFChain Click on Deposit Transfer TFT from TFChain to Stellar Click on Withdraw Note: To withdraw, make sure to use a valid Stellar address. Do not use the Stellar Bridge address from the page. Bridge Fees To learn more about the bridge fees, read this documentation. Questions and Feedback If you have any question, feel free to write a post on the Threefold Forum.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_track_bridge.md",
    "title": "Tracking Transfers",
    "url": "/labs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_track_bridge",
    "content": "Tracking Solana Bridge Transfers Overview This guide explains how to track TFT transfers from Stellar to Solana using the bridge. When you initiate a bridge transfer, the destination Solana address is encoded in the memo field of the Stellar transaction and requires conversion to be readable. Prerequisites - Access to a Stellar blockchain explorer - Basic understanding of hexadecimal and Base58 encoding - The transaction hash or details from your bridge transfer Step 1: Locate Your Transaction on Stellar Explorer 1. Navigate to your Stellar transaction in the blockchain explorer 2. Ensure you are viewing the transaction in HEX format !Stellar Explorer HEX Format Step 2: Extract and Convert the Memo Field Extract the Memo The destination Solana address is encoded in the memo field of your Stellar transaction. This memo is in hexadecimal format and needs to be converted to Base58. Convert Hex to Base58 1. Copy the hexadecimal memo from your Stellar transaction 2. Use a hex-to-Base58 conversion tool such as the Base58 Encoder/Decoder 3. Select hex as the input format 4. Paste the memo content into the conversion tool Example conversion process: !Hex to Base58 Conversion Retrieve Your Solana Address The conversion output will display your destination Solana address: !Converted Solana Address Step 3: Verify Transfer on Solana Search Your Address on Solscan 1. Navigate to Solscan: Go to Solscan 2. Enter your Solana address: - Paste the Base58 converted address (from Step 2) into the search bar - Press Enter or click the search button 3. Access your account page: Solscan will display your account details page Check Balance Changes 4. Navigate to Balance Changes: - On your account page, look for the \"Balance Changes\" tab - Click on it to view your transaction history 5. Verify your TFT transfer: Look for the incoming TFT transaction that corresponds to your bridge transfer Example: View balance changes This example shows how the balance changes section displays TFT transfers on a Solana address. Troubleshooting Common Issues - Memo not visible: Ensure you're viewing the transaction in HEX format - Conversion errors: Verify you've copied the complete memo field - Address not found: Allow time for blockchain confirmation (typically 5-10 minutes) Additional Resources - Stellar Explorer - Solscan Explorer - Base58 Conversion Tool Next Steps Once you've successfully tracked your transfer: - Verify the TFT balance in your Solana wallet - Use your TFT on the Solana network as needed - Keep transaction records for future reference For additional bridge support, consult the Stellar-Solana Bridge documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_solana_how.md",
    "title": "Bridge to Solana",
    "url": "/labs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_solana_how",
    "content": "Bridge to Solana To bridge from Stellar to Solana, use the bridge function on the ThreeFold Connect app. Read this section for more information.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_solana_bridge.md",
    "title": "Stellar-Solana Bridge",
    "url": "/labs/documentation/threefold_token/tft_bridges/stellar_solana_bridge",
    "content": "Bridging TFT from Stellar to Solana Overview There is a one-way bridge to transfer TFT from Stellar to Solana. The process is straightforward thanks to the bridge function on the ThreeFold Connect app. Before using the bridge, make sure to create an associated token account on Solana. - Create an associated token account - Bridge TFT from Stellar to Solana For information on how to track bridge transfers, read this.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_solana_ata.md",
    "title": "Associated Token Address",
    "url": "/labs/documentation/threefold_token/tft_bridges/stellar_solana_bridge/stellar_solana_ata",
    "content": "TFT Associated Token Account on Solana Before receiving TFT (Threefold Token) on Solana, you must create an Associated Token Account. This is essential for the Stellar-to-Solana bridge - without it, your transferred tokens might get stuck. TFT Mint Address The official TFT mint address on Solana is: Setting Up Your Associated Token Account 1. Open your wallet (Phantom, Solflare, etc.) 2. Find the option to add a custom token (usually a \"+\" button) 3. Enter the TFT mint address 4. Approve the transaction Important Notes - Cost: Creating the account costs approximately 0.002 SOL (one-time fee) - SOL required: Make sure you have at least 0.01 SOL in your wallet - Bridge requirement: The Stellar-to-Solana bridge cannot create this account for you - it must exist before transferring - One-time setup: Once created, you can receive TFT multiple times without creating another account - Verification: Always use the official mint address shown above",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/bsc_stellar_bridge/bsc_stellar_bridge_verification.md",
    "title": "BSC-Stellar Bridge Verification",
    "url": "/labs/documentation/threefold_token/tft_bridges/bsc_stellar_bridge/bsc_stellar_bridge_verification",
    "content": "Introduction In this guide, we show how to verify transactions on the BSC-Stellar bridge. When using the TFT bridge to Binance Chain (BSC), it's not simple to verify that tokens arrived at the destination wallet. The core reason is that it's not a regular token transfer, and so it doesn't show up that way in blockchain explorers. Instead, the result of using the bridge is a contract call that actually mints wrapped TFT on Binance Chain. The corresponding tokens are vaulted on Stellar, and when the bridge is used in the opposite direction, TFT on Binance Chain are burnt and then released on Stellar. Thus, the total number of TFT in circulation is constant throughout these operations. What we can do, instead of looking at token transfers, is to look for the mint events themselves. By parsing together data from a few different sources, we can verify that tokens sent to the bridge address on Stellar indeed arrived at their destination on Binance Chain. From Stellar to BSC We start with a bridge example going from Stellar to BSC. For this tutorial, we'll use an example transaction found by looking at the transaction history from the bridge wallet. This wallet uses both directions of bridging. In our case, we want to look for an inbound transaction. Here's an example: ! The first thing to do is decode the destination wallet address on Binance Chain, which is contained in the memo we see here on Stellar. It's encoded in base 64 and we can convert back to the original hex using a tool like this Base64 to Hex Converter: ! The output is the destination address on Binance Chain. Since we usually write hex values with a leading , the full address in the normal format is . The other thing to note is the date and time of the original Stellar transaction. There are sometimes delays on the bridge, but we know that the outbound transaction on Binance Chain will always happen after the inbound transaction on Stellar. In this case, we are looking at the most recent transaction on the Stellar side of the bridge, so we can just look for the most recent transaction on the Binance side too. To do that, we'll go to the Bitquery explorer for BSC. We're looking for the token contract for TFT on Binance Chain, which you can find in our documentation: . On the contract page, click Events: ! Then on the row Mint events, click on the icon aligned with the Event Count column: ! We then arrive at this page: ! You can use the Date range selector here to look for events in the past. In this case, we'll just look for the latest one, since that's what we're using for our example. Click the transaction link and then copy the transaction hash from the next page: ! To get a look into the contract call, we switch over to BscScan at this point for a better view. Search for the transaction hash and then select the event log. We will then see the output address and the amount of TFT minted in the data below: ! We can see that the address matches the one we decoded from the Stellar memo. As for the tokens amount, we need to account fo the fact that TFT uses 7 decimal places. For this reason, we move the decimal place by dividing by 1e7 (i.e. 1x10⁷): ! The original transaction on Stellar was for 2600 TFT, and the output after subtracting the 100 TFT bridge fee is 2500 TFT. From BSC to Stellar Now, we will see a bridge example going from BSC to Stellar. This time, we start at the BscScan explorer. Here is an example bridge transaction, as seen from the account transactions view, which is the default view if you search for a wallet address: ! We can identify it because it's using the Withdraw method in a transaction to the TFT contract address on BSC. If we open the Transaction Details page by clicking on the transaction hash and switch to the Logs view, we can see more details: ! In particular, this shows us the destination address on Stellar and the TFT amount. To get the decimal form, we once again divide by 1e7 (i.e. 1x10⁷). Back on StellarExpert, we can find a transaction on the same date just shortly after the transaction on BSC, for the same amount of TFT minus the 1 TFT bridge fee. It originates from the bridge address on Stellar and the destination is the address we see in the contract call above: ! As a final step, we double-check that the transaction we see on Stellar is actually the result of the bridge interaction we saw on BSC. It's possible, after all, that the user has sent multiple transactions with the same amount. To do this, we look at the memo on the Stellar transaction. As above, we need to convert from base 64 to hex again. To do so, we can once again use the Base64 to HEX Converter: ! If the output hex doesn't already look familiar, you can compare it to the transaction hash from above, while remembering that is just a formatting convention indicating that hex data follows. Indeed, we can even search it on BscScan, to come full circle back to transaction details page we have seen before. We have made a direct link between the use of the bridge contract on BSC and the resulting payment from the bridge on Stellar. Conclusion In this guide, we covered how to verify bridge transactions going from BSC to Stellar and from Stellar to BSC. In the world of public blockchains, all data is recorded and accessible, but sometimes it takes some investigation to find what we are looking for. If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/tft_bridges/bsc_stellar_bridge/bsc_stellar_bridge.md",
    "title": "BSC-Stellar Bridge",
    "url": "/labs/documentation/threefold_token/tft_bridges/bsc_stellar_bridge",
    "content": "Introduction We present here the main steps to use the BSC-Stellar Bridge. How to Use the BSC-Stellar Bridge To use the BSC-Stellar Bridge, follow the following steps. If this is your first time with MetaMask and BSC, read the section Setting up TFT on Metamask. It will cost 100 TFT to bridge from Stellar to BSC, and 1 TFT to bridge from BSC to Stellar. There is also a fixed fee of 0.01 TFT when using the Stellar blockchain. Those fees are taken from the total of what you are bridging. For example, if you Bridge 200 TFT, from Stellar to BSC, you will receive 100 TFT. > Note: The bridge will process deposits/withdrawals within 48 hours. Bridge from Stellar to BSC Pre-requisites: Metamask account TF Connect App+Wallet TFT on Stellar Blockchain Steps 1. Go to the BSC-Stellar Bridge website. 2. Connect your MetaMask Wallet. 3. Sign in with MetaMask. 4. Choose the option Deposit from Stellar. 5. Agree to the ThreeFold Terms. 6. Read and tick the box of the Warning Message. 7. On your phone, open up your ThreeFold Connect App and go to the wallet section. 8. Select the option Send. 9. Select the Stellar chain. 10. Click on the button Scan QR Code . The QR Code option automatically fill up your MESSAGE. 11. Scan the QR code that appears on the Bridge window (or write the information manually). 12. Make sure the MESSAGE is correctly entered. 13. Press Send Tokens. 14. Press Confirm. In this method, you use the Bridge directly. Thus, it is normal if you do not see your standard MetaMask address. MetaMask is on ERC20 and TFT is on Stellar. You are sending TFT to the Bridge's address, and the Bridge sends money to your wallet afterward. Bridge from BSC to Stellar Pre-requisites: Metamask account TF Connect App+Wallet BNB for gas fees TFT Steps 1. Go to the BSC-Stellar Bridge website. 2. Connect your MetaMask Wallet. 3. Sign in with MetaMask. 4. Choose the option Deposit from BSC. 5. Agree to the ThreeFold Terms. 6. Read and tick the box of the Warning Message. 7. On your phone, open up your ThreeFold Connect App and go to the wallet section. 8. Copy your Stellar address. 9. Paste your Stellar address in the proper field on The BSC-Stellar Bridge. 10. Enter the amount of TFT you want to bridge. 11. Click on Withdraw. 12. Follow the instructions on your Metamask Wallet. General Tips It's a good idea to start with a small amount the first time. The process is usually quick, but it can take up to 48h. In doubt, contact TF Support. Going from Stellar to BSC costs 100 TFT. Going from BSC to Stellar costs 1 TFT. There is also fixed fee of 0.01 TFT when using the Stellar Blockchain. Gas fees on BSC is usually around 5-20 gwei. You can try the bridge later if gas fees are high at the moment of your transaction. Setting Up TFT on Metamask Download Metamask here. Then, install the Metamask extension in your local browser. Create a Metamask account Switch the network to . You will have to create a new network with following information): Mainnet Network Name: Smart Chain New RPC URL: ChainID: 56 Symbol: BNB Block Explorer URL: https://bscscan.com Add TFT token in Metamask -> custom token -> contract address = Bridge Fees To learn more about the bridge fees, read this documentation. Questions and Feedback If you have any question, feel free to write a post on the Threefold Forum.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/storing_tft/tf_connect_app.md",
    "title": "ThreeFold Connect App (Stellar)",
    "url": "/labs/documentation/threefold_token/storing_tft/tf_connect_app",
    "content": "Introduction In this section, we cover the basics of the ThreeFold Connect app. This app is available for Android and iOS. - Note that for Android phones, you need at minimum Android Nougat, the 8.0 software version. - Note that for iOS phones, you need at minimum iOS 14.5. It will be soon available to iOS 13. ! ThreeFold Connect Installation Either use the links above, or search for the ThreeFold Connect app on the Apple Store or the Google Play store. Then install and open the app. If you want to leave a 5 star review of the app, no one here will stop you! ! ! When you try to open the app, if you get an error message such as : \"Error in initialization in Flagsmith...\", you might need to upgrade your phone to a newer software version (8.0 for Android and 13 for iOS). Once you are in the application, you will see some introduction pages to help you familiarize with the TF Connect app. You will also be asked to read and accept ThreeFold's Terms and conditions. ! ! You will then be asked to either SIGN UP or RECOVER ACCOUNT. For now, we will show how to sign up. Later in the guide, we will show you how to recover an account. ! You will then be asked to choose a Threefold Connect Id. This ID will be used, as well as the seed phrase, when you want to recover an account. Choose wisely. And do not forget it! Here we will use TFExample, as an example. ! Next, you need to add a valid email address. This will be used as a broad KYC. You will need to access your email and confirm the validation email from ThreeFold to use properly the TF Connect app wallet. ! Then, the next step is crucial! Make sure no one is around looking at your screen. You will be shown your seed phrase. Keep this in a secure and offline place. You will need the 3bot ID and the seed phrase to recover your account. This seed phrase is of utmost important. Do not lose it nor give it to anyone. ! Once you've hit Next, you will be asked to write down 3 random words of your seed phrase. This is a necessary step to ensure you have taken the time to write down your seed phrase. ! Then, you'll be asked to confirm your TF 3bot name and the associated email. ! Finally, you will be asked to choose a 4-digit pin. This will be needed to use the ThreeFold Connect app. If you ever forget this 4-digit pin, you will need to recover your account from your 3bot name and your seed phrase. You will need to confirm the new pin in the next step. ! That's it! You've created your ThreeFold Connect account. You can press the hamburger menu on the top left to explore the ThreeFold Connect app. ! In the next step, we will create a ThreeFold Connect Wallet. You'll see, it's very simple! Verify your identity by Email Once you've created your account, an email will be sent to the email address you've chosen in the account creation process. To verify your email, go on your email account and open the email sent by info@openkyc.live with the subject Verify your email address. In this email, click on the link Verify my email address. This will lead you to a login.threefold.me link. The process should be automatic. Once this is done, you will receive a confirmation on screen, as well as on your phone. ! ! ! If for some reason, you did not receive the verification email, simply click on Verify and another email will be sent. ! ! Change email associated with TF account If you want to change your email, simply click on the pencil next to your email and write another email. You will need to redo the KYC verification process. ! Create a Wallet To create a wallet, click on the ThreeFold Connect app menu. This is what you see. Choose Wallet. ! Once you are in the section Wallet, click on Create Initial Wallet. If it doesn't work the first time, retry some more. If you have trouble creating a wallet, make sure your connection is reliable. You can try a couple of minutes later if it still doesn't work. With a reliable connection, there shouldn't be any problem. Contact TF Support if problems persist. ! This is what you see when the TF Grid is initializing your wallet. ! Once your wallet is initialized, you will see No blanace found for this wallet. You can click on this button to enter the wallet. ! Once inside your wallet, this is what you see. ! We will now see where the Stellar and the TF Chain Addresses and Secrets are to be found. We will also changing the wallet name. To do so, click on the circled i at the bottom right of the screen. ! ! You can choose the name you want for your wallet. Here we use TFWalletExample. Note that you can also use alphanumeric characters. ! At the top of the section Wallet, we can see that the name has changed. ! Now, if you want to copy your Stellar Address, simply click on the button presented with the green circle. To access the TF Chain address, click on the button presented with the red circle. When your phone has copied the address, the TF Connect app will give show a confirmation message as shown below. ! In some situations, you will want to access the Stellar and TF Chain secrets. To do so, simply click on the \"eye\" button of the desired chain, and then copy the secret. ! See ThreeFold Connect App and Wallet Transactions To see your transactions, simply click on the two arrows at the bottom of the screen, as shown below. ! Connect to the Planetary Network To connect to the Planetary Network, click on the Planetary Network on the TF menu as shown below. ! Connecting to the Planetary Network couldn't be easier. Simply click on the connection button and you will see Connected on the screen once the connection is settled. ! Show Seed Phrase - Remove Account from TF Connect App To see your seed phrase or remove your account from the TF Connect app, choose Settings in the ThreeFold Connect app menu. ! First, to see your seed phrase, click on this button as shown below: ! You will then be able to see your seed phrase. You can make sure you have your seed phrase somewhere safe, offline, before removing your account. Now, we will remove the account from the ThreeFold Connect app. In Settings, click on the arrow circled in green and click on the red button with a white dashed in it. Beware: once done, you can only recover your account with your 3bot ID and your seed phrase. ! You will be asked to confirm your action as a security check. ! Recover Account on the ThreeFold Connect App Once you're removed your account, if you want to recover your account, choose the option RECOVER ACCOUNT on the opening screen on the app. ! You will be asked to enter your 3bot ID as well as your seed phrase. ! You will then be asked to choose and confirm a new 4-digit pin code. Once this is done, you will receive the following confirmation: ! That's it! You've recovered your account. Import Farm from the TF Connect App to the TF Dashboard If you want to import your farm from the ThreeFold Connect app to the ThreeFold Dashboard, follow these steps. You will need to use the old version of the Dashboard for this (https://old.dashboard.grid.tf). Note that as of now, you cannot import your farm from the TF Dashboard to the ThreeFold Connect app, but it is possible to import your wallet. First, you want to find the TF Chain Secret, this is, in short, a hex version of the private key. To find the secret, head over to the Farmer migration (via the TF Menu). In the Farming migration section, click on the arrow (in green here) of the farm you want to export on the ThreeFold Dashboard. ! Then, click on the arrow (in green) to see your TF Chain Secret. ! Click on the button to copy the Secret. The app will show a confirmation message. ! Now head over to the browser with your polkadot.js extension. On your browser, click on the extension button (in green). ! Select the polkadot\\{.js\\} extension. ! Click on the plus button as shown in green. ! Choose the option Import account from pre-existing seed. ! In the box EXISTING 12 OR 24-WORD MNEMONIC SEED, paste the TF Chain Secret. Note that this Secret is a HEX version of your seed phrase. ! Choose a name for your account. Choose a password. ! When you go on the ThreeFold Dashboard, you will now see your newly added account. Click on it. ! In the Farm section, you can now see your farm. You have successfully move the farm from the ThreeFold Connect app to the ThreeFold Dashboard. ! You can see here that the farming reward address is the same as before. ! That's it! You have successfully imported the farm from the ThreeFold Connect app to the ThreeFold Dashboard. Import TF Dashboard Wallet to the TF Connect App Wallet Now that we've seen how to go from the TF Connect app to the ThreeFold Dashboard, we will now show how to go the other way around. This method is very simple. You will need your TF Dashboard seed phrase handy. Go in the Wallet section of the ThreeFold Connect app and click on import at the bottom right (in green). ! Then simply name your wallet and enter the TF Dashboard seed phrase. ! Then in the Wallet section, you will now see the wallet. ! Send and Receive TFT between TF Connect Wallets To send and receive TFT between TF Connect Wallet, go into Wallet and select the wallet you want to use.Remember that you must always send and receive TFT on the same chain, so choose either Stellar or TFChain. Send TFT To send tokens, select Send Coins in the wallet section. To send TFT, you can scan the QR code of the address you wish to send tokens to. This will enter automatically the necessary information. Make sure to double check that the information is correct to avoid any complications. Otherwise, you can simply enter the correct address in the section To. Choose the amount you want to send. Then click on SEND TOKENS. Note that, for such transactions, there is a maximum fee of 0.10 TFT on the Stellar blockchain, and a maximum fee of 0.01 TFT on the TFChain. This amount is taken from the amount you are sending. It is not taken directly in your wallet. Receive TFT To receive tokens, select Receive Coins in the wallet section. To receive TFT, you can generate a QR code to share to the person waiting to send you tokens. Otherwise, the sender can simply use your Stellar or TFChain address and send you TFT. To generate the QR Code, select the chain you want to use, Stellar or TFChain, enter the amount and the message if needed and click on GENERATE QR CODE. Note that there is no message option for TFChain, only for Stellar. This will generate a QR Code that can be scanned by other devices. Send TFT to Hardware Wallet on Stellar Blockchain Before sending TFT to a hardware wallet, make sure the hardware wallet has a TFT trustline on the Stellar Blockchain. For more information, read this section. Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/storing_tft/storing_tft.md",
    "title": "Storing TFT",
    "url": "/labs/documentation/threefold_token/storing_tft",
    "content": "In this section, we present different ways to store ThreeFold tokens. The simplest way is to use the ThreeFold Connect app to store your TFT. You can also use a hardware wallet for additional security. There are various options available to store TFTs, each with its own benefits and considerations. When it comes to storing TFTs (ThreeFold Tokens), users have the flexibility to choose between different wallet options depending on the blockchain platform on which the tokens are issued. If TFTs are issued on the Stellar blockchain, users can opt to store them in Stellar-compatible wallets. On the other hand, if TFTs are bridged and swapped from Stellar to the Binance Smart Chain (BSC) or Ethereum Network, users can utilize BSC-compatible and ETH-compatible wallets to store their tokens. TABLE OF CONTENTS - ThreeFold Connect App (Stellar) - Lobstr Wallet (Stellar) - MetaMask (BSC & ETH) - Hardware Wallet",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/storing_tft/metamask.md",
    "title": "MetaMask (BSC & ETH)",
    "url": "/labs/documentation/threefold_token/storing_tft/metamask",
    "content": "Introduction MetaMask is a popular browser extension wallet that allows users to interact with various blockchain networks, including BSC and the Ethereum networks. By following the steps outlined in this guide, you'll be able to configure your MetaMask wallet to support TFT tokens on BSC and seamlessly participate in the TFT ecosystem. So let's dive in and explore how to set up TFT on MetaMask with Binance Smart Chain. TFT Addresses With MetaMask, you can store TFT on both Binance Smart Chain and the Ethereum chain. Make sure to use the correct TFT address when doing transactions. Ethereum Chain Address The ThreeFold Token (TFT) is available on Ethereum. It is implemented as a wrapped asset with the following token address: BSC Address The ThreeFold Token (TFT) is available on BSC. It is implemented as a wrapped asset with the following token address: Get Started We present the steps on BSC. Make sure to switch to Ethereum and to use the TFT Ethereum address if you want to proceed on Ethereum. Install & Create Metamask Account Go to the Metamask website to download and install the Metamask extension for your browser. Follow this tutorial to install metamask to your preferred browser and create. Once you’ve installed MetaMask, you’ll see the small fox icon at the top right of your screen, and a notification will appear, letting you know that the install was successful. ! Create a Metamask account ! Assuming you are a new user, click the “Create a Wallet” button on the right to get started with a new wallet. ! This is your password for access to your wallet on your local device. As with all online accounts, you should ensure that you are using a strong password. On the next page, you’ll be given a set of 12 words that act as your private key. ! You can think of these words as your master key to all your digital assets. If you have lost or forgotten your password, you can use this set of 12 words to restore your wallet on any device. However, if anyone were to gain access to these 12 words, they could do the same. This passphrase is very important, so be sure to keep it safe. Once you have written them down, you can click the “Next” button. Then, just to make sure that you have written them down, MetaMask asks you to confirm your secret recovery phrase by selecting the words in the order they were originally given. You must write down your 12 words in the correct order. Once you’ve entered those words, you can click “Continue.” Then, you’re done! It’s that easy. Configure a BSC Wallet (Mainnet) for your TFT MetaMask supports various wallet networks, including Ethereum, Binance Smart Chain (BSC), and more. By adding the BSC network, you can seamlessly manage and transact with BSC-based assets like TFT tokens directly within your MetaMask wallet. To configure a BSC wallet on MetaMask, you can add the BSC network by specifying the network details such as the chain ID, RPC URL, and symbol. Switch Network from ETH to BSC (Auto Add) You might notice straight away that we’re still dealing with an Ethereum wallet. But we want to have a Wallet on BSC Network. To add a new network, click it to access a drop-down menu and hit the \"Add Network” tab to proceed to the next step. ! You can add BNB Smart Chain from the list of popular networks by clicking \"Add\", and approving the request once it pops up. ! After it's added. you will realize that your mainnet network has turned into “Smart Chain.” If you wish to change back to the Ethereum network, simply press on the “Smart Chain” menu on the top. ! Add TFT Asset to BSC Wallet (Mainnet) Now that you have successfully created a BSC Wallet, we will need to add TFT onto your BSC Wallet. To add, go to your 'assets' page and click on 'Import Tokens' at the bottom of the page. ! You can add TFT onto your wallet by either automatically adding it by typing 'TFT ON BSC (TFT)' on 'search' page, ! or by going to 'custom token' page and entering TFT details manually. Make sure you enter the right details below to add TFT to your wallet successfully: - Token Contract Address: Metamask will add the rest of the details, once added, click 'Add custom token'. ! After the click, you will be asked by Metamask to confirm the token import. Click 'Import Tokens'. ! Congratulations, you have successfully added TFT to your BSC Wallet on Metamask. ! You should be seeing TFT listed on your Wallet homepage's 'Assets' section. Now that we've successfully listed TFT, we can go ahead and do TFT transactions via Metamask. ! Important Notice To deposit TFT tokens to your MetaMask BSC wallet, you can only initiate a transfer or swap from any other wallet or exchange platform that operates on the Binance Smart Chain (BSC) network. Ensure that the platform you are using is on BSC to avoid the risk of losing tokens. For example, you cannot transfer TFT tokens directly from the TFConnect app to MetaMask, because TFT tokens on TFT Connect operate on the Stellar network, while TFT on MetaMask lives on Binance Smart Chain (BSC) Network. But don't worry! You can still swap your Stellar TFT into BSC TFT and vice versa by bridging them using our TFT BSC Bridge. See tutorial here. You can also buy TFTs on BSC-supported exchangers like Pancake Swap. See tutorial here Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/storing_tft/lobstr_wallet.md",
    "title": "Lobstr Wallet (Stellar)",
    "url": "/labs/documentation/threefold_token/storing_tft/lobstr_wallet",
    "content": "Introduction Welcome to our guide on how to store TFT tokens (Stellar) via the Lobstr Wallet! Lobster Wallet is a secure and user-friendly wallet designed specifically for the Stellar blockchain. It allows you to store, manage, and transact with your Stellar-based assets, including TFT (ThreeFold Token). In this tutorial, we will guide you through the process of setting up Lobster Wallet and storing your TFT (Stellar) tokens. By following the steps outlined in this guide, you will be able to access and manage your TFT assets with ease and confidence using the Lobster Wallet platform. Prerequisites - XLM: When storing TFT tokens using Lobstr wallet, a certain amount of XLM funding is required to facilitate the sending and receiving of assets on the Stellar network. If you already have some XLMs stored in another Stellar wallet or exchange, you could simply withdraw them to your new Lobstr wallet account after you complete the signup process. If not, there are multiple ways to acquire XLM and send it to your wallet. One option is to utilize XLM-supported exchanges, which provide a convenient platform for purchasing XLM. Click here to access a comprehensive list of exchanges that support XLM. You could also purchase some XLMs directly inside yor new Lobstr wallet account by using Fiat currency payment like credit and debit cards. Get Started Create a New Lobstr Wallet For this guide, we will focus on creating the mobile app version of Lobstr Wallet. Go to https://lobstr.co/ from your mobile app and download the Lobstr Wallet App to your mobile phone. ! You can also create and use the web version of Lobstr wallet by signing up on the official website at hhttps://lobstr.co/. Go to Lobstr's knowledge base for the web sign up tutorial. Insert your email address and choose a strong and unique password. ! Verify your account by clicking on the 'Verify Email' button in the message sent to your email address. ! Press the 'Create Wallet' button if you'd like to create a new Stellar wallet. ! Write down your Recovery Phrase, which is needed to recover access to your account in case of a password loss or if your phone is lost or stolen. The word order is very important. Note: It is essential to save your secret key securely during the process of creating a new account or importing an existing one. The secret key is a critical component that grants access to your wallet and funds. Make sure to store it in a safe and offline location, such as a password manager or a physical backup, to prevent unauthorized access. Do not share your secret key with anyone and exercise caution to protect your assets. ! (Optional) Set a federation address, which is the unique name of your new Stellar wallet that can be shared with others to receive funds and click 'Save'. ! Congratulations! You just created a new Lobstr wallet account. Fund XLM to Wallet To initiate the process of storing TFT in Solar, the first step is to fund your wallet with XLM (Stellar Lumens). Transfer at least 1 XLM to your wallet to activate it. To purchase Stellar lumens with Lobstr using credit / debit card, you can use the ‘Buy Lumens’ option on the LOBSTR web and mobile apps. Note: Services relating to credit card payments are provided byMoonpay, which is a separate platform owned by a third party. Click here to read the full tutorial. Once XLM is successfuly sent, it will appear on your Lobstr wallet homepage. Adding TFT Asset to Lobstr Wallet To store TFT in your Lobstr Wallet, we will need to have a TFT wallet added into our account. This is done by adding TFT Asset. This will allow you to view your TFT balance, send and receive TFT tokens, and engage in trading activities involving TFT within the Solar wallet. To add the TFT (ThreeFold Token) asset to your Solar Wallet account, follow these steps: Open the \"Assets\" screen from the left side menu ! Use the search at the top of the \"Assets\" screen. From there you can search for TFT and it will show TFT and Click on Add button. IMPORTANT: It is important to ensure that you also see the name \"threefold.io\" next to the logo , as this verifies that you are selecting the genuine TFT asset associated with ThreeFold. Beware of imposters or fraudulent assets that may attempt to mimic TFT. ThreeFold cannot assume responsibility for any errors or mistakes made during the trustline creation process done by users. If you have any uncertainties or doubts, it is always recommended to seek assistance from official support channels or trusted sources to ensure the accuracy of the trustline configuration. ! Congratulations! TFT asset has been successfully added to your Lobstr Wallet account. If you've performed the steps above correctly and there are no assets displayed, contact Lobstr support with the details and the home domain of the asset. You can now store TFT by depositing it from another wallet on your TFT Asset page. Important Notice If you are looking for ways to get / purchase TFT (Stellar) on Lobstr Wallet by trading or swapping, you will find the according information here. Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/storing_tft/hardware_wallet.md",
    "title": "Hardware Wallet",
    "url": "/labs/documentation/threefold_token/storing_tft/hardware_wallet",
    "content": "Introduction You can store TFT on a hardwallet for optimal security. Also, if you are a farmer, instead of using the ThreeFold Connect app to receive your farming rewards (TFTs), you can also have your farming rewards sent to a hardware wallet. In this case, you will need to enable a TFT trustline to receive TFT. You can store TFT on a hardware wallet on Stellar chain, BSC or the Ethereum chain. For this guide, we show how to store TFT on a hardware wallet on Stellar chain. To store TFT on Stellar, you can use any hardware wallet that supports the Stellar Blockchain, such as a Ledger. Setting up a TFT Trustline on Stellar Blockchain Setting up a trustline is simple. We will show an example with a Ledger hardware wallet. The process is similar with other hardware wallets. Just make sure that your hardware wallet is compatible with the Stellar blockchain, as the TFT from farming rewards will be sent on the Stellar Blockchain. First, download Ledger Live and download the Stellar application in Manager. Go on an official Stellar website such as Stellarterm or StellarX. For this example, we will be using Stellarterm.com. Unlock your Ledger by entering your password. Select the Stellar App. In our case, we do not need to create an account on Stellerterm, since we are using a hardware wallet. On Stellarterm.com, click on the button LOGIN. ! At the bottom of the page, select the option Ledger or another option if you are using a different hardware wallet. ! Click Connect with Ledger. ! Read and accept the Terms of Use. ! On the main page, click on Assets. ! * Scroll down and write Threefold.io in the Text box. Select TFT Threefold.io. Click Accept. Then follow the steps presented on your hardware wallet to confirm the trust line. ! ! Conclusion You now have a TFT trust line on the Stellar Blockchain. You can now receive TFT on this wallet. This is a perfect setup to farm TFT safely. When it comes to choosing where to send your farming rewards, you simply need to enter the address associated with your hardware wallet. Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/buy_sell_tft/tft_metamask.md",
    "title": "MetaMask (BSC & ETH)",
    "url": "/labs/documentation/threefold_token/buy_sell_tft/tft_metamask",
    "content": "Get TFT: MetaMask (BSC & ETH) Introduction In this guide, we present how to buy and sell ThreeFold Tokens on BNB Smart Chain and Ethereum using Metamask. BNB Smart Chain and Ethereum chain are blockchain networks that enable the execution of smart contracts and decentralized applications, while MetaMask is a software cryptocurrency wallet used to interact with Ethereum and BNB Smart Chain. TFT Addresses With MetaMask, you can buy and sell TFT on both BNB Smart Chain and the Ethereum chain. Make sure to use the correct TFT address when doing transactions. Ethereum Chain Address The ThreeFold Token (TFT) is available on Ethereum. It is implemented as a wrapped asset with the following token address: BSC Address The ThreeFold Token (TFT) is available on BSC. It is implemented as a wrapped asset with the following token address: Add TFT to Metamask We present the steps on Ethereum chain. Make sure to switch to BSC and to use the TFT BSC address if you want to proceed on BSC. Open Metamask and import the ThreeFold Token. First click on : ! Then, choose : ! To add the ThreeFold Token, paste its Ethereum address in the field . The address is the following: Once you paste the TFT contract address, the parameter should automatically be filled with . Click on the button . ! To confirm, click on the button : ! TFT is now added to Metamask. Buy TFT on Metamask Liquidity is present on Ethereum so you can use the \"Swap\" functionality from Metamask directly or go to Uniswap to swap Ethereum, or any other token, to TFT. When using Uniswap, paste the TFT token address in the field to select TFT on Ethereum. The TFT token address is the following: ! Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/buy_sell_tft/tft_lobstr_short_guide.md",
    "title": "Quick Start (Stellar)",
    "url": "/labs/documentation/threefold_token/buy_sell_tft/tft_lobstr_short_guide",
    "content": "Introduction In this guide, we show how to buy and sell ThreeFold Tokens with Lobstr wallet using a credit or a debit card. This is a simple method that works well for small to medium purchases. You can buy TFT on Lobstr with your smartphone (Android and iOS) and your computer. Lobstr is an app for managing digital assets like TFT on the Stellar blockchain. In this case, we'll first obtain Stellar's native currency, Lumens (XLM) and swap them for TFT. > Moonpay is the service integrated in Lobstr to enable users to buy digital assets like XLM with fiat currencies like US Dollars and Euros. Moonpay is available in most regions, but there are some exceptions. If your country or state isn't supported by Moonpay, you will need to find another cryptocurrency exchange or on ramp to obtain XLM. From there, you can follow the rest of this guide. Install Lobstr To get Lobstr, just head to lobstr.co where you'll find buttons to download the app for both Android and iOS. Once the app is installed, open it to continue. To use Lobstr directly on your browser, simply click on Get Started in the top menu of the Lobstr website. This allows you to use Lobstr on your computer instead of your smartphone. Hit the Create Account button and proceed to create an account by entering your email address and choosing a password. Verify your email address and then sign in. Create Wallet After you sign in to Lobstr for the first time, you'll be prompted to create or connect a Stellar wallet. If you already have the TF Connect App, follow the instructions at this link to import your existing wallet into Lobstr. Otherwise, just press the Create Stellar Wallet button. Lobstr will then present you with 12 words to write down and store safely. Keep in mind that anyone who can access these words can also access any funds in your account. They can also be used to recover your account later. Be sure not to lose them. Buy XLM In this step, we'll buy XLM with a credit or debit card (actually a few forms of bank transfer and other payment methods are supported too). On the Lobstr app, click on the hamburger menu button: ! Then click on Buy Crypto: ! By default XLM is selected to buy, which is what we want. Above you can choose how much to buy in the currency of your choosing. Press ALL to see a full list of available currencies. Once you've entered the amount you want to buy, hit Continue and proceed through the checkout process with Moonpay. On the final screen, you'll see a message that it can take some time to complete the order: ! Usually this happens quickly and you'll receive a notification if notifications are enabled for the Lobstr app. Swap XLM for TFT Once you have the XLM, use the hamburger menu again and this time select Swap: ! Enter TFT in the search bar and select the entry that includes threefold.io. > Be careful at this step! There are fake scam coins using the ThreeFold logo. We can't remove these tokens from Stellar, unfortunately, so you will need to be sure to choose the right one. ! On the next screen, XLM will be automatically selected as the currency to trade for TFT. The amount that's available to trade will be shown in blue. You can just tap this amount to trade the maximum amount. A couple XLM will be reserved to keep your account open and pay for future Stellar transaction fees. Hit the green button at the bottom to complete the trade. There will be a few more prompts and potentially some warnings about scam tokens (again, look for threefold.io). When you're finished you'll see a screen that says Swap completed. Congrats, you just bought TFT! Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/buy_sell_tft/tft_lobstr_complete_guide.md",
    "title": "Lobstr Wallet (Stellar)",
    "url": "/labs/documentation/threefold_token/buy_sell_tft/tft_lobstr_complete_guide",
    "content": "Introduction In this guide, you'll learn how to buy ThreeFold Tokens with Lobstr using a credit or a debit card and a TF Connect wallet. This is a simple method that works well for small to medium purchases. Lobstr is an app for managing digital assets like TFT on the Stellar blockchain. In this case, we'll first obtain Stellar's native currency, Lumens (XLM) and swap them for TFT. > Note that it is possible to do these steps without connecting the Lobstr wallet to the TF Connect App wallet (read docs). But doing this has a clear advantage: when we buy and swap on Lobstr, the TFT is directly accessible on the TF Connect app wallet. Download the App and Create an Account Go on www.lobstr.co and download the Lobstr app. You can download it for Android or iOS. ! We will show here the steps for Android, but it is very similar with iOS. Once you've clicked on the Android button, you can click install on the Google Store page: ! Once the app is downloaded, open it: ! On the Lobstr app, click on Create Account: ! You will then need to enter your email address: ! Then, choose a safe password for your account: ! Once this is done, you will need to verify your email. Click on Verify Email and then go check your email inbox. ! Simply click on Verify Email on the email you've received. ! Once your email is verified, you can sign in to your Lobstr account: ! ! Connect Your TF Connect App Wallet You will then need to either create a new wallet or connect an existing wallet. For this guide, we will show how to connect your TF Connect app wallet, but please note that you can create a new wallet on Lobstr by clicking Create Stellar Wallet. Since we are working with the Threefold ecosystem, it is very easy and practical to simply connect your TF Connect app wallet to Lobstr. This way, when you buy XLM and swap XLM tokens for TFTs, they will be directly available on your TF Connect app wallet. ! To connect your TF Connect app wallet, you will need to find your Stellar address and chain secret key. This is very simple to do. Click on I have a public or secret key. ! As you can see on this next picture, you need the Stellar address and secret key to properly connect your TF Connect app wallet to Lobstr: ! To find your Stellar address and secret key, go on the TF Connect app and select the Wallet section: ! At the top of the section, click on the copy button to copy your Stellar Address: ! Now, we will find the Stellar secret key. At the botton of the section, click on the encircled i button: ! Next, click on the eye button to reveal your secret key: ! You can now simply click on the copy button on the right: ! That's it! You've now connected your TF Connect app wallet to your Lobstr account. Buy XLM with Fiat Currency Now, all we need to do, is buy XLM and then swap it for TFT. It will be directly available in your TF Connect App wallet. On the Lobstr app, click on the top right menu button: ! Then, click on Buy Crypto: ! By default, the crypto selected is XLM. This is alright for us as we will quickly swap the XLM for TFT. On the Buy Crypto page, you can choose the type of Fiat currency you want. By default it is in USD. To select some othe fiat currency, you can click on ALL and see the available fiat currencies: ! You can search or select the current you want for the transfer: ! You will then need to decide how much XLM you want to buy. Note that there can be a minimum amount. Once you chose the desired amount, click on Continue. ! Lobstr will then ask you to proceed to a payment method. In this case, it is Moonpay. Note that in some cases, your credit card won't accept Moonpay payments. You will simply need to confirm with them that you agree with transacting with Moonpay. This can be done by phone. Check with your bank and credit card company if this applies. ! Once you've set up your Moonpay payment method, you will need to process and confirm the transaction: ! ! You will then see a processing window. This process is usually fast. Within a few minutes, you should receive your XLM. ! Once the XLM is delivered, you will receive a notification: ! When your transaction is complete, you will see this message: ! On the Trade History page, you can choose to download the csv file version of your transaction: ! That's it! You've bought XLM on Lobstr and Moonpay. Swap XLM for TFT Now we want to swap the XLM tokens for the Threefold tokens (TFT). This is even easier than the previous steps. Go to the Lobstr Home menu and select Swap: ! On the Swap page, write \"tft\" and select the Threefold token: ! Select the amount of XLM you want to swap. It is recommended to keep at least 1 XLM in your wallet for transaction fees. ! Within a few seconds, you will receive a confirmation that your swap is completed: Note that the TFT is directly sent on your TF Connect app wallet. ! That's it. You've swapped XLM for TFT. You can now use your TFT to deploy workloads on the Threefold Grid. Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/buy_sell_tft/pancakeswap.md",
    "title": "Pancake Swap (BSC)",
    "url": "/labs/documentation/threefold_token/buy_sell_tft/pancakeswap",
    "content": "Introduction In this guide, we present how to buy and sell ThreeFold Tokens on BNB Smart Chain (BSC) using Pancake Swap. BNB Smart Chain is a blockchain network that enables the execution of smart contracts and decentralized applications, while Pancake Swap is a popular decentralized exchange (DEX) built on BSC. Prerequisites Before you can buy TFT on Pancake Swap, there are a few prerequisites you need to fulfill. Here's what you'll need: - BSC Wallet: To interact with the BNB Smart Chain and Pancake Swap, you'll need a BSC-compatible wallet. MetaMask is a popular option that supports BSC. Make sure to set up and secure your wallet before proceeding. > Set up a MetaMask Wallet - Connect BSC Wallet to Pancake Swap: Visit the Pancake Swap website and connect your BSC wallet to your Pancake Swap account. > Connect Wallet to Pancake Swap - Get BNB Tokens: As the native cryptocurrency of BNB Smart Chain, BNB is required to pay for transaction fees on the network. Ensure you have some BNB tokens in your BSC wallet to cover these fees when buying TFT on Pancake Swap. Read this tutorial to know where you can buy BNB and transfer them to your BSC Wallet. > Get BNB Tokens Buy TFT on PancakeSwap On Pancake Swap, you can easily convert your existing crypto assets on BSC network into TFT-BSC by using the Swap function. Once you have obtained TFT-BSC, you have the option to bridge it into TFT Native on the Stellar network by utilizing the TFT-Stellar bridge. Let's swap some tokens! Now that you're all set, go to your PancakeSwap homepage and click on Trade > Swap button as shown. Please Make sure you're on BNB Smart Chain network. On the Swap Page, you would see that it displays swapping from BNB to CAKE as default. Here we'd like to change that to BNB (or any other tokens you have) to TFT. click on 'CAKE' and find TFT on the token listing pop up page, and click 'Import'. Once selected, define how much BNB or other token you would like to swap into TFT, and click on the 'Swap' button. That's it! You have officially swapped BNB into TFT. Disclaimer > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/threefold_token/buy_sell_tft/buy_sell_tft.md",
    "title": "Buy and Sell TFT",
    "url": "/labs/documentation/threefold_token/buy_sell_tft",
    "content": "> If you're looking for a simple way to get TFT with crypto or fiat, check out the Quick Start guide! There are multiple ways to buy and sell TFT depending on your preferences and the blockchain network you choose to transact on. You can buy and sell TFT on Stellar Chain, Ethereum Chain and BNB Smart Chain, and you can use the TFT bridges to go from one chain to another. With TFTs, you can deploy workloads on the ThreeFold Grid and benefit from staking discounts up to 60%! TABLE OF CONTENTS - Quick Start (Stellar) - Lobstr Wallet (Stellar) - MetaMask (BSC & ETH) - Pancake Swap (BSC) More on TFT The Threefold token (TFT) is the token of the Threefold Grid, a decentralized and open-source project offering network, compute and storage capacity. TFTs are created by TFChain, the ThreeFold blockchain, only when new Internet capacity is added to the ThreeFold Grid by cloud service providers (farmers) deploying 3Nodes, a process we call farming.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_wallet.md",
    "title": "Wallet",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_wallet",
    "content": "ThreeFold Connect Wallet Introduction We cover the wallet features of the ThreeFold Connect app. Access Your Wallet By default, the app will generate a wallet associated with your account. - To access your wallet, click on at the bottom of the app screen, then click on your wallet. By default, the wallet is named . ! - The wallet main page is the following: ! Import a Wallet To import a wallet, click on the button at the top right of the Wallet section. Choose a name for your wallet, write the secret associated with the wallet and click . ! Wallet Features Once inside your wallet, you can access the wallet features. - Assets - Transactions - Info ! Wallet Assets The section Wallet assets allows you to send and receive token. Send Assets You can send assets from Stellar or TFChain. ! To send TFT, you can scan the QR code of the address you wish to send tokens to. This will enter automatically the necessary information. Make sure to double check that the information is correct to avoid any complications. Otherwise, you can simply enter the correct address in the section To. Choose the amount you want to send. Then click on SEND TOKENS. For Stellar, Make sure to write the memo if it applies. Note that, for such transactions, there is a maximum fee of 0.1 TFT on the Stellar blockchain, and a maximum fee of 0.01 TFT on the TFChain. This amount is taken from the amount you are sending. It is not taken directly in your wallet. Send TFT to Hardware Wallet on Stellar Blockchain Before sending TFT to a hardware wallet, make sure the hardware wallet has a TFT trustline on the Stellar Blockchain. For more information, read this section. Receive Assets You can receive assets from Stellar or TFChain. ! To receive TFT, you can generate a QR code to share to the person waiting to send you tokens. Otherwise, the sender can simply use your Stellar or TFChain address and send you TFT. To generate the QR Code, select the chain you want to use, Stellar or TFChain, enter the amount and the message if needed and click on GENERATE QR CODE. This will generate a QR Code that can be scanned by other devices. > Note: The memo option is only available for Stellar, not for TFChain. Bridge Assets (TFChain) You can bridge TFT between TFChain and Stellar chain. ! To bridge TFT, follow the steps below: - Set the direction of the bridge - TFChain to Stellar - Stellar to TFChain - To: Enter the address of the receiver - Optional: Click on the icon on the right to set a wallet or favorite address - Amount: Enter the amount to send - Click to submit the bridge transfer - Click to finalize the transaction Bridge Assets (Solana) You can bridge TFT from Stellar to Solana. > Important: Make sure to create an associated token account on Solana for TFT. Read this section for more information. ! To bridge TFT, follow the steps below: - To: Enter the address of the receiver - Optional: Click on the icon on the right to set a wallet or favorite address - Amount: Enter the amount to send - Click to submit the bridge transfer - Click to finalize the transaction > Note: You cannot bridge from Solana to Stellar. Wallet Transactions To see your transactions, simply click at the bottom of the screen. If there are no transactions yet on your wallet, you will see . ! Wallet Info To access your wallet info, click at the bottom of the screen. ! In this section, you can access the TFChain and Stellar addresses associated with your wallet, as well as their corresponding secrets. To see your secrets, simply click on the eye buttons. You can also change the wallet name by clicking on the button next to the wallet name. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_troubleshooting.md",
    "title": "Troubleshooting",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_troubleshooting",
    "content": "We provide solutions to different issues users can encounter while using the ThreeFold Connect app. I am trying to access my wallet in the ThreeFold Connect App. It worked fine before, but now I just get a white screen. What does it mean and what can I do? On the TF Connect App, when you get a white screen, it means that there is a connection issue. It can help to try other networks; maybe try switching between ethernet cable or wifi. Or you can also try it later when the connection might be more stable. When I open the ThreeFold Connect App, I get the error: Error in initialization in Flagsmith. How can I fix this issue? To fix this Flagsmith error message on the ThreeFold Connect app, you can try the following methods: Check your internet connection Update your phone current operating system (OS) version Update the date and time on your phone I do not remember the name (ThreeFold 3bot ID) associated with my seed phrase on the ThreeFold Connect app. Can I recover my TF Connect app account with only the seed phrase and not the name (3bot ID) associated with it? If you forgot the name associated with your seed phrase on the TF Connect app, you can always create a new identity (ThreeFold 3bot ID) and import your wallet using the old seed phrase. Since the Connect App is also used for identity and authentication, you need both the name (3bot ID) and seed phrase to fully recover your account. The wallet is only linked to the seed phrase and not the name (3bot ID). TF Connect App is now asking for a 4-digit password (PIN). I don't remember it as I usually use touch or face ID to unlock the app. What can I do? When you set up your the app, you are asked a 4-digit password (PIN). After some time, the app will be asking for this PIN when users may have been exclusively using touch/face ID. You can reset it by recovering the account with your seedphrase. Is there a way to have more than one wallet in TF Connect App? Yes, this is perfectly possible. You can have multiple wallets in the TF Connect app. You can have multiple wallets for the Stellar network and multiple wallets for Polkadot Substrate. For example, you can create a wallet on the Stellar Blockchain and import it on TF Connect App with the function Import Wallet*. Just copy the seedphrase and it will be imported in TF Connect App. Note: There will not be an automatic function in the app to create a new wallet. You must do it manually.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_toc.md",
    "title": "ThreeFold Connect",
    "url": "/labs/documentation/tfconnect_toc",
    "content": "ThreeFold Connect App ThreeFold Connect is a mobile app that serves as a gateway to the ThreeFold ecosystem and its various ThreeFold products and services. TABLE OF CONTENTS - Overview - Installation - Identity - Wallet - Farming - Market - DAO - Sign - News - Settings - Authenticator - Troubleshooting > The information provided in this tutorial or any related discussion is not intended as investment advice. The purpose is to provide educational and informational content only. Investing in cryptocurrencies or any other assets carries inherent risks, and it is crucial to conduct your own research and exercise caution before making any investment decisions. > > The ThreeFold Token (TFT) is not to be considered as a traditional investment instrument. The value of cryptocurrencies can be volatile, and there are no guarantees of profits or returns. Always be aware of the risks involved and make informed choices based on your own assessment and understanding. We strongly encourage you to read our full disclaimer and seek advice from a qualified financial professional if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_sign.md",
    "title": "Sign",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_sign",
    "content": "ThreeFold Connect Sign The Sign feature in ThreeFold Connect allows you to cryptographically sign messages, documents, and data using your ThreeFold identity. This provides a secure way to verify authenticity and integrity of digital content. Overview Digital signing in ThreeFold Connect enables: - Message Signing: Sign text messages and data - Link Verification: Sign and verify URLs and links - QR Code Signing: Sign data embedded in QR codes - Identity Verification: Prove ownership of your ThreeFold identity - Data Integrity: Ensure data hasn't been tampered with What is Digital Signing? Digital signing is a cryptographic process that: - Authenticates Identity: Proves the signer's identity - Ensures Integrity: Confirms data hasn't been modified - Provides Non-repudiation: Prevents denial of signing action - Creates Trust: Establishes trust in digital communications When to Use Sign Use the Sign feature when you need to: - Verify Identity: Prove you are the owner of a ThreeFold account - Authenticate Documents: Sign important documents or contracts - Secure Communications: Add cryptographic proof to messages - Validate Transactions: Sign transaction data or agreements - Establish Trust: Provide verifiable proof of authenticity Accessing the Sign Feature The Sign feature can be accessed in several ways: Through the App Menu 1. Open ThreeFold Connect app 2. Navigate to the main menu 3. Select Sign from the menu options !TFConnect Via External Requests 1. QR Code Scanning: Scan QR codes containing sign requests 2. Deep Links: Click on ThreeFold sign links 3. Third-party Apps: Respond to sign requests from other applications Types of Signing Text Message Signing Purpose: Sign plain text messages or data strings Process: 1. Receive Request: Get a text signing request 2. Review Content: Examine the text to be signed 3. Verify Source: Confirm the request source is trusted 4. Sign Message: Approve the signing operation 5. Share Signature: Provide the cryptographic signature Use Cases: - Identity verification messages - Authentication challenges - Simple data validation - Proof of ownership statements !TFConnect Link Signing Purpose: Sign URLs and web links for verification Process: 1. Link Request: Receive a URL signing request 2. URL Validation: Verify the link format and destination 3. Content Preview: Review link information if available 4. Sign URL: Approve signing of the link 5. Signature Generation: Create cryptographic proof Applications: - Website authentication - Link verification systems - Secure URL sharing - Anti-phishing measures !TFConnect QR Code Signing Purpose: Sign data embedded in QR codes Process: 1. QR Scan: Scan QR code containing sign request 2. Data Extraction: Extract signing data from QR code 3. Content Display: Show data to be signed 4. User Approval: Confirm signing operation 5. Signature Creation: Generate cryptographic signature Benefits: - Offline Capability: Works without internet connection - Mobile Friendly: Easy scanning with phone camera - Quick Verification: Fast authentication process - Secure Transfer: Encrypted data in QR format !TFConnect Sign Interface and Workflow Sign Request Screen When you receive a sign request, the interface displays: Request Information - Source Application: Which app or service is requesting the signature - Request Type: Text, link, or QR code signing - Content Preview: Display of data to be signed - Security Status: Verification of request authenticity Content Display For Text Signing: - Plain text display of message content - Character count and data size - Formatting preservation For JSON Data: - Structured JSON viewer with syntax highlighting - Expandable/collapsible data sections - Search and navigation within JSON structure Action Buttons Sign Button: - Confirms and executes the signing operation - Generates cryptographic signature - Sends signature back to requesting application Cancel/\"It wasn't me\" Button: - Rejects the signing request - Cancels the operation safely - Notifies requesting application of rejection Security Confirmations Identity Confirmation - Account Verification: Confirms your ThreeFold identity - Key Usage: Shows which cryptographic key will be used - Signature Preview: Preview of signature format Security Features Cryptographic Security - Private Key Protection: Your private key never leaves the device - Secure Signing: Industry-standard cryptographic algorithms - Hash Verification: Ensures data integrity before signing - Signature Validation: Verifiable cryptographic proofs User Protection - Request Validation: Verifies authenticity of sign requests - Content Review: Always shows what you're signing - Cancellation Options: Easy way to reject suspicious requests - Security Warnings: Alerts for potential security issues Data Protection - No Data Retention: Signed content is not permanently stored - Encrypted Communication: Secure data transfer protocols - Privacy Preservation: Minimal data exposure during signing Best Practices Before Signing 1. Verify Source: Ensure the request comes from a trusted source 2. Review Content: Carefully read what you're signing 3. Check Context: Understand why the signature is needed Security Guidelines 1. Never Sign Blindly: Always review content before signing 2. Verify Requests: Confirm requests are legitimate 3. Protect Your Device: Keep your device secure and updated 4. Report Suspicious Activity: Report unusual or suspicious sign requests When to Decline - Unknown Sources: Requests from unrecognized applications - Suspicious Content: Unusual or potentially malicious data - Unclear Purpose: Requests without clear legitimate purpose Troubleshooting Common Issues Sign Request Not Appearing - Check Network: Ensure stable internet connection - App Updates: Update ThreeFold Connect to latest version - Restart App: Close and reopen the application - Clear Cache: Clear app cache if issues persist Hash Verification Failures - Network Issues: Download interruption may cause corruption - Security Alert: Do not sign if hash verification fails Signature Generation Errors - Key Access: Ensure your private key is accessible - Device Security: Check device security settings - App Permissions: Verify app has necessary permissions - System Resources: Ensure sufficient system resources Getting Help If you encounter issues with signing: 1. Check Documentation: Review ThreeFold signing guides 2. Community Support: Ask questions in ThreeFold community forums 3. Technical Support: Contact ThreeFold technical support 4. Security Concerns: Report security issues immediately Integration Examples Developer Integration For developers wanting to integrate with TFConnect signing: QR Code Format Important Security Notes > Security Warning: Only sign content you understand and trust. Digital signatures are legally binding in many jurisdictions. > Privacy Notice: Signing operations may reveal your ThreeFold identity to the requesting party. Only sign for trusted applications and services. > Verification Responsibility: Always verify that hash checks pass for signing. Never sign data that fail integrity verification.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_settings.md",
    "title": "Settings",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_settings",
    "content": "ThreeFold Connect Settings The Settings section in ThreeFold Connect allows you to customize your app experience, manage security preferences, and configure various aspects of your ThreeFold identity and account. Overview ThreeFold Connect Settings provide control over: - Security Settings: Biometric authentication, PIN management - App Preferences: Theme, language, and display options - Account Management: Profile settings and account information - Privacy Controls: Data sharing and privacy preferences - Backup & Recovery: Seed phrase and account backup options - Advanced Options: Developer settings and advanced configurations Accessing Settings 1. Open the ThreeFold Connect app 2. Navigate to the main menu 3. Select Settings or Preferences from the menu 4. Browse through different settings categories !TFConnect Security Settings Biometric Authentication Biometric authentication adds an extra layer of security to your ThreeFold Connect app. Supported Biometric Methods - Fingerprint Recognition: Use your fingerprint to unlock the app - Face Recognition: Use facial recognition for authentication - Voice Recognition: Use voice patterns for verification (if supported) Enabling Biometric Authentication 1. Navigate to Security Settings: - Open Settings → Security → Biometric Authentication 2. Check Device Compatibility: - Ensure your device supports biometric authentication - Verify biometric sensors are properly configured 3. Enable Biometric Login: - Toggle \"Enable Biometric Authentication\" - Follow the setup prompts - Test the biometric authentication 4. Configure Biometric Options: - Set fallback authentication methods - Configure biometric timeout settings - Choose which actions require biometric verification Biometric Security Features Enhanced Security: - Biometric data is stored locally on your device - No biometric information is transmitted to ThreeFold servers - Fallback to PIN/password if biometric fails Convenience Features: - Quick app unlock without typing passwords - Secure transaction approval with biometric confirmation - Automatic re-authentication after app timeout PIN Management PIN (Personal Identification Number) provides secure access to your ThreeFold Connect app. Setting Up Your PIN 1. Initial PIN Setup: - Choose a 4-6 digit PIN during app setup - Confirm your PIN by entering it twice - Store your PIN securely 2. PIN Requirements: - Minimum 4 digits, maximum 6 digits - Avoid easily guessable patterns (1234, 0000) - Use a unique PIN not used elsewhere Changing Your PIN 1. Access PIN Settings: - Settings → Security → Change PIN 2. Verification Process: - Enter your current PIN - Enter your new PIN twice - Confirm the PIN change 3. PIN Change Confirmation: - Receive confirmation of successful PIN change - Test the new PIN immediately PIN Security Features Security Measures: - PIN attempts are limited (typically 3-5 attempts) - Account lockout after multiple failed attempts - PIN is encrypted and stored securely - Option to require PIN for specific actions Recovery Options: - PIN recovery through seed phrase - Account recovery through backup methods - Support contact for PIN reset assistance App Preferences Theme Settings Customize the visual appearance of your ThreeFold Connect app. Available Themes Light Theme: - Bright background with dark text - Optimal for daytime use - Better battery life on LCD screens - High contrast for readability Dark Theme: - Dark background with light text - Reduced eye strain in low light - Better battery life on OLED screens - Modern, sleek appearance System Theme: - Automatically matches your device's system theme - Changes between light and dark based on system settings - Adapts to system-wide dark mode schedules Changing Theme Settings 1. Access Theme Settings: - Settings → Appearance → Theme 2. Select Theme: - Choose from Light, Dark, or System - Preview theme changes in real-time - Apply the selected theme 3. Additional Appearance Options: - Accent color selection - Font size adjustments - Icon style preferences Language and Localization Configure language and regional settings for your app. Language Selection 1. Available Languages: - English (default) - Additional languages based on app localization - Regional language variants 2. Changing Language: - Settings → Language & Region → Language - Select your preferred language - Restart app if required for changes to take effect Regional Settings - Date Format: Choose date display format (MM/DD/YYYY, DD/MM/YYYY, etc.) - Time Format: Select 12-hour or 24-hour time display - Number Format: Configure decimal separators and number formatting - Currency Display: Set preferred currency for market prices Notification Settings Manage how and when you receive notifications from ThreeFold Connect. Notification Categories Security Notifications: - Login attempts and security alerts - Account changes and updates - Suspicious activity warnings Transaction Notifications: - Wallet transaction confirmations - Market order updates - Payment receipts and confirmations System Notifications: - App updates and maintenance - Feature announcements - System status updates Notification Configuration 1. Enable/Disable Notifications: - Settings → Notifications - Toggle notification categories on/off - Set notification priorities 2. Notification Delivery: - Push notifications - In-app notifications - Email notifications (if configured) 3. Quiet Hours: - Set do-not-disturb periods - Configure notification scheduling - Emergency notification overrides Account Management Profile Information Manage your ThreeFold identity and profile details. Profile Settings Basic Information: - Display name and username - Profile picture or avatar - Contact information (if provided) - Account creation date Identity Verification Status: - KYC (Know Your Customer) verification level - Document verification status - Identity verification badges Updating Profile Information 1. Access Profile Settings: - Settings → Account → Profile 2. Edit Profile Details: - Update display name - Change profile picture - Modify contact information 3. Save Changes: - Confirm profile updates - Verify changes are reflected in the app Account Security Two-Factor Authentication (2FA) Add an extra layer of security to your account. 2FA Methods: - SMS-based verification codes - Authenticator app integration (Google Authenticator, Authy) - Email-based verification codes Setting Up 2FA: 1. Settings → Security → Two-Factor Authentication 2. Choose your preferred 2FA method 3. Follow setup instructions for your chosen method 4. Test 2FA with a verification attempt 5. Save backup codes for account recovery Account Recovery Seed Phrase Management: - View your account seed phrase (with security verification) - Backup seed phrase securely - Verify seed phrase backup Recovery Options: - Seed phrase recovery - Email recovery (if configured) - Support-assisted recovery Account Deletion Permanently delete your ThreeFold Connect account if needed. Before Deleting Your Account Important Considerations: - Account deletion is permanent and irreversible - All data associated with your account will be deleted - Wallet funds should be transferred before deletion - Active farms or services should be properly closed Backup Important Data: - Export wallet seed phrases - Save important transaction records - Download any necessary documents or certificates Account Deletion Process 1. Access Account Deletion: - Settings → Account → Delete Account 2. Security Verification: - Enter your PIN or use biometric authentication - Confirm your identity through additional verification 3. Deletion Confirmation: - Read and understand the deletion consequences - Type confirmation phrase (e.g., \"DELETE MY ACCOUNT\") - Confirm final deletion 4. Account Removal: - Account is marked for deletion - Data removal process begins - Confirmation of successful deletion Privacy and Data Settings Data Sharing Preferences Control how your data is used and shared. Analytics and Usage Data Anonymous Usage Statistics: - App usage patterns and feature usage - Performance metrics and crash reports - General demographic information Controlling Data Sharing: - Settings → Privacy → Data Sharing - Toggle analytics data sharing on/off - Review data sharing policies Third-Party Integrations Connected Services: - View apps and services connected to your account - Manage permissions for third-party access - Revoke access for unused or untrusted services API Access: - Review API keys and access tokens - Manage developer access to your account - Monitor third-party application usage Privacy Controls Profile Visibility: - Control who can see your profile information - Manage public/private profile settings - Configure contact information visibility Activity Privacy: - Control visibility of your farming activities - Manage transaction history privacy - Configure social features and sharing Advanced Settings Developer Options Advanced settings for developers and power users. Debug and Testing Features Debug Mode: - Enable detailed logging - Access developer tools - Test network configurations Network Settings: - Configure custom RPC endpoints - Test different network environments - Monitor network performance Experimental Features Beta Features: - Enable experimental functionality - Test new features before general release - Provide feedback on beta features Advanced Configurations: - Custom API endpoints - Advanced wallet configurations - Expert-level security settings Backup and Restore App Data Backup What Gets Backed Up: - App preferences and settings - Account configuration (not private keys) - Custom configurations and preferences Backup Methods: - Cloud backup (Google Drive, iCloud) - Local device backup - Manual export of settings Restore Process 1. Install ThreeFold Connect on new device 2. Choose Restore Option during setup 3. Select Backup Source (cloud or local) 4. Authenticate Access to backup data 5. Restore Settings and preferences 6. Verify Restoration and test functionality Troubleshooting Settings Common Settings Issues Biometric Authentication Problems Fingerprint Not Recognized: - Clean fingerprint sensor - Re-register fingerprints in device settings - Check for software updates - Restart the app Face Recognition Issues: - Ensure adequate lighting - Clean front-facing camera - Re-register face in device settings - Check app permissions for camera access PIN and Security Issues Forgotten PIN: - Use biometric authentication if enabled - Attempt account recovery through seed phrase - Contact support for assistance - Consider account recovery options Account Lockout: - Wait for lockout period to expire - Use alternative authentication methods - Contact support if lockout persists Theme and Display Issues Theme Not Applying: - Restart the app - Check system theme settings - Clear app cache - Update app to latest version Display Problems: - Adjust font size settings - Check device display settings - Verify app compatibility with device Getting Help If you need assistance with settings: 1. Check Documentation: Review ThreeFold Connect guides 2. Community Support: Ask questions in community forums 3. Technical Support: Contact ThreeFold support team 4. App Feedback: Report issues through app feedback system Security Best Practices Protecting Your Settings 1. Use Strong Authentication: Enable both PIN and biometric authentication 2. Regular Updates: Keep your app and device updated 3. Secure Backup: Safely backup your settings and recovery information 4. Monitor Access: Regularly review connected services and permissions 5. Privacy Awareness: Understand what data you're sharing and with whom Recommended Configuration For optimal security and usability: - Enable biometric authentication with PIN fallback - Set up two-factor authentication for account access - Use dark theme to reduce eye strain and save battery - Enable security notifications for account monitoring - Regularly backup your settings and recovery information - Review privacy settings periodically - Keep app updated to latest version",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_overview.md",
    "title": "Overview",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_overview",
    "content": "Introduction We present some of the ThreeFold Connect app benefits and provide links to install the app on your phone. Benefits Some key features and benefits of the ThreeFold Connect app are: - 2FA Authenticator - ThreeFold Connect is a passwordless 2FA authenticator that ensures a user is who they claim to be. - Decentralized - The app is decentralized, allowing users to access the ThreeFold Network platforms and their fully private digital wallet. - Private Digital Wallet - Users can manage their ThreeFold Tokens (TFT) and view their transaction history on the TF chain. - Support Chat - The app provides a support chat where users can get answers to their questions about ThreeFold-related topics. - News Section - The app features a news section where users can find the latest ThreeFold news and updates. - DAO Voting - The app featuers a DAO voting section where farmers can vote for grid enhancement proposals on the ThreeFold Grid. Home Page !TFConnect",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_news.md",
    "title": "News",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_news",
    "content": "ThreeFold Connect News The ThreeFold Connect app features a section. On the Home page, click on or select from the dropdown menu. ! You can then access the news. !TFConnect",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_market.md",
    "title": "Market",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_market",
    "content": "ThreeFold Connect Market The Market section in ThreeFold Connect provides a comprehensive trading platform for ThreeFold Tokens (TFT). Users can buy and sell TFT using USDC (USD Coin) through an integrated order book system built on the Stellar network. Overview The TFConnect Market enables users to: - Buy TFT tokens using USDC - Sell TFT tokens for USDC - View real-time market data and pricing - Manage buy/sell orders - Track order history and transaction fees - Access order book information Accessing the Market 1. Open the ThreeFold Connect app 2. Navigate to the main menu 3. Select Market from the menu options 4. The market interface will display with Overview and OrderBook tabs Market Interface The Market section consists of two main tabs: Overview Tab The Overview tab provides: - Current Market Price: Real-time TFT/USD pricing - Price Charts: Historical price data and trends - Market Statistics: Trading volume, price changes, and market metrics - Quick Actions: Fast access to buy/sell functions - Portfolio Summary: Your TFT and USDC balances !TFConnect OrderBook Tab The OrderBook tab displays: - Buy Orders: Current buy orders with prices and quantities - Sell Orders: Current sell orders with prices and quantities - Order Depth: Visual representation of market liquidity - Recent Trades: Latest executed transactions - Spread Information: Bid-ask spread data !TFConnect Wallet Connection and Setup Connecting Your Wallet Before trading, ensure your wallet is properly connected: 1. Stellar Wallet Required: Market operations use Stellar network 2. USDC Balance: Ensure sufficient USDC for buying TFT 3. TFT Balance: Ensure sufficient TFT for selling operations 4. Network Fees: Keep small amount for transaction fees Supported Assets - TFT (ThreeFold Token): Primary trading asset - USDC (USD Coin): Base currency for trading pairs - XLM (Stellar Lumens): Required for network transaction fees Buying TFT How to Place a Buy Order 1. Navigate to Market: Open the Market section 2. Access Buy Interface: Tap on buy options or use quick actions 3. Enter Order Details: - Amount: Specify how much TFT you want to buy - Price: Set your desired price per TFT in USDC - Total: Review the total USDC cost 4. Review Order: - Verify amount and price calculations - Check available USDC balance - Review estimated fees 5. Confirm Purchase: - Tap \"Buy TFT\" to submit the order - Wait for blockchain confirmation - Monitor order status in your order history Buy Order Features Market Price Integration - Current Market Price: Auto-populated with real-time pricing - Price Suggestions: Quick percentage-based price options (25%, 50%, 75%, 100% of balance) - Total Calculation: Automatic calculation of total cost including fees Order Validation - Balance Verification: Ensures sufficient USDC balance - Minimum Order: Validates minimum order requirements - Price Limits: Checks for reasonable price ranges - Network Connectivity: Verifies connection before order submission Example: Buying TFT Selling TFT How to Place a Sell Order 1. Access Sell Interface: Navigate to sell options in the market 2. Enter Sell Details: - Amount: Specify how much TFT to sell - Price: Set your desired price per TFT in USDC - Total: Review total USDC you'll receive 3. Validate Order: - Confirm sufficient TFT balance - Review price and market conditions - Check estimated fees 4. Submit Order: - Confirm the sell transaction - Monitor order execution - Track USDC receipt Order Management Order Types Limit Orders - Buy Limit: Buy TFT at or below specified price - Sell Limit: Sell TFT at or above specified price - Price Control: Full control over execution price - Partial Fills: Orders may execute partially Market Considerations - Liquidity: Order execution depends on market liquidity - Slippage: Large orders may experience price slippage - Timing: Orders execute when matching orders are available Order History Track your trading activity: - Open Orders: Currently active buy/sell orders - Order History: Complete record of past orders - Transaction Details: Detailed information for each trade - Fee Breakdown: Network and trading fees for each transaction Fees and Costs Trading Fees - Network Fees: Stellar network transaction fees (paid in XLM) - Spread Costs: Difference between buy and sell prices - Order Fees: Platform fees for order processing Fee Optimization - Batch Transactions: Combine multiple small orders - Timing: Trade during periods of high liquidity - Order Size: Consider minimum viable order sizes Market Data and Analysis Price Information - Real-time Pricing: Live TFT/USDC exchange rates - Price History: Historical price charts and trends - Market Depth: Order book depth and liquidity analysis - Volume Data: Trading volume and market activity metrics Market Indicators - Bid-Ask Spread: Current market spread information - 24h Change: Daily price change percentages - Trading Volume: Recent trading activity levels - Market Cap: Total market capitalization data Security and Best Practices Trading Security - Wallet Security: Keep wallet credentials secure - Order Verification: Always verify order details before confirmation - Price Monitoring: Monitor market prices before placing orders - Balance Management: Maintain adequate balances for trading Risk Management - Price Volatility: Be aware of cryptocurrency price volatility - Order Limits: Set appropriate price limits for orders - Portfolio Diversification: Don't invest more than you can afford to lose - Market Research: Stay informed about market conditions Troubleshooting Common Issues Connection Problems - Network Connectivity: Ensure stable internet connection - Stellar Network: Check Stellar network status - App Updates: Keep TFConnect app updated Order Issues - Insufficient Balance: Verify adequate wallet balances - Order Rejection: Check order parameters and limits - Execution Delays: Allow time for blockchain confirmation Balance Discrepancies - Refresh Balances: Pull to refresh wallet balances - Transaction Confirmation: Wait for blockchain confirmations - Network Sync: Allow time for network synchronization Getting Help If you encounter trading issues: 1. Check Network Status: Verify Stellar network operational status 2. Review Documentation: Consult ThreeFold trading guides 3. Community Support: Join ThreeFold community channels 4. Technical Support: Contact ThreeFold support team Important Disclaimers > Investment Risk Warning: Trading cryptocurrencies involves significant risk. The value of TFT and other cryptocurrencies can be highly volatile. Only trade with funds you can afford to lose. > Market Risks: Cryptocurrency markets operate 24/7 and can experience rapid price changes. Always conduct your own research before making trading decisions. > Regulatory Compliance: Ensure your trading activities comply with local regulations and tax requirements in your jurisdiction.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_installation.md",
    "title": "Installation",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_installation",
    "content": "ThreeFold Connect Installation Introduction We show how to install the ThreeFold Connect app. Download Links The ThreeFold Connect app is available for both iOS and Android devices. - Google Store Link - Apple Store Installation Either use the links above, or search for the ThreeFold Connect app on the Apple Store or the Google Play store. If you want to leave a 5 star review of the app, no one here will stop you! - Click on . ! - Once the app is installed, click . ! - Once you are in the application, you will see some introduction pages to help you familiarize yourself with the TF Connect app. ! - You will then be asked to read and accept ThreeFold's Terms and Conditions. ! Create Account Once you've accepted the Terms and Conditions, you can either Create Account or Log In. For now, we will show how to create a new account. The login process is explained below. ! To create a new account, you will be asked to choose a . This ID will be used, as well as the seed phrase, when you want to log in after having logged out of your account. You will also need to add a valid email address. You will need to access your email and confirm the validation email from ThreeFold to use properly the TF Connect app wallet. You will be shown your seed phrase. Keep this in a secure and offline place. You will need the 3bot ID, i.e. the account , and the to recover your account. This seed phrase is of utmost importance. Do not lose it nor give it to anyone. Once you've hit , you will be asked to write down 3 random words of your seed phrase. This is a necessary step to ensure you have taken the time to write down your seed phrase. Then, you'll be asked to confirm your TF 3bot name and the associated email. ! Finally, you will be asked to choose a 4-digit PIN. This will be needed to use the ThreeFold Connect app. If you ever forget this 4-digit PIN, you will need to recover your account using your account name and your seed phrase. You will need to confirm the new pin in the next step. Log Out - To log out, click on in the window. ! - You will be asked to confirm this decision. ! Recover Account (Log In) Once you're logged out of your account, if you want to log in, choose the option on the opening screen of the app. ! You will be asked to enter the of your account (the 3bot ID) as well as the associated . ! You will then be asked to choose and confirm a new 4-digit pin code. Once this is done, you will have access to your account. ! Display Seed Phrase To see your seed phrase, go to and click on the eye button next to . !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_identity.md",
    "title": "Identity",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_identity",
    "content": "ThreeFold Connect Identity The verification process in ThreeFold Connect ensures the security and authenticity of user accounts through a comprehensive identity verification system integrated directly into the app. This includes email verification, phone verification, and Know Your Customer (KYC) procedures as part of the wallet onboarding process. Overview ThreeFold Connect verification provides: - Email Verification: Secure email address confirmation - Phone Verification: SMS-based phone number verification - Identity Verification: Integrated KYC process for wallet onboarding - Document Verification: Government ID verification through secure systems - Biometric Verification: Selfie matching for identity confirmation !TFConnect Email Verification Email verification is the first step in securing your ThreeFold Connect account and enables important communications and recovery options. Setting Up Email Verification 1. Enter Email Address: During account setup or in verification settings, enter your email address 2. Receive Verification Code: Check your email for a verification code from ThreeFold 3. Enter Verification Code: Input the 6-digit code in the ThreeFold Connect app 4. Confirm Verification: Your email will be marked as verified with a green checkmark Email Verification Process Initial Setup - Email Input: Enter a valid email address you have access to - Format Validation: App validates email format before sending code - Code Generation: System generates a unique 6-digit verification code - Email Delivery: Verification email sent to provided address Code Entry - Time Limit: Verification codes expire after 10 minutes - Attempt Limits: Limited number of code entry attempts - Resend Option: Request new code if original expires - Countdown Timer: Visual countdown showing code validity period Email Verification Features - Security: Ensures you have access to the provided email address - Recovery: Enables account recovery options through email - Notifications: Allows important security notifications via email - Communication: Enables official communications from ThreeFold - Two-Factor Authentication: Email can be used as 2FA method Phone Verification Phone verification adds an additional layer of security through SMS verification and enables mobile-based authentication features. Setting Up Phone Verification 1. Enter Phone Number: Provide your mobile phone number with correct country code 2. Number Validation: App validates phone number format 3. Receive SMS Code: You'll receive an SMS with a 6-digit verification code 4. Enter SMS Code: Input the code in the app within the 2-minute time limit 5. Confirm Verification: Your phone number will be verified and marked as confirmed Phone Verification Process Phone Number Entry - Country Code Selection: Choose correct country code from dropdown - Number Format: Enter phone number in local format - Validation: System validates number format and carrier compatibility - SMS Capability Check: Verifies number can receive SMS messages SMS Code Delivery - Code Generation: Unique 6-digit SMS verification code - Delivery Time: SMS typically delivered within 30 seconds - Retry Logic: Automatic retry for failed SMS delivery - Cooldown Period: 2-minute wait between SMS requests to prevent spam Phone Verification Benefits - Two-Factor Authentication: Enables SMS-based 2FA for enhanced security - Account Recovery: Provides additional recovery method via SMS - Security Alerts: Receive critical security notifications via SMS - Identity Confirmation: Strengthens overall identity verification - Mobile Integration: Enables mobile-specific features and notifications Identity Verification (KYC) The integrated Identity Verification system is part of the wallet onboarding process and provides comprehensive Know Your Customer (KYC) verification directly within the ThreeFold Connect app. New Integrated KYC Process Unlike previous external verification systems, the new KYC process is fully integrated into the ThreeFold Connect app: - In-App Experience: Complete verification without leaving the app - Wallet Integration: KYC is part of wallet setup and onboarding - Real-time Processing: Immediate feedback and status updates - Enhanced Security: Secure document handling and processing - User-Friendly Interface: Streamlined verification workflow When KYC is Required Identity verification is required for: - Wallet Onboarding: Setting up your ThreeFold wallet - Higher Transaction Limits: Accessing increased transaction limits - Advanced Features: Using premium app features - Regulatory Compliance: Meeting financial service requirements - Enhanced Security: Maximum account protection KYC Verification Process Step 1: Initiate Verification 1. Access Verification: Navigate to Identity Verification in app settings 2. Review Requirements: Read verification requirements and supported documents 3. Prepare Documents: Gather required identification documents 4. Start Process: Begin the verification workflow Step 2: Document Selection Supported Documents: - Passport: International passport (preferred) - National ID Card: Government-issued national identification - Driver's License: Valid driver's license with photo - Residence Permit: For non-citizens with valid permits Document Requirements: - Must be current and not expired - Government-issued with official seals/stamps - Clear, readable text and photos - No damage, alterations, or tampering Step 3: Document Photography Photo Capture Process: 1. Document Positioning: Place document on flat, well-lit surface 2. Camera Alignment: Align document within camera frame guidelines 3. Quality Check: Ensure all text and details are clearly visible 4. Multiple Angles: Capture front and back (if applicable) 5. Review Photos: Check photo quality before proceeding Photography Best Practices: - Lighting: Use natural light or bright, even lighting - Stability: Keep device steady to avoid motion blur - Distance: Maintain proper distance for full document capture - Angle: Capture document straight-on, not at angles - Background: Use plain, contrasting background Step 4: Biometric Verification Selfie Capture: 1. Face Positioning: Center your face within the frame guidelines 2. Lighting Check: Ensure face is well-lit and clearly visible 3. Expression: Maintain neutral expression, eyes open 4. Photo Capture: Take clear, high-quality selfie 5. Biometric Matching: System compares selfie with document photo Liveness Detection: - Movement Verification: May require head movements or blinking - Real-time Capture: Ensures live person, not photo or video - Anti-Spoofing: Advanced detection of fake or manipulated images Step 5: Information Verification Data Extraction: - OCR Processing: Optical Character Recognition extracts document data - Information Display: Extracted information shown for review - Manual Correction: Option to correct any misread information - Verification Confirmation: Confirm all information is accurate Security Checks: - Document Authenticity: Verification of document security features - Cross-Reference: Information cross-checked against databases - Fraud Detection: Advanced algorithms detect fraudulent documents - Risk Assessment: Overall risk evaluation of verification attempt Step 6: Processing and Results Processing Timeline: - Automated Review: Initial automated processing (minutes) - Manual Review: Human review if required (1-3 business days) - Status Updates: Real-time updates on verification progress - Final Decision: Approval or rejection notification Verification Results Successful Verification Immediate Benefits: - Verification Badge: KYC verified status displayed in app - Enhanced Features: Access to advanced app functionality - Higher Limits: Increased transaction and wallet limits - Full Access: Complete access to all ThreeFold Connect features Long-term Benefits: - Regulatory Compliance: Meets financial service requirements - Enhanced Trust: Higher trust level for transactions and interactions - Priority Support: Access to priority customer support - Future Features: Early access to new features requiring verification Verification Issues or Rejection Common Rejection Reasons: - Poor Image Quality: Blurry, dark, or unclear document photos - Expired Documents: Using expired identification documents - Incomplete Capture: Parts of document cut off or not visible - Mismatched Information: Inconsistencies between document and selfie - Invalid Documents: Unsupported or fraudulent document types - Technical Issues: Problems with photo capture or processing Resolution Process: 1. Rejection Notification: Detailed explanation of rejection reasons 2. Retry Option: Ability to restart verification with corrections 3. Support Guidance: Specific instructions for addressing issues 4. Document Assistance: Help with proper document photography 5. Manual Review: Option for human review in complex cases Verification Management Checking Verification Status Status Dashboard: - Verification Overview: Central view of all verification statuses - Progress Indicators: Visual progress bars for ongoing verifications - Status Icons: Clear icons showing completed, pending, or failed verifications - Last Updated: Timestamps showing when status was last updated Detailed Status Information: - Email Status: Verified/unverified with verification date - Phone Status: Verified/unverified with verification date - Identity Status: KYC verification level and completion date - Document Status: Individual document verification results Managing Verified Information Updating Email Address 1. Change Request: Navigate to email settings and request change 2. Security Verification: Confirm identity through existing verification methods 3. New Email Verification: Complete verification process for new email 4. Transition Period: Grace period where both emails may be active 5. Confirmation: New email becomes primary after verification Updating Phone Number 1. Phone Change Request: Request phone number update in settings 2. Current Phone Verification: Verify identity using current phone 3. New Phone Verification: Complete SMS verification for new number 4. Cooldown Period: Mandatory wait period between phone changes 5. Security Review: Additional security checks for frequent changes Re-verification Requirements When Re-verification is Needed: - Document Expiration: When ID documents expire - Significant Account Changes: Major changes to account information - Security Incidents: After security-related issues - Regulatory Updates: When regulations require updated verification - System Upgrades: When verification systems are enhanced Advanced Verification Features Enhanced Security Options Multi-Factor Verification: - Combined Methods: Email + Phone + Biometric verification - Risk-Based Authentication: Additional verification for high-risk activities - Device Binding: Verification tied to specific trusted devices - Location Verification: Geographic verification for enhanced security Continuous Verification: - Behavioral Analysis: Ongoing analysis of user behavior patterns - Device Fingerprinting: Unique device identification for security - Session Monitoring: Continuous monitoring of app usage sessions - Anomaly Detection: Automatic detection of unusual activity patterns Integration with Wallet Features Wallet Onboarding: - Seamless Integration: KYC integrated into wallet setup process - Progressive Verification: Gradual verification as wallet features are accessed - Limit Management: Verification level determines wallet limits - Feature Unlocking: Advanced wallet features unlocked with verification Transaction Verification: - Transaction Limits: Verification level affects transaction limits - High-Value Transactions: Additional verification for large transactions - Cross-Border Transactions: Enhanced verification for international transfers - Merchant Verification: Special verification for merchant accounts Troubleshooting Verification Email Verification Issues Email Not Received Troubleshooting Steps: 1. Check Spam/Junk Folders: Verification emails may be filtered 2. Verify Email Address: Ensure email address is entered correctly 3. Check Email Provider: Some providers block automated emails 4. Whitelist Sender: Add ThreeFold email addresses to safe sender list 5. Try Alternative Email: Use different email provider if issues persist Technical Solutions: - Resend Code: Request new verification code - Email Provider Settings: Check email provider security settings - Corporate Filters: Check corporate email filters and firewalls - Email Client Issues: Try accessing email through web interface Email Code Issues Common Problems: - Code Expiry: Verification codes expire after 10 minutes - Incorrect Entry: Ensure code is entered exactly as received - Case Sensitivity: Some codes may be case-sensitive - Copy-Paste Errors: Manually type code instead of copying Phone Verification Issues SMS Not Received Troubleshooting Steps: 1. Check Network Coverage: Ensure strong cellular signal 2. Verify Phone Number: Confirm number includes correct country code 3. Check SMS Settings: Ensure SMS is not blocked or filtered 4. Carrier Issues: Contact carrier about SMS delivery problems 5. Try Different Time: SMS delivery may be delayed during peak times Technical Solutions: - Restart Device: Restart phone to refresh network connection - Clear Messages App: Clear SMS app cache and data - Check Storage: Ensure sufficient storage for SMS messages - Network Reset: Reset network settings if problems persist SMS Code Problems Common Issues: - Code Expiry: SMS codes expire after 2 minutes - Multiple Attempts: Limited number of verification attempts - Cooldown Period: 2-minute wait between SMS requests - International SMS: Delays possible for international numbers Identity Verification Issues Document Photography Problems Image Quality Issues: - Lighting Problems: Use bright, even lighting without shadows - Blur Issues: Keep device steady and ensure proper focus - Glare/Reflections: Avoid reflective surfaces and direct light - Partial Capture: Ensure entire document is within frame Technical Solutions: - Camera Permissions: Ensure app has camera access permissions - Storage Space: Free up device storage for photo capture - Camera App Issues: Close other camera apps before verification - Device Restart: Restart device if camera issues persist Document Rejection Issues Quality Improvements: - Better Lighting: Use natural daylight or bright indoor lighting - Stable Surface: Place document on flat, stable surface - Clean Lens: Clean device camera lens before photography - Multiple Attempts: Take several photos and choose the best quality Document Issues: - Document Validity: Ensure documents are current and not expired - Document Condition: Use undamaged, clean documents - Supported Types: Verify document type is supported - Information Matching: Ensure all information is consistent Biometric Verification Problems Selfie Issues: - Lighting: Ensure face is well-lit and clearly visible - Positioning: Center face within frame guidelines - Expression: Maintain neutral expression with eyes open - Background: Use plain background without distractions Matching Problems: - Appearance Changes: Significant appearance changes may cause issues - Photo Quality: Ensure both document photo and selfie are high quality - Facial Hair: Significant facial hair changes may affect matching - Accessories: Remove glasses or accessories that obscure face Getting Help If you encounter persistent verification issues: 1. In-App Support: Use built-in help and support features 2. Documentation: Review detailed verification guides and FAQs 3. Community Support: Ask questions in ThreeFold community forums 4. Technical Support: Contact ThreeFold technical support team 5. Live Chat: Use real-time support chat if available 6. Email Support: Send detailed issue description to support email Privacy and Security Data Protection Security Measures: - Encryption: All verification data encrypted in transit and at rest - Secure Storage: Verification documents stored in secure, compliant systems - Access Controls: Strict access controls for verification data - Audit Trails: Complete audit trails for all verification activities Privacy Protection: - Data Minimization: Only collect necessary verification data - Purpose Limitation: Verification data used only for intended purposes - Retention Limits: Verification data retained only as legally required - User Rights: Users can request data access, correction, or deletion Compliance and Standards Regulatory Compliance: - KYC Regulations: Compliance with international KYC requirements - AML Standards: Anti-Money Laundering compliance - Data Protection: GDPR and other privacy regulation compliance - Financial Services: Compliance with financial service regulations Security Standards: - ISO 27001: Information security management standards - SOC 2: Service organization control standards - PCI DSS: Payment card industry security standards - Industry Best Practices: Following cybersecurity best practices Third-Party Integration Verification Partners: - Trusted Providers: Integration with reputable verification services - Security Vetting: Thorough security assessment of all partners - Data Agreements: Strict data processing agreements with partners - Regular Audits: Regular security audits of partner systems Data Sharing: - Minimal Sharing: Only necessary data shared with verification partners - Secure Transmission: All data transmitted through secure channels - Purpose Limitation: Partner data use limited to verification purposes - Deletion Requirements: Partners required to delete data after processing Important Security Notes > Verification Requirement: Some ThreeFold Connect features require completed verification. Complete verification early to avoid service interruptions and access all app features. > Document Security: Never share your verification documents, codes, or personal information with others. ThreeFold will never ask for this information outside the official app or through unofficial channels. > Processing Time: Identity verification can take from minutes to 3 business days depending on complexity. Plan accordingly if you need verified status for time-sensitive activities. > Accuracy Critical: Ensure all information provided during verification is accurate and matches your official documents exactly. Inaccurate information will result in verification failure. > Privacy Protection: Your verification data is protected by advanced security measures and privacy controls. Review our privacy policy for complete details on data handling and protection.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_farming.md",
    "title": "Farming",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_farming",
    "content": "ThreeFold Connect Farming The Farming section in ThreeFold Connect allows you to manage your ThreeFold farms and monitor your farming operations. The app supports both V3 and V4 farming protocols, each with distinct features and capabilities. Overview Farming in the ThreeFold ecosystem involves running nodes that provide compute, storage, and network capacity to the ThreeFold Grid. Farmers are rewarded with ThreeFold Tokens (TFT) for contributing their resources to the decentralized internet infrastructure. Accessing the Farming Section 1. Open the ThreeFold Connect app 2. Navigate to the main menu 3. Select Farming from the menu options 4. The farming interface will display with tabs for V3 and V4 farms !TFConnect V3 Farming vs V4 Farming V3 Farming V3 Farming represents the established farming protocol with the following characteristics: - Mature Protocol: Well-established farming mechanism with proven track record - TFChain Integration: Farms are registered and managed through TFChain - Node Management: Traditional node registration and monitoring - Reward System: Established tokenomics and reward distribution - Stability: Production-ready with extensive testing and deployment V4 Farming V4 Farming introduces enhanced features and improvements: - Enhanced Performance: Optimized farming protocols for better efficiency - Improved Monitoring: Advanced node health and performance tracking - Updated Tokenomics: Refined reward mechanisms and distribution - Modern Architecture: Built with latest blockchain and networking technologies - Future-Ready: Designed to support upcoming ThreeFold ecosystem developments Managing Your Farms Viewing Existing Farms The farming interface displays your farms in two separate tabs: 1. V3 Tab: Shows all your V3 protocol farms 2. V4 Tab: Shows all your V4 protocol farms For each farm, you can view: - Farm name and ID - Node count and status - Performance metrics - Reward information - Connection status Creating a New Farm 1. Access Creation Interface: - In the Farming section, tap the + (plus) icon in the top-right corner - This opens the \"Add Farm\" overlay !TFConnect 2. Choose Farm Version: - Select the appropriate tab (V3 or V4) before creating - The farm will be created using the selected protocol version 3. Configure Farm Details: - Enter farm name and description - Configure network settings - Set up wallet connections - Review and confirm settings 4. Complete Registration: - The app will register your farm on the appropriate blockchain - Wait for confirmation and network synchronization - Your new farm will appear in the corresponding tab Farm Management Features Node Monitoring - Real-time Status: View live status of all nodes in your farm - Performance Metrics: Monitor CPU, memory, storage, and network usage - Health Checks: Automatic monitoring of node health and connectivity - Alert System: Notifications for node issues or maintenance needs Wallet Integration - Multi-Wallet Support: Connect multiple wallets to your farms - Reward Tracking: Monitor TFT rewards and distribution - Transaction History: View farming-related transactions - Balance Management: Check wallet balances and transfer capabilities Farm Details - Configuration View: Access detailed farm settings and parameters - Node List: Complete inventory of nodes with individual status - Network Information: IP addresses, ports, and connectivity details - Performance Analytics: Historical data and trending information Troubleshooting Common Issues Connection Problems - Check Internet Connection: Ensure stable network connectivity - Verify Node Status: Confirm nodes are online and responsive - Restart Nodes: Power cycle problematic nodes if necessary - Update Firmware: Ensure nodes are running latest firmware versions Synchronization Issues - Refresh Farm Data: Pull to refresh the farm list - Check Blockchain Status: Verify TFChain connectivity - Wait for Sync: Allow time for blockchain synchronization - Contact Support: Reach out if issues persist Reward Distribution - Verify Wallet Connection: Ensure wallets are properly linked - Check Farming Requirements: Confirm nodes meet minimum specifications - Monitor Network Participation: Ensure active participation in grid operations - Review Farming Policies: Stay updated on reward distribution rules Best Practices Farm Setup - Choose Reliable Hardware: Use quality hardware for consistent performance - Ensure Stable Power: Implement backup power solutions - Maintain Good Connectivity: Use reliable internet connections - Regular Monitoring: Check farm status regularly through the app Security - Secure Wallet Access: Keep wallet credentials safe and secure - Regular Backups: Backup important farm configuration data - Update Software: Keep the TFConnect app updated - Monitor Access: Review farm access logs periodically Optimization - Performance Tuning: Optimize node configurations for best performance - Resource Management: Balance workloads across nodes efficiently - Network Optimization: Configure networking for optimal throughput - Regular Maintenance: Perform routine maintenance on hardware Getting Help If you encounter issues with farming operations: 1. Check Documentation: Review the complete ThreeFold farming guides 2. Community Support: Join ThreeFold community forums and chat channels 3. Technical Support: Contact ThreeFold technical support team",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_dao.md",
    "title": "DAO",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_dao",
    "content": "ThreeFold Connect DAO The ThreeFold Connect app featuers a DAO section where you can vote on grid enhancement proposals for the ThreeFold Grid. On the Home page, click on or select from the dropdown menu. ! The DAO section contains two subsections and . When there are ongoing DAO vote, you will be able to cast your vote in the section . ! When there are proposals that are ready to be executed, you will be able to vote on them in the section . !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/tfconnect_toc/tfconnect_authenticator.md",
    "title": "Authenticator",
    "url": "/labs/documentation/tfconnect_toc/tfconnect_authenticator",
    "content": "Introduction We present how to use the ThreeFold Authenticator. The ThreeFold Connect two-factor authenticator enables you access to ThreeFold Grid tools and solutions. Not a single person in the world will be able to log in to your account, not even us. Connect with the Authenticator Follow the steps below to connect with the authenticator. - Make sure your ThreeFold Connect app is open before sending the login request. - Write your ThreeFold ID. ! - Click . ! - Take note of the icon shown on your screen. ! - On your phone, open TFConnect and enter your password. ! - Verify the URL. ! - Click on the icon you saw on the browser screen. ! - You will see a confirmation screen. ! You are now logged in.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/system_administrators.md",
    "title": "System Administrators",
    "url": "/labs/documentation/system_administrators",
    "content": "ThreeFold System Administrators This section covers all practical tutorials for system administrators working on the ThreeFold Grid. For complementary information on the ThreeFold Grid and its cloud component, refer to the Cloud section. TABLE OF CONTENTS - Getting Started - Mycelium - Pulumi - GPU - Terraform - Computer and IT Basics - Advanced",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/tfgrid_deployments.md",
    "title": "TFGrid Deployments",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/tfgrid_deployments",
    "content": "Introduction There are many ways to interact with the ThreeFold Grid to deploy workloads. We present the main ones. Dashboard UI We provide an easy-to-use user interface via the ThreeFold Dashboard and its many apps. - ThreeFold Dashboard Infrastrure-As-Code You can deploy infrastructure-as-code with Pulumi and Terraform/OpenTofu. - Pulumi - Terraform Command Line Interfaces You can use our Go and Javascript/TypeScript command line interface tools to deploy workloads on the grid. - Go Grid Client - TFCMD - TFRobot - TypeScript Grid Client GPU Workloads There are many ways to deploy GPU workloads on the ThreeFold Grid. Check the GPU section for all the details. - GPU Support",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/tfgrid3_getstarted.md",
    "title": "Getting Started",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted",
    "content": "Getting Started Your First Deployment It's easy to get started on the TFGrid. For your first deployment on the grid, we will show you how to deploy a full virtual machine running on a ThreeFold node. - Create a TFChain Account - Get TFT - Bridge TFT to TChain - Deploy and Connect to a VM Once you're acquainted with the basics, you can explore all types of ThreeFold deployments. TFGrid Deployments From virtual machines to Kubernetes, to one-click apps to infrastructure-as-code workloads, the TFGrid provides syadmins control and flexibility. - ThreeFold Deployments TFGrid Services Consult the list of TFGrid services to gain an overview of the ThreeFold ecosystem. - TFGrid Services Network Restrictions For more information on network port restrictions, read this.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/tf_grid_services_readme.md",
    "title": "TFGrid Services",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/tf_grid_services_readme",
    "content": "Introduction Here is a list of all of the services running on Threefold Grid 3 infrastructure. > Note: the usage of indicates a devnet service. > and usage of indicates a testnet service. Devnet - TFChain - GraphQL - Activation Service - TFGrid Proxy - Grid Dashboard QAnet - TFChain - GraphQL - Activation Service - TFGrid Proxy - Grid Dashboard Testnet - TFChain - GraphQL - Activation Service - TFGrid Proxy - Grid Dashboard Mainnet - TFChain - GraphQL - Activation Service - TFChain-Stellar Bridge - TFChain-Ethereum Bridge - TFGrid Proxy - Grid Dashboard General - TF Flist Hub - TF Boot Generator",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/network_restrictions.md",
    "title": "Network Restrictions",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/network_restrictions",
    "content": "Network Restrictions When deploying VMs on the ThreeFold Grid, it's important to understand the network restrictions that apply based on your deployment configuration. These restrictions affect which ports are available for your applications and services. They primarily affect email-related ports to prevent spam and maintain the integrity of the network. VM Network Access Types VMs without IPv4 When you deploy a VM without a public IPv4 address: - Restricted ports: 25, 465, 587 - Affected services: SMTP (email) services - Impact: You cannot run email servers or send emails directly from these VMs - Recommended for: Web applications, databases, development environments, and most standard services VMs with IPv4 When you deploy a VM with a public IPv4 address: - Port restrictions: None - Full access: All ports are available - Impact: You can run any service, including email servers - Recommended for: Production email services, mail servers, or applications requiring unrestricted network access Planning Your Deployment Before You Deploy Consider these questions when planning your VM deployment: 1. Do you need to send emails? If yes, deploy with IPv4 2. Will you run an email server? If yes, deploy with IPv4 3. Is this a web application only? VMs without IPv4 are sufficient and more cost-effective 4. Do you need specific port access? Check if ports 25, 465, or 587 are required Cost Considerations - VMs without IPv4 are typically more cost-effective - IPv4 addresses may incur additional costs - Most applications don't require the restricted ports Workarounds for Email Services If you need email functionality but want to use a VM without IPv4: 1. Use external email services (Gmail SMTP, SendGrid, Mailgun, etc.) 2. Deploy a separate email server on a VM with IPv4 3. Use email APIs instead of SMTP protocols Technical Implementation The network restrictions are implemented at the Zero-OS level using netfilter/iptables rules. The implementation can be found in the ZOS codebase: - Reference: ZOS Network Implementation",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/ssh_openssh.md",
    "title": "SSH with OpenSSH",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/ssh_openssh",
    "content": "Introduction In this Threefold Guide, we show how easy it is to deploy a full virtual machine (VM) and SSH into a 3Node with OpenSSH on Linux, MacOS and Windows with either an IPv4 or a Mycelium connection. To deploy different workloads, the SSH connection process should be very similar. Overview Make sure to read the introduction before going further. The main steps for the whole process are the following: Create an SSH key pair Deploy a VM on a 3Node SSH into the 3Node Linux Here are the steps to SSH into a 3Node with either IPv4 or Mycelium on Linux. If you are using Mycelium, make sure to read this section. To create the SSH key pair, write in the terminal Save in default location Write a password (optional) To see the public key, write in the terminal Select and copy the public key when needed To deploy a full VM On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select or in In , click on Click To SSH into the VM once the 3Node is deployed Copy the IP address Open the terminal, write the following with the deployment address and write yes to confirm You now have an SSH connection on Linux. MacOS Here are the steps to SSH into a 3Node with either IPv4 or Mycelium on MacOS. If you are using Mycelium, make sure to read this section. To create the SSH key pair, in the terminal write Save in default location Write a password (optional) To see the public key, write in the terminal Select and copy the public key when needed To deploy a full VM On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select or in In , click on Click To SSH into the VM once the 3Node is deployed Copy the IP address Open the terminal, write the following with the deployment address and write yes to confirm You now have an SSH connection on MacOS. Windows Here are the steps to SSH into a 3Node with either IPv4 or Mycelium on Windows. If you are using Mycelium, make sure to read this section. To download OpenSSH client and OpenSSH server Open the and select Click Click Verifiy if OpenSSH Client and OpenSSH Server are there If not Click Search OpenSSH Install OpenSSH Client and OpenSSH Server To create the SSH key pair, open and write Save in default location Write a password (optional) To see the public key, write in Select and copy the public key when needed To deploy a full VM On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select or in In , click on Click To SSH into the VM once the 3Node is deployed Copy the IP address Open , write the following with the deployment address and write yes to confirm You now have an SSH connection on Window.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/ssh_guide.md",
    "title": "SSH Remote Connection",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide",
    "content": "SSH is a secure protocol used as the primary means of connecting to Linux servers remotely. It provides a text-based interface by spawning a remote shell. After connecting, all commands you type in your local terminal are sent to the remote server and executed there. TABLE OF CONTENTS - SSH with OpenSSH - Advanced Methods",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/ssh_wsl.md",
    "title": "SSH with WSL",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/ssh_wsl",
    "content": "Introduction In this Threefold Guide, we show how easy it is to SSH into a 3node on Windows with Windows Subsystem for Linux (WSL). Make sure to read the Mycelium section if you use Mycelium for the network connection. SSH Key Generation Make sure SSH is installed by entering the following command at the command prompt: The key generation process is identical to the process on a native Linux or Ubuntu installation. With SSH installed, run the SSH key generator by typing the following: Then choose the key name and passphrase or simply press return twice to accept the default values ( and ). When the process has finished, the private key and the public key can be found in the directory accessible from the Ubuntu terminal. You can also access the key from Windows file manager in the following folder: Your private key will be generated using the default name () or the filename you specified. The corresponding public key will be generated using the same filename but with a extension added. If you open the public key in a text editor it should contain something similar to this: Copying the entire text you can specify your public SSH key while connecting your wallet before deploying a VM. Connect to Remote Host with SSH With the SSH key you should be able to SSH to your account on the remote system from the computer that has your private key using the following command: If the private key you're using does not have the default name, or is not stored in the default path (not ), you must explicitly invoke it! On the SSH command line add the flag and the path to your private key. For example, to invoke the private key , stored in the directory, when connecting to your account on a remote host, enter: Enable Port 22 in Windows Firewall The port 22 is used for Secure Shell (SSH) communication and allows remote administration access to the VM. Sometimes it needs and can be unblocked as follows: - open Windows Firewall Advance Settings - click on under to create a new firewall rule - under select - under select , and enter - under select - under make sure to only select and NB: do not select unless you absolutely require a direct connection form the outside world. This is not recommend especially for portable device (Laptop, Tablets) that connect to random Wi-fi hotspots. - under - Name: - Description:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/ssh_wireguard.md",
    "title": "WireGuard",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/ssh_wireguard",
    "content": "Introduction In this Threefold Guide, we show how to set up WireGuard to access a 3Node deployment with an SSH connection. Note that WireGuard provides the connection to the 3Node deployment. It is up to you to decide which SSH client you want to use. This means that the steps to SSH into a 3Node deployment will be similar to the steps proposed in the guides for Open-SSH, PuTTy and WSL. The main difference will be that we connect to the 3Node deployment using a WireGuard connection instead of an IPv4 or a Mycelium connection. Prerequisites Make sure to read the introduction before going further. SSH client of your choice: Open-SSH PuTTy WSL Deploy a Weblet with WireGuard Access For this guide on WireGuard access, we deploy a Full VM. Note that the whole process is similar with other types of ThreeFold weblets on the Dashboard. On the Threefold Dashboard, go to: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select in In , click on Click Once the Full VM is deployed, a window named Details will appear. You will need to take note of the WireGuard Config to set the WireGuard configurations and the WireGuard IP to SSH into the deployment. > Note: At anytime, you can open the Details window by clicking on the button Show Details under Actions on the Dashboard weblet page. Install WireGuard To install WireGuard, please refer to the official WireGuard installation documentation. Set the WireGuard Configurations When it comes to setting the WireGuard configurations, the steps are similar for Linux and MAC, but differ slightly for Windows. For Linux and MAC, we will be using the CLI. For Windows, we will be using the WireGuard GUI app. Linux and MAC To set the WireGuard connection on Linux or MAC, create a WireGuard configuration file and run WireGuard via the command line: Copy the content WireGuard Config from the Dashboard Details window Paste the content to a file with the extension (e.g. wg.conf) in the directory Start WireGuard with the command wg-quick and, as a parameter, pass the configuration file without the extension (e.g. wg.conf -> wg) Note that you can also specify a config file by path, stored in any location If you want to stop the WireGuard service, you can write the following in the terminal > Note: If it doesn't work and you already did a WireGuard connection with the same file, write on the terminal , then to reset the connection with new configurations. Windows To set the WireGuard connection on Windows, add and activate a tunnel with the WireGuard app: Open the WireGuard GUI app Click on Add Tunnel and then Add empty tunnel Choose a name for the tunnel Erase the content of the main window and paste the content WireGuard Config from the Dashboard Details window Click Save and then click on Activate. Test the WireGuard Connection As a test, you can ping the virtual IP address of the VM to make sure the WireGuard connection is properly established. Make sure to replace with the proper WireGuard IP address: Ping the deployment SSH into the Deployment with Wireguard To SSH into the deployment with Wireguard, use the WireGuard IP shown in the Dashboard Details window. SSH into the deployment You now have access to the deployment over a WireGuard SSH connection.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/ssh_putty.md",
    "title": "SSH with PuTTY",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/ssh_putty",
    "content": "Introduction In this Threefold Guide, we show how easy it is to deploy a full virtual machine (VM) and SSH into a 3Node on Windows with PuTTY. To deploy different workloads, the SSH connection process should be very similar. Make sure to read the Mycelium section if you use Mycelium for the network connection. Main Steps and Prerequisites Make sure to read the introduction before going further. The main steps for the whole process are the following: Create an SSH Key pair Deploy a 3Node Choose IPv4 or Mycelium SSH into the 3Node SSH with PuTTY on Windows Here are the main steps to SSH into a full VM using PuTTY on a Windows machine. Download PuTTY You can download the Windows Installer in .msi format here This will add both PuTTY and PuTTYgen to your computer Make sure that you have the latest version of PuTTY to avoid potential issues Generate an SSH key pair Open PuTTYgen In , you can set the type of key to or to Click on Add a passphrase for your private key (optional) Take note of the generated SSH public key You will need to paste it to the Dashboard later Click To deploy a full VM Go to the following section of the Threefold Dashboard: Deploy -> Virtual Machines -> Full Virtual Machine Choose the parameters you want Minimum CPU: 1 vCore Minimum Memory: 512 Mb Minimum Disk Size: 15 Gb Select IPv4 or Mycelium in In , click on Click To SSH into the VM once the 3Node is deployed Take note of the IP address Connect to the full VM with PuTTY Open PuTTY Go to the section Add the VM address under Make sure is set to Go to the section -> -> -> Under , click on Look for the generated SSH private key in .ppk format and click In the main window, click In the PuTTY terminal window, enter as the login parameter Enter the passphrase for the private key if you set one You now have an SSH connection on Windows using PuTTY.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/planetarynetwork.md",
    "title": "Planetary Network",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/planetarynetwork",
    "content": "Introduction In a first phase, to get started, you need to launch the planetary network by running Yggdrasil from the command line. Yggdrasil is an implementation of a fully end-to-end encrypted IPv6 network. It is lightweight, self-arranging, supported on multiple platforms, and allows pretty much any IPv6-capable application to communicate securely with other nodes on the network. Yggdrasil does not require you to have IPv6 Internet connectivity - it also works over IPv4. Install Yggdrasil is necessary for communication between your local machine and the nodes on the Grid that you deploy to. Binaries and packages are available for all major operating systems, or it can be built from source. Find installation instructions here. After installation, you'll need to add at least one publicly available peer to your Yggdrasil configuration file. By default on Unix based systems, you'll find the file at . To find peers, check this site, which compiles and displays the peer information available on Github. Add peers to your configuration file like so: Please consult yggdrasil installation page for more information and clients Run Linux On Linux with , Yggdrasil can be started and enabled as a service, or run manually from the command line: Get your IPv6 address with following command : MacOS The MacOS package will automatically install and start the service. After adding peers to your config file, restart Yggdrasil by stopping the service (it will be restarted automatically): Get your IPv6 address with following command : Test Connectivity To ensure that you have successfully connected to the Yggdrasil network, try loading the site in your browser: Firewalls Creating deployments on the Grid also requires that nodes can reach your machine as well. This means that a local firewall preventing inbound connections will cause deployments to fail. Linux On systems using , check: If the first line is , then all inbound connections over IPv6 will be blocked. To open inbound connections, run: To make this persist after a reboot, run: If you'd rather close the firewall again after you're done, use: MacOS The MacOS system firewall is disabled by default. You can check your firewall settings according to instructions here. Get Yggdrasil IP Once Yggdrasil is installed, you can find your Yggdrasil IP address using this command on both Linux and Mac: You'll need this address when registering your twin on TFChain later. Add Peers - Add the needed peers in the config file generated under Peers. example: - Restart yggdrasil by systemctl restart yggdrasil Peers Central Europe Ghent - tcp://gent01.grid.tf:9943 - tcp://gent02.grid.tf:9943 - tcp://gent03.grid.tf:9943 - tcp://gent04.grid.tf:9943 - tcp://gent01.test.grid.tf:9943 - tcp://gent02.test.grid.tf:9943 - tcp://gent01.dev.grid.tf:9943 - tcp://gent02.dev.grid.tf:9943 Austria - tcp://gw291.vienna1.greenedgecloud.com:9943 - tcp://gw293.vienna1.greenedgecloud.com:9943 - tcp://gw294.vienna1.greenedgecloud.com:9943 - tcp://gw297.vienna1.greenedgecloud.com:9943 - tcp://gw298.vienna1.greenedgecloud.com:9943 - tcp://gw299.vienna2.greenedgecloud.com:9943 - tcp://gw300.vienna2.greenedgecloud.com:9943 - tcp://gw304.vienna2.greenedgecloud.com:9943 - tcp://gw306.vienna2.greenedgecloud.com:9943 - tcp://gw307.vienna2.greenedgecloud.com:9943 - tcp://gw309.vienna2.greenedgecloud.com:9943 - tcp://gw313.vienna2.greenedgecloud.com:9943 - tcp://gw324.salzburg1.greenedgecloud.com:9943 - tcp://gw326.salzburg1.greenedgecloud.com:9943 - tcp://gw327.salzburg1.greenedgecloud.com:9943 - tcp://gw328.salzburg1.greenedgecloud.com:9943 - tcp://gw330.salzburg1.greenedgecloud.com:9943 - tcp://gw331.salzburg1.greenedgecloud.com:9943 - tcp://gw333.salzburg1.greenedgecloud.com:9943 - tcp://gw422.vienna2.greenedgecloud.com:9943 - tcp://gw423.vienna2.greenedgecloud.com:9943 - tcp://gw424.vienna2.greenedgecloud.com:9943 - tcp://gw425.vienna2.greenedgecloud.com:9943 Planetary Network Clients",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods/advanced_methods.md",
    "title": "Advanced Methods",
    "url": "/labs/documentation/system_administrators/tfgrid3_getstarted/ssh_guide/advanced_methods",
    "content": "Advanced Methods TABLE OF CONTENTS - SSH with PuTTY - SSH with WSL - WireGuard - Planetary Network",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_toc.md",
    "title": "Terraform",
    "url": "/labs/documentation/system_administrators/terraform_toc",
    "content": "TABLE OF CONTENTS - Introduction to Terraform - Installing Terraform - Full VM Deployment - Terraform Basics - Resources - Advanced",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_readme.md",
    "title": "Introduction to Terraform",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_readme",
    "content": "What is Terraform? Terraform is an open-source tool that enables you to describe and deploy infrastructure using a declarative configuration language. With Terraform, you can define your infrastructure components, such as virtual machines, networks, and storage, in a human-readable configuration file. This file, often referred to as the Terraform script, becomes a blueprint for your entire infrastructure. The beauty of Terraform lies in its ability to automate the provisioning and management of infrastructure across various cloud providers, ensuring that your deployments are reproducible and scalable. It promotes collaboration, version control, and the ability to treat your infrastructure as code, providing a unified and seamless approach to managing complex environments. This section of the manual will guide you through the process of setting up, configuring, and managing your infrastructure on the ThreeFold Grid using Terraform. Whether you're a seasoned developer, a DevOps professional, or someone exploring the world of decentralized computing for the first time, this guide is designed to provide clear and concise instructions to help you get started. Mycelium Network Note that you can use the Mycelium network to connect to your deployments. To do so, make sure that the Mycelium network is properly set up for the deployments. You can consult the different examples that include the Mycelium network to understand this further. Get Started To get started, install Terraform and deploy a full VM on the grid with Terraform. Once you're acquainted with the basics, you can explore different Terraform deployment examples. Deployment Examples Consult the ThreeFold repo for different Terraform deployment examples. You can also read the Resources section for more details on different Terraform deployments. Features - All basic primitives from ThreeFold grid can be deployed - Terraform can destroy deployments - Terraform shows all the outputs What is Not Supported - We do not support updates nor upgrades. - If you want a change, you need to destroy a deployment & re-create your deployment in case you want to change the current running instances properties or change the node. - Adding a VM to an existing deployment or decommissioning a vm from a deployment shouldn't affect other running VMs. OpenTofu: Alternative to Terraform OpenTofu is a fully open-source Terraform fork that is backward compatible with all prior versions of Terraform up to version 1.6. This alternative can be used instead of Terraform for the following sections. You might need to make changes depending on the version you are working with. Check the OpenTofu Docs for more information.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_install.md",
    "title": "Installing Terraform",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_install",
    "content": "Introduction There are many ways to install Terraform depending on your operating system. Terraform is available for Linux, MAC and Windows. Install Terraform You can get Terraform from the Terraform website download page. You can also install it using your system package manager. The Terraform installation manual contains the essential information for a proper installation. We cover here the basic steps for Linux, MAC and Windows for convenience. Refer to the official Terraform documentation if needed. Linux To install Terraform on Linux, we follow the official Terraform documentation. Install Terraform on Linux MacOS To install Terraform on MacOS, install Brew and then install Terraform. Install Brew Install Terraform with Brew Windows To install Terraform on Windows, a quick way is to first install Chocolatey and then install Terraform. Install Chocolatey * Install Terraform with Chocolatey ThreeFold Terraform Plugin The ThreeFold Terraform plugin is supported on Linux, MAC and Windows. There's no need to specifically install the ThreeFold Terraform plugin. Terraform will automatically load it from an online directory according to instruction within the deployment file.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_full_vm.md",
    "title": "Full VM Deployment",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_full_vm",
    "content": "Introduction This short ThreeFold Guide will teach you how to deploy a Full VM on the TFGrid using Terraform. For this guide, we will be deploying Ubuntu 22.04. The steps are very simple. You first need to create the Terraform files, the variables file and the deployment file, and then deploy the full VM. After the deployment is done, you can SSH into the full VM. The main goal of this guide is to show you all the necessary steps to deploy a Full VM on the TFGrid using Terraform. Once you get acquainted with this first basic deployment, you should be able to explore on your own the possibilities that the TFGrid and Terraform combined provide. Main Process For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workload. To facilitate the deployment, only the environment variables file needs to be adjusted. The file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployment based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the file as is. On your local computer, create a new folder named and a subfolder called . In the subfolder, store the files and . Modify the variable file to take into account your own seed phrase and SSH keys. You should also specifiy the node ID of the 3Node you will be deploying on. Once this is done, initialize and apply Terraform to deploy your workload, then SSH into the Full VM. That's it! Now let's go through all these steps in further details. Prerequisites - Install Terraform You need to download and install properly Terraform. Simply follow the documentation depending on your operating system (Linux, MAC and Windows). Find a 3Node with the ThreeFold Explorer We want to find a proper 3Node to deploy our workload. For this guide, we want a 3Node with at least 15GB of storage, 1 vcore and 512MB of RAM, which are the minimum specifications for a micro VM on the TFGrid. We are also looking for a 3Node with a public IPv4 address. We present two options to find a suitable node: the scheduler and the TFGrid Explorer. Using the Grid Scheduler Using the TFGrid scheduler can be very efficient depending on what you are trying to achieve. To learn more about the scheduler, please refer to this Scheduler Guide. Using the Grid Explorer We show here how to find a suitable 3Node using the ThreeFold Explorer. - Go to the ThreeFold Grid Node Finder (Main Net) - Find a 3Node with suitable resources for the deployment and take note of its node ID on the leftmost column - For proper understanding, we give further information on some relevant columns: - refers to the node ID - refers to available IPv4 public IP addresses - Resource unit codes (consult this page for more information) - is the code for the HDD unit (storage capacity in GB) - is the code for the SSD unit (storage capacity in GB) - is the code for the the memory unit (memory capacity in GB) - is the code for the core unit (virtual cores capacity) - To quicken the process of finding a proper 3Node, you can narrow down the search by adding filters: - At the top left of the screen, in the box, select the parameter(s) you want. - For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Nodes. - : 15 - : 1 - : 1 - : 2 - Note: if you want a public IPv4 address, it is recommended to set the parameter to at least 2 to avoid false positives. This ensures that the shown 3Nodes have viable IP addresses. Once you've found a proper node, take node of its node ID. You will need to use this ID when creating the Terraform files. Create the Terraform Files Open the terminal. - Go to the home folder - - Create the folder and the subfolder : - - - Create the file: - - Copy the content and save the file. In this file, we name the VM as . - Create the file: - - Copy the content and save the file. Make sure to add your own mnemonic and SSH public key. You will also need to specify the node ID of the server used. Simply replace the three dots by the content. We set here the minimum specs for a full VM, but you can adjust these parameters. Here is the SSD storage capacity in GB, is the number of virtual core and is the memory capacity in MB. Deploy the Full VM with Terraform We now deploy the full VM with Terraform. Make sure that you are in the correct folder containing the main and variables files. - Initialize Terraform: - - Apply Terraform to deploy the full VM: - After deployments, take note of the 3Node' IPv4 address. You will need this address to SSH into the 3Node. SSH into the 3Node - To SSH into the 3Node, write the following: - Delete the Deployment To stop the Terraform deployment, you simply need to write the following line in the terminal: Make sure that you are in the Terraform directory you created for this deployment. Conclusion You now have the basic knowledge and know-how to deploy on the TFGrid using Terraform.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_basics.md",
    "title": "Terraform Basics",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_basics",
    "content": "Introduction We cover some important aspects of Terraform deployments on the ThreeFold Grid. For a complete guide on deploying a full VM on the TFGrid, read this documentation. Requirements Here are the requirements to use Terraform on the TFGrid: - Set your TFGrid account - Install Terraform Basic Commands Here are some very useful commands to use with Terraform: - Initialize the repo - Execute a terraform file - See the output - This is useful when you want to output variables such as public ip, planetary network ip, wireguard configurations, etc. - See the state - Destroy Find A Node There are two options when it comes to finding a node to deploy on. You can use the scheduler or search for a node with the Nodes Explorer. - Use the scheduler - Scheduler will help you find a node that matches your criteria - Use the Nodes Explorer - You can check the Node Finder to know which nodes fits your deployment criteria. - Make sure you choose a node which has enough capacity and is available (up and running). Preparation We cover the basic preparations beforing explaining the main file. - Make a directory for your project - - Change directory - - Create a main file and insert content - Main File Details Here is a concrete example of a Terraform main file. Initializing the Provider - You can always provide a version to chooses a specific version of the provider like to use version for devnet - If is omitted, the provider will fetch the latest version, but for environments other than main you have to specify the version explicitly - For devnet, qanet and testnet use version = respectively Providers can have different arguments e.g using which identity when deploying, which Substrate network to create contracts on, etc. This can be done in the provider section, as shown below: Export Environment Variables When writing the main file, you can decide to leave a variable content empty. In this case you can export the variable content as environment variables. Export your mnemonic Export the network For more info, consult the Provider Manual. Output Section The output section is useful to find information such as: - the overlay wireguard network configurations - the private IPs of the VMs - the public IP of the VM The output section will look something like this: Start a Deployment To start a deployment, run the following command . Delete a Deployment To delete a deployment, run the following command: Available Flists You can consult the list of Flists to learn more about the available Flist to use with a virtual machine. Full and Micro Virtual Machines There are some key distinctions to take into account when it comes to deploying full or micro VMs on the TFGrid: Only the flist determines if we get a full or a micro VM Full VMs ignore the rootfs field and use the first mount as their root filesystem (rootfs) We can upgrade a full VM by tearing it down, leaving the disk in detached state, and then reattaching the disk to a new VM For more information on this, read this documentation. Tips on Managing Resources As a general advice, you can use multiple accounts on TFChain and group your resources per account. This gives you the following benefits: - More control over TFT spending - Easier to delete all your contracts - Less chance to make mistakes - Can use an account to share access with multiple people Conclusion This was a quick introduction to Terraform, for a complete guide, please read this documentation. For advanced tutorials and deployments, read this section. To learn more about the different resources to deploy with Terraform on the TFGrid, read this section.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_zlogs.md",
    "title": "Zlogs",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_zlogs",
    "content": "Introduction Zlogs is a utility that allows you to stream VM logs to a remote location. You can find the full description here Using Zlogs In Terraform, a vm has a zlogs field, this field should contain a list of target URLs to stream logs to. Valid protocols are: , , and . For example, to deploy two VMs named \"vm1\" and \"vm2\", with one vm1 streaming logs to vm2, this is what main.tf looks like: At this point, two VMs are deployed, and vm1 is ready to stream logs to vm2. But what is missing here is that vm1 is not actually producing any logs, and vm2 is not listening for incoming messages. Creating a server - First, we will create a server on vm2. This should be a websocket server listening on port 5000 as per our zlogs definition in main.tf . - a simple python websocket server looks like this: - Note that incoming messages are decompressed since zlogs compresses any messages using gzip. - After a message is decompressed, it is then appended to . Streaming logs - Zlogs streams anything written to stdout of the zinit process on a vm. - So, simply running on vm1 should successfuly stream this message to the vm2 and we should be able to see it in . - Also, if we want to stream a service's logs, a service definition file should be created in on vm1 and should look like this:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_zdb.md",
    "title": "ZDB",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_zdb",
    "content": "Introduction We provide a basic template for ZDB deployment with Terraform on the TFGrid. A brief description of zdb fields can be found here. A more thorough description of zdb operation can be found in its parent repo. Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_vm_gateway.md",
    "title": "Web Gateway",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_vm_gateway",
    "content": "Introduction In this section, we provide the basic information for a VM web gateway using Terraform on the TFGrid. Expose with Prefix A complete list of gateway name workload parameters can be found here. please note to use grid_name_proxy you should choose a node that has public config and has a domain in its public config like node 7 in the following example ! Here - we created a grid domain resource to be deployed on gateway node to end up with a domain - we create a proxy for the gateway to send the traffic coming to to the vm as a backend, we say to let the gateway terminate the traffic, if you replcae it with your backend service needs to be able to do the TLS termination Expose with Full Domain A complete list of gateway fqdn workload parameters can be found here. it is more like the above example the only difference is you need to create an on your name provider for to gateway node IPv4. Using Gateway Name on Private Networks (WireGuard) It is possible to create a vm with private ip (wireguard) and use it as a backend for a gateway contract. this is done as the following - Create a gateway domain data source. this data source will construct the full domain so we can use it afterwards - create a network resource - Create a vm to host your service - Create a grid_name_proxy resource using the network created above and the wireguard ip of the vm that host the service. Also consider changing the port to the correct port - To know the full domain created using the data source above you can show it via - Now vist the domain you should be able to reach your service hosted on the vm",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_vm.md",
    "title": "Virtual Machine",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_vm",
    "content": "Introduction The following provides the basic information to deploy a VM with Terraform on the TFGrid. Template Using scheduler - If the user decided to choose scheduler to find a node for him, then he will use the node returned from the scheduler as the example above Using Grid Explorer - If not, the user can still specify the node directly if he wants using the grid explorer to find a node that matches his requirements Describing the overlay network for the project We tell terraform we will have a network one node using the IP Range and add wireguard access for this network Describing the deployment It's bit long for sure but let's try to dissect it a bit - means this deployment will happen on node returned from the scheduler. Otherwise the user can specify the node as and in this case the choice of the node is completely up to the user at this point. They need to do the capacity planning. Check the Node Finder to know which nodes fits your deployment criteria. - which network to deploy our project on, and here we choose the of network - here we lookup the iprange of node and initially load it with > Advannced note: Direct map access fails during the planning if the key doesn't exist which happens in cases like adding a node to the network and a new deployment on this node. So it's replaced with this to make a default empty value to pass the planning validation and it's validated anyway inside the plugin. Which flists to use see list of flists Remark multiple VMs in terraform you can define items of a list like the following So to add a VM - We give it a name within our deployment - is used to define the flist to run within the VM. Check the list of flists - and are used to define the cpu and memory - is usued to define if it requires a public IP or not - is used define the entrypoint which in most of the cases in , but in case of flists based on vms it can be specific to each flist - are used to define te environment variables, in this example we define to authorize me accessing the machine Here we say we will have this deployment on node with using the overlay network defined from before and use the ip range allocated to that specific node The file describes only the desired state which is Reference A complete list of VM workload parameters can be found here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_scheduler.md",
    "title": "Using Scheduler",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_scheduler",
    "content": "Introduction Using the TFGrid scheduler enables users to automatically get the nodes that match their criterias. We present here some basic information on this resource. How the Scheduler Works To better understand the scheduler, we summarize the main process: - At first if is specified, then the scheduler will check if this farm has the Farmerbot enabled - If so it will try to find a suitable node using the Farmerbot. - If the Farmerbot is not enabled, it will use grid proxy to find a suitable node. Quick Example Let's take a look at the following example: From the example above, we take a closer look at the following section: In this case, the user is specifying the requirements which match the deployments. Later on, the user can use the result of the scheduler which contains the in the deployments: and",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_resources_readme.md",
    "title": "Resources",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme",
    "content": "TABLE OF CONTENTS - Using Scheduler - Virtual Machine - Web Gateway - Kubernetes Cluster - ZDB - Zlogs - Quantum Safe Filesystem - CapRover",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_k8s.md",
    "title": "Kubernetes Cluster",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_k8s",
    "content": "Introduction While Kubernetes deployments can be quite difficult and can require lots of experience, we provide here a very simple way to provision Kubernetes cluster on the TFGrid. Example An example for deploying a kubernetes cluster could be found here Everything looks similar to our first example, the global terraform section, the provider section and the network section. Grid Kubernetes Resource It requires - Network name that would contain the cluster - A cluster token to work as a key for other nodes to join the cluster - SSH key to access the cluster VMs. Then, we describe the the master and worker nodes in terms of: - name within the deployment - disk size - node to deploy it on - cpu - memory - whether or not this node needs a public ip Kubernetes Outputs We will be mainly interested in the master node public ip and the wireguard configurations More Info A complete list of k8s resource parameters can be found here. Demo Video Here is a video showing how to deploying k8s with Terraform.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_caprover.md",
    "title": "CapRover",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_caprover",
    "content": "What is CapRover? CapRover is an easy-to-use app/database deployment and web server manager that works for a variety of applications such as Node.js, Ruby, PHP, Postgres, and MongoDB. It runs fast and is very robust, as it uses Docker, Nginx, LetsEncrypt, and NetData under the hood behind its user-friendly interface. Here’s a link to CapRover's open source repository on GitHub. Features of Caprover - CLI for automation and scripting - Web GUI for ease of access and convenience - No lock-in: Remove CapRover and your apps keep working ! - Docker Swarm under the hood for containerization and clustering. - Nginx (fully customizable template) under the hood for load-balancing. - Let’s Encrypt under the hood for free SSL (HTTPS). - One-Click Apps : Deploying one-click apps is a matter of seconds! MongoDB, Parse, MySQL, WordPress, Postgres and many more. - Fully Customizable : Optionally fully customizable nginx config allowing you to enable HTTP2, specific caching logic, custom SSL certs and etc. - Cluster Ready : Attach more nodes and create a cluster in seconds! CapRover automatically configures nginx to load balance. - Increase Productivity : Focus on your apps ! Not the bells and whistles, just to run your apps. - Easy Deploy : Many ways to deploy. You can upload your source from dashboard, use command line caprover deploy, use webhooks and build upon git push Prerequisites - Domain Name: after installation, you will need to point a wildcard DNS entry to your CapRover IP Address. Note that you can use CapRover without a domain too. But you won't be able to setup HTTPS or add . - TerraForm installed to provision, adjust and tear down infrastructure using the tf configuration files provided here. - Yggdrasil installed and enabled for End-to-end encrypted IPv6 networking. - account created on Polkadot and got an twin id, and saved your mnemonic. - TFTs in your account balance (in development, Transferer some test TFTs from ALICE account). How to Run CapRover on ThreeFold Grid 3 In this guide, we will use Caprover to setup your own private Platform as a service (PaaS) on TFGrid 3 infrastructure. Clone the Project Repo A) leader node deployment/setup: Step 1: Deploy a Leader Node Create a leader caprover node using terraform, here's an example : - In Block, add your and specify the grid network to deploy on. - In Block, update the disks size, memory size, and cores number to fit your needs or leave as it is for testing. - In the env var value put your ssh public key . - In the env var value put your root domain, this is optional and you can add it later from the dashboard put it will save you the extra step and allow you to access your dashboard using your domain name directly after the deployment. - save the file, and execute the following commands: - wait till you see , and note the VM public ip in the final output. - verify the status of the VM You will see output like this: Wait until you see \\\\ Installation is done! \\\\\\ in the caprover service log. Step 2: Connect Root Domain After the container runs, you will now need to connect your CapRover instance to a Root Domain. Let’s say you own example.com. You can set \\.something.example.com as an A-record in your DNS settings to point to the IP address of the server where you installed CapRover. To do this, go to the DNS settings in your domain provider website, and set a wild card A record entry. For example: Type: A, Name (or host): \\*.something.example.com, IP (or Points to): where this is the IP address of your CapRover machine. To confirm, go to https://mxtoolbox.com/DNSLookup.aspx and enter and check if IP address resolves to the IP you set in your DNS. Note is needed because you set a wildcard entry in your DNS by setting as your host, not . Step 3: CapRover Root Domain Configurations skip this step if you provided your root domain in the TerraFrom configuration file Once the CapRover is initialized, you can visit in your browser and login to CapRover using the default password . You can change your password later. In the UI enter you root domain and press Update Domain button. Step 4: Access the Captain Dashboard Once you set your root domain as caprover.example.com, you will be redirected to captain.caprover.example.com. Now CapRover is ready and running in a single node. To allow cluster mode - Enable HTTPS - Go to CapRover tab, then in press on then you will asked to enter your email address - Docker Registry Configuration - Go to CapRover tab, then in section, press on or add your - Run the following command in the ssh session: It will output something like this: - To add a worker node to this swarm, you need: - Generated token - Leader node public ip This information is required in the next section to run CapRover in cluster mode. B) Worker Node Deployment/setup: We show how to deploy a worker node by providing an example worker Terraform file. - In Block, add your and specify the grid network to deploy on. - In Block, update the disks size, memory size, and cores number to fit your needs or leave as it is for testing. - In the env var value put your ssh public key. - In the env var value put the previously generated token. - In the env var value put the leader node public ip. - Save the file, and execute the following commands: - Wait till you see , and note the VM public ip in the final output. - Verify the status of the VM. You will see output like this: This means that your worker node is now ready and have joined the cluster successfully. You can also verify this from CapRover dashboard in tab. Check section, you should be able to see the new worker node added there. Now CapRover is ready in cluster mode (more than one server). To run One-Click Apps please follow this tutorial Implementations Details: - we use Ubuntu 18.04 to minimize the production issues as CapRover is tested on Ubuntu 18.04 and Docker 19.03. - In standard installation, CapRover has to be installed on a machine with a public IP address. - Services are managed by service manager to bring these processes up and running in case of any failure: - sshd-init : service used to add user public key in vm ssh authorized keys (it run once). - containerd: service to maintain container runtime needed by docker. - caprover: service to run caprover container(it run once). - dockerd: service to run docker daemon. - sshd: service to maintain ssh server daemon. - we adjusting the OOM priority on the Docker daemon so that it is less likely to be killed than other processes on the system",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_qsfs/terraform_qsfs_on_microvm.md",
    "title": "QSFS on Micro VM",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_qsfs/terraform_qsfs_on_microvm",
    "content": "Introduction In this ThreeFold Guide, we will learn how to deploy a Quantum Safe File System (QSFS) deployment with Terraform. The main template for this example can be found here. Prerequisites In this guide, we will be using Terraform to deploy a QSFS workload on a micro VM that runs on the TFGrid. Make sure to have the latest Terraform version. - Install Terraform Find a 3Node We want to find a proper 3Node to deploy our workload. For this guide, we want a 3Node with at least 15GB of storage, 1 vcore and 512MB of RAM, which are the minimum specifications for a micro VM on the TFGrid. We are also looking for a 3Node with a public IPv4 address. We show here how to find a suitable 3Node using the ThreeFold Explorer. Go to the ThreeFold Grid Node Finder (Main Net) Find a 3Node with suitable resources for the deployment and take note of its node ID on the leftmost column For proper understanding, we give further information on some relevant columns: refers to the node ID refers to available IPv4 public IP addresses refers to HDD storage refers to SSD storage refers to RAM (memory) refers to virtual cores (vcores) To quicken the process of finding a proper 3Node, you can narrow down the search by adding filters: At the top left of the screen, in the box, select the parameter(s) you want. For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Nodes. : 15 : 1 : 1 : 2 Note: if you want a public IPv4 address, it is recommended to set the parameter to at least 2 to avoid false positives. This ensures that the shown 3Nodes have viable IP addresses. Once you've found a proper node, take node of its node ID. You will need to use this ID when creating the Terraform files. Create the Terraform Files We present two different methods to create the Terraform files. In the first method, we will create the Terraform files using the TFGrid Terraform Provider. In the second method, we will create the Terraform files manually. Feel free to choose the method that suits you best. Create the Files with the Provider Creating the Terraform files is very straightforward. We want to clone the repository locally and run some simple commands to properly set and start the deployment. Clone the repository Go to the subdirectory containing the examples Set your own mnemonic (replace with your own mnemonic) Set the network (replace by the desired network, e.g. , , or ) Initialize the Terraform deployment Apply the Terraform deployment At any moment, you can destroy the deployment with the following line When using this method, you might need to change some parameters within the depending on your specific deployment. Create the Files Manually For this method, we use two files to deploy with Terraform. The first file contains the environment variables (credentials.auto.tfvars) and the second file contains the parameters to deploy our workloads (main.tf). To facilitate the deployment, only the environment variables file needs to be adjusted. The main.tf file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file, but only the file credentials.auto.tfvars. Open the terminal and go to the home directory (optional) Create the folder and the subfolder : Create the file: Copy the content and save the file. Note that we named the VM as vm1. Create the file: Copy the content and save the file. Make sure to add your own seed phrase and SSH public key. You will also need to specify the node ID of the 3Node you want to deploy on. Simply replace the three dots by the content. If you want to deploy on the Test net, you can replace main by test. Set the parameters for your VMs as you wish. For this example, we use the minimum parameters. For the section QSFS Parameters, you can decide on how many VMs your data will be sharded. You can also decide the minimum of VMs to recover the whole of your data. For example, a 16 minimum, 20 expected configuration will disperse your data on 20 3Nodes, and the deployment will only need at any time 16 VMs to recover the whole of your data. This gives resilience and redundancy to your storage. A 2 minimum, 4 expected configuration is given here for the main template. Deploy the Micro VM with Terraform We now deploy the QSFS deployment with Terraform. Make sure that you are in the correct folder containing the main and variables files. Initialize Terraform by writing the following in the terminal: Apply the Terraform deployment: Terraform will then present you the actions it will perform. Write to confirm the deployment. Note that, at any moment, if you want to see the information on your Terraform deployments, write the following: * SSH into the 3Node You can now SSH into the 3Node with Planetary Network. To SSH with Planetary Network, write the following: Note that the IP address should be the value of the parameter planetary_ip from the Terraform Outputs. You now have an SSH connection access to the VM over Planetary Network. Questions and Feedback If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_qsfs/terraform_qsfs_on_full_vm.md",
    "title": "QSFS on Full VM",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_qsfs/terraform_qsfs_on_full_vm",
    "content": "Introduction This short ThreeFold Guide will teach you how to deploy a Full VM with QSFS disk on the TFGrid using Terraform. For this guide, we will be deploying Ubuntu 22.04 based cloud-init image. The steps are very simple. You first need to create the Terraform files, and then deploy the full VM and the QSFS workloads. After the deployment is done, you will need to SSH into the full VM and manually mount the QSFS disk. The main goal of this guide is to show you all the necessary steps to deploy a Full VM with QSFS disk on the TGrid using Terraform. Prerequisites - Install Terraform You need to download and install properly Terraform. Simply follow the documentation depending on your operating system (Linux, MAC and Windows). Create the Terraform Files Deploying a FullVM is a bit different than deploying a MicroVM, let take a look first at these differences - FullVMs uses images and unlike the microVMs it needs at least one disk attached to the vm to copy the image to, and it serves as the root fs for the vm. - QSFS disk is based on , and you can't use QSFS disk as the first mount in a FullVM, instead you need a regular disk. - Any extra disks/mounts will be available on the vm but unlike mounts on MicroVMs, extra disks won't be mounted automatically. you will need to mount it manually after the deployment. Let modify the qsfs-on-microVM example to deploy a QSFS on FullVM this time: - Inside the resource we will need to add a disk for the vm root fs. - We need also to add an extra mount inside the resource in block. it must be the first mounts block in the vm: - We also need to specify the flist for our FullVM, inside the in the block, change the flist filed to use this image: - https://hub.grid.tf/tf-official-vms/ubuntu-22.04.flist Full Example The full example would be like this: note: the should be the same as the qsfs disk name in . Mounting the QSFS Disk After applying this terraform file, you will need to manually mount the disk. SSH into the VM and type : Debugging During deployment, you might encounter the following error when using mount command: - Explanations: Most likely you typed a wrong qsfs deployment/disk name that not matched with the one from qsfs deployment. - Solution: Double check your terraform file, and make sure the name you are using as qsfs deployment/disk name is matching the one you are trying to mount on your VM.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_qsfs/terraform_qsfs.md",
    "title": "Quantum Safe Filesystem",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_resources_readme/terraform_qsfs",
    "content": "Introduction Quantum Storage is a FUSE filesystem that uses mechanisms of forward error correction (Reed Solomon codes) to make sure data (files and metadata) are stored in multiple remote places in a way that we can afford losing x number of locations without losing the data. The aim is to support unlimited local storage with remote backends for offload and backup which cannot be broken, even by a quantum computer. QSFS Workload Parameters and Documentation A complete list of QSFS workload parameters can be found here. The quantum-storage repo contains a more thorough description of QSFS operation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_wireguard_vpn.md",
    "title": "Set a Wireguard VPN",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_wireguard_vpn",
    "content": "Introduction In this ThreeFold Guide, we will learn how to deploy two micro virtual machines (Ubuntu 22.04) with Terraform. The Terraform deployment will be composed of a virtual private network (VPN) using Wireguard. The two VMs will thus be connected in a private and secure network. Note that this concept can be extended with more than two micro VMs. Once you understand this guide, you will be able to adjust and deploy your own personalized Wireguard VPN on the ThreeFold Grid. Prerequisites Install Terraform Install Wireguard You need to download and install properly Terraform and Wireguard on your local computer. Simply follow the linked documentation depending on your operating system (Linux, MAC and Windows). Find a 3Node with the ThreeFold Explorer We want to find a proper 3Node to deploy our workload. For this guide, we want a 3Node with at least 15GB of storage, 1 vcore and 512MB of RAM, which are the minimum specifications for a micro VM on the TFGrid. We are also looking for a 3Node with a public IPv4 address. We show here how to find a suitable 3Node using the ThreeFold Explorer. Go to the ThreeFold Grid Node Finder (Main Net) Find a 3Node with suitable resources for the deployment and take note of its node ID on the leftmost column For proper understanding, we give further information on some relevant columns: refers to the node ID refers to available IPv4 public IP addresses refers to HDD storage refers to SSD storage refers to RAM (memory) refers to virtual cores (vcores) To quicken the process of finding a proper 3Node, you can narrow down the search by adding filters: At the top left of the screen, in the box, select the parameter(s) you want. For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Nodes. : 15 : 1 : 1 : 2 Note: if you want a public IPv4 address, it is recommended to set the parameter to at least 2 to avoid false positives. This ensures that the shown 3Nodes have viable IP addresses. Once you've found a proper node, take node of its node ID. You will need to use this ID when creating the Terraform files. Create a Two Servers Wireguard VPN with Terraform For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workloads. To facilitate the deployment, only the environment variables file needs to be adjusted. The file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployments based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the as is. On your local computer, create a new folder named and a subfolder called . In the subfolder, store the files and . Modify the variable file to take into account your own seed phras and SSH keys. You should also specifiy the node IDs of the two 3Nodes you will be deploying on. Now let's create the Terraform files. Open the terminal and go to the home directory Create the folder and the subfolder : Create the file: Copy the content and save the file. In this guide, the virtual IP for is 10.1.3.2 and the virtual IP for is 10.1.4.2. This might be different during your own deployment. Change the codes in this guide accordingly. Create the file: Copy the content and save the file. Make sure to add your own seed phrase and SSH public key. You will also need to specify the two node IDs of the servers used. Simply replace the three dots by the content. Set the parameters for your VMs as you wish. The two servers will have the same parameters. For this example, we use the minimum parameters. Deploy the Micro VMs with Terraform We now deploy the VPN with Terraform. Make sure that you are in the correct folder containing the main and variables files. Initialize Terraform by writing the following in the terminal: Apply the Terraform deployment: Terraform will then present you the actions it will perform. Write to confirm the deployment. Note that, at any moment, if you want to see the information on your Terraform deployments, write the following: Set the Wireguard Connection To set the Wireguard connection, on your local computer, you will need to take the terraform output and create a file in the directory: . Note that the Terraform output starts and ends with EOT. For more information on WireGuard, notably in relation to Windows, please read this documentation. Create a file named in the directory: . Paste the content between the two displayed after you set . Start the wireguard: If you want to stop the Wireguard service, write the following on your terminal: > Note: If it doesn't work and you already did a Wireguard connection with the same file from terraform (from a previous deployment), write on the terminal , then . As a test, you can ping the virtual IP address of the VMs to make sure the Wireguard connection is correct. Make sure to replace with the proper IP address for each VM: SSH into the 3Node You can now SSH into the 3Nodes with either Wireguard or IPv4. To SSH with Wireguard, write the following with the proper IP address for each 3Node: To SSH with IPv4, write the following for each 3Nodes: You now have an SSH connection access to the VMs over Wireguard and IPv4. Destroy the Terraform Deployment If you want to destroy the Terraform deployment, write the following in the terminal: Then write to confirm. Make sure that you are in the corresponding Terraform folder when writing this command. In this guide, the folder is . Conclusion In this ThreeFold Guide, we learned how easy it is to deploy a VPN with Wireguard and Terraform. You can adjust the parameters how you like and explore different possibilities. As always, if you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_wireguard_ssh.md",
    "title": "SSH Connection with Wireguard",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_wireguard_ssh",
    "content": "Introduction In this ThreeFold Guide, we show how simple it is to deploy a micro VM on the ThreeFold Grid with Terraform and to make an SSH connection with Wireguard. Prerequisites Install Terraform Install Wireguard You need to download and install properly Terraform and Wireguard on your local computer. Simply follow the linked documentation depending on your operating system (Linux, MAC and Windows). Find a 3Node with the ThreeFold Explorer We want to find a proper 3Node to deploy our workload. For this guide, we want a 3Node with at least 15GB of storage, 1 vcore and 512MB of RAM, which are the minimum specifications for a micro VM on the TFGrid. We show here how to find a suitable 3Node using the ThreeFold Explorer. Go to the ThreeFold Grid Node Finder (Main Net) to find a 3Node Find a 3Node with suitable resources for the deployment and take note of its node ID on the leftmost column For proper understanding, we give further information on some relevant columns: refers to the node ID refers to available IPv4 public IP addresses refers to HDD storage refers to SSD storage refers to RAM (memory) refers to virtual cores (vcores) To quicken the process of finding a proper 3Node, you can narrow down the search by adding filters: At the top left of the screen, in the box, select the parameter(s) you want. For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Nodes. Here's what would work for our currernt situation. : 15 : 1 : 1 Once you've found a proper node, take node of its node ID. You will need to use this ID when creating the Terraform files. Create the Terraform Files For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workloads. To facilitate the deployment, only the environment variables file needs to be adjusted. The file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployments based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the as is. On your local computer, create a new folder named and a subfolder called . In the subfolder, store the files and . Modify the variable file to take into account your own seed phras and SSH keys. You should also specifiy the node ID of the 3Node you will be deploying on. Now let's create the Terraform files. Open the terminal and go to the home directory Create the folder and the subfolder : nano main.tf terraform { required_providers { grid = { source = \"threefoldtech/grid\" } } } variable \"mnemonic\" { type = string } variable \"SSH_KEY\" { type = string } variable \"tfnodeid1\" { type = string } variable \"size\" { type = string } variable \"cpu\" { type = string } variable \"memory\" { type = string } provider \"grid\" { mnemonic = var.mnemonic network = \"main\" } locals { name = \"tfvm\" } resource \"grid_network\" \"net1\" { name = local.name nodes = [var.tfnodeid1] ip_range = \"10.1.0.0/16\" description = \"newer network\" add_wg_access = true } resource \"grid_deployment\" \"d1\" { disks { name = \"disk1\" size = var.size } name = local.name node = var.tfnodeid1 network_name = grid_network.net1.name vms { name = \"vm1\" flist = \"https://hub.grid.tf/tf-official-vms/ubuntu-22.04.flist\" cpu = var.cpu mounts { name = \"disk1\" mount_point = \"/disk1\" } memory = var.memory entrypoint = \"/sbin/zinit init\" env_vars = { SSH_KEY = var.SSH_KEY } } } output \"wg_config\" { value = grid_network.net1.access_wg_config } output \"node1_zmachine1_ip\" { value = grid_deployment.d1.vms[0].ip } nano credentials.auto.tfvars mnemonic = \"...\" SSH_KEY = \"...\" tfnodeid1 = \"...\" size = \"15\" cpu = \"1\" memory = \"512\" terraform init terraform apply terraform show nano /usr/local/etc/wireguard/wg.conf wg-quick up wg wg-quick down wg ping vm_wg_ip ssh root@vm_wg_ip terraform destroy yesdeployment-wg-ssh`. Conclusion In this simple ThreeFold Guide, you learned how to SSH into a 3Node with Wireguard and Terraform. Feel free to explore further Terraform and Wireguard. As always, if you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_updates.md",
    "title": "Updates",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_updates",
    "content": "Introduction We present ways to update using Terraform. Note that this is not fully supported. Some of the updates are working, but the code is not finished, use at your own risk. Updating with Terraform Updates are triggered by changing the deployments fields. So for example, if you have the following network resource: Then decided to add a node: After calling , the provider does the following: - Add node 4 to the network. - Update the version of the workload. - Update the version of the deployment. - Update the hash in the contract (the contract id will stay the same) Adjustments There are workloads that doesn't support in-place updates (e.g. Zmachines). To change them there are a couple of options (all performs destroy/create so data can be lost): 1. (next apply will destroy ALL workloads within grid_deployment.d1 and create a new deployment) 2. (same as above) 3. Remove the vm, then execute a , then add the vm with the new config (this performs two updates but keeps neighboring workloads inside the same deployment intact). (CAUTION: this could be done only if the vm is last one in the list of vms, otherwise undesired behavior will occur)",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_provisioners.md",
    "title": "Terraform Provisioners",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_provisioners",
    "content": "Introduction In this example, we will see how to deploy a VM and apply provisioner commands on it on the TFGrid. Example Params docs Requirements - the machine should have running - the machine should have installed Connection Block - defines how we will connect to the deployed machine type: defines the used service to connect to user: the connecting users agent: if used the provisoner will use the default key to connect to the remote machine host: the ip/host of the remote machine Provisioner Block - defines the actual provisioner behaviour - remote-exec: the provisoner type we are willing to use can be remote, local or another type - inline: This is a list of command strings. They are executed in the order they are provided. This cannot be provided with script or scripts. - script: This is a path (relative or absolute) to a local script that will be copied to the remote resource and then executed. This cannot be provided with inline or scripts. - scripts: This is a list of paths (relative or absolute) to local scripts that will be copied to the remote resource and then executed. They are executed in the order they are provided. This cannot be provided with inline or script. More Info A complete list of provisioner parameters can be found here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_provider.md",
    "title": "Terraform Provider",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_provider",
    "content": "Introduction We present the basics of the Terraform Provider. Example Environment Variables should be recognizable as Env variables too - - - - - - The *_URL variables can be used to override the dafault urls associated with the specified network Remarks - Grid terraform provider is hosted on terraform registry here - All provider input variables and their description can be found here - Capitalized environment variables can be used instead of writing them in the provider (e.g. MNEMONIC)",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nomad.md",
    "title": "Nomad",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nomad",
    "content": "Introduction In this ThreeFold Guide, we will learn how to deploy a Nomad cluster on the TFGrid with Terraform. We cover a basic two client and three server nodes Nomad cluster. After completing this guide, you will have sufficient knowledge to build your own personalized Nomad cluster. What is Nomad? Nomad is a simple and flexible scheduler and orchestrator to deploy and manage containers and non-containerized applications across on-premises and clouds at scale. In the dynamic world of cloud computing, managing and orchestrating workloads across diverse environments can be a daunting task. Nomad emerges as a powerful solution, simplifying and streamlining the deployment, scheduling, and management of applications. Nomad's elegance lies in its lightweight architecture and ease of use. It operates as a single binary, minimizing resource consumption and complexity. Its intuitive user interface and straightforward configuration make it accessible to a wide range of users, from novices to experienced DevOps. Nomad's versatility extends beyond its user-friendliness. It seamlessly handles a wide array of workloads, including legacy applications, microservices, and batch jobs. Its adaptability extends to diverse environments, effortlessly orchestrating workloads across on-premises infrastructure and public clouds. It's more of Kubernetes for humans! Prerequisites Install Terraform Install WireGuard You need to download and install properly Terraform and Wireguard on your local computer. Simply follow the documentation depending on your operating system (Linux, MAC and Windows). If you are new to Terraform, feel free to read this basic Terraform Full VM guide to get you started. Create the Terraform Files For this guide, we use two files to deploy with Terraform: a main file and a variables file. The variables file contains the environment variables and the main file contains the necessary information to deploy your workload. To facilitate the deployment, only the environment variables file needs to be adjusted. The file will be using the environment variables from the variables files (e.g. for the CPU parameter) and thus you do not need to change this file. Of course, you can adjust the two files based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the main file as is. Also note that this deployment uses both the Planetary network and WireGuard. Main File We start by creating the main file for our Nomad cluster. Create a directory for your Terraform Nomad cluster Create the file Copy the following template and save the file Credentials File We create a credentials file that will contain the environment variables. This file should be in the same directory as the main file. Create the file Copy the content and save the file Make sure to replace the three dots by your own information for and . You will also need to find a suitable node for your deployment and set its node ID (). Feel free to adjust the parameters , and if needed. Deploy the Nomad Cluster We now deploy the Nomad Cluster with Terraform. Make sure that you are in the directory containing the file. Initialize Terraform Apply Terraform to deploy the Nomad cluster SSH into the Client and Server Nodes You can now SSH into the client and server nodes using both the Planetary network and WireGuard. Note that the IP addresses will be shown under after running the command , with for the Planetary network and for WireGuard. SSH with the Planetary Network To SSH with the Planetary network, write the following with the proper IP address You now have an SSH connection access over the Planetary network to the client and server nodes of your Nomad cluster. SSH with WireGuard To SSH with WireGuard, we first need to set the proper WireGuard configurations. Create a file named in the directory Paste the content provided by the Terraform deployment in the file and save it. Note that you can use to see the Terraform output. The WireGuard configurations () stands in between the two instances. Start WireGuard on your local computer As a test, you can ping the WireGuard IP of a node to make sure the connection is correct We are now ready to SSH into the client and server nodes with WireGuard. To SSH with WireGuard, write the following with the proper IP address: You now have an SSH connection access over WireGuard to the client and server nodes of your Nomad cluster. For more information on connecting with WireGuard, read this documentation. Destroy the Nomad Deployment If you want to destroy the Nomad deployment, write the following in the terminal: Then write to confirm. Make sure that you are in the corresponding Terraform folder when writing this command. Conclusion You now have the basic knowledge to deploy a Nomad cluster on the TFGrid. Feel free to explore the many possibilities available that come with Nomad. You can now use a Nomad cluster to deploy your workloads. For more information on this, read this documentation on how to deploy a Redis workload on the Nomad cluster. If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_mounts.md",
    "title": "Mounts",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_mounts",
    "content": "Introduction In this example, we will see how to deploy a VM and mount disks on it on the TFGrid. Example More Info A complete list of Mount workload parameters can be found here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_mariadb_synced_databases.md",
    "title": "Synced MariaDB Databases (SQL)",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_mariadb_synced_databases",
    "content": "Introduction In this ThreeFold Guide, we show how to deploy a VPN with Wireguard and create a synced MariaDB database between the two servers using GlusterFS, a scalable network filesystem. Any change in one VM's database will be echoed in the other VM's database. This kind of deployment can lead to useful server architectures. Main Steps This guide might seems overwhelming, but the steps are carefully explained. Take your time and it will all work out! To get an overview of the whole process, we present the main steps: Download the dependencies Find two 3Nodes on the TFGrid Deploy and set the VMs with Terraform Create a MariaDB database Set GlusterFS Prerequisites Install Terraform Install Wireguard You need to download and install properly Terraform and Wireguard on your local computer. Simply follow the documentation depending on your operating system (Linux, MAC and Windows). Find Nodes with the ThreeFold Explorer We first need to decide on which 3Nodes we will be deploying our workload. We thus start by finding two 3Nodes with sufficient resources. For this current MariaDB guide, we will be using 1 CPU, 2 GB of RAM and 50 GB of storage. We are also looking for a 3Node with a public IPv4 address. Go to the ThreeFold Grid Node Finder (Main Net) Find a 3Node with suitable resources for the deployment and take note of its node ID on the leftmost column For proper understanding, we give further information on some relevant columns: refers to the node ID refers to available IPv4 public IP addresses refers to HDD storage refers to SSD storage refers to RAM (memory) refers to virtual cores (vcores) To quicken the process of finding proper 3Nodes, you can narrow down the search by adding filters: At the top left of the screen, in the box, select the parameter(s) you want. For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Nodes. : 50 : 2 : 1 : 2 Note: if you want a public IPv4 address, it is recommended to set the parameter to at least 2 to avoid false positives. This ensures that the shown 3Nodes have viable IP addresses. Once you've found a proper node, take node of its node ID. You will need to use this ID when creating the Terraform files. Set the VMs Create a Two Servers Wireguard VPN with Terraform For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workloads. To facilitate the deployment, only the environment variables file needs to be adjusted. The file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployment based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the as is. On your local computer, create a new folder named and a subfolder called . In the subfolder, store the files and . Modify the variable files to take into account your own seed phras and SSH keys. You should also specifiy the node IDs of the two 3Nodes you will be deploying on. Create the Terraform Files Open the terminal. Go to the home folder Create the folder and the subfolder : Create the file: Copy the content and save the file. In this file, we name the first VM as and the second VM as . For ease of communication, in this guide we call as the master VM and as the worker VM. In this guide, the virtual IP for is 10.1.3.2 and the virtual IP for is 10.1.4.2. This might be different during your own deployment. If so, change the codes in this guide accordingly. Create the file: Copy the content and save the file. Make sure to add your own seed phrase and SSH public key. You will also need to specify the two node IDs of the servers used. Simply replace the three dots by the content. Obviously, you can decide to increase or modify the quantity in the variables , and . Deploy the 3Nodes with Terraform We now deploy the VPN with Terraform. Make sure that you are in the correct folder with the main and variables files. Initialize Terraform: Apply Terraform to deploy the VPN: After deployments, take note of the 3Nodes' IPv4 address. You will need those addresses to SSH into the 3Nodes. Note that, at any moment, if you want to see the information on your Terraform deployments, write the following: SSH into the 3Nodes To SSH into the 3Nodes, write the following while making sure to set the proper IP address for each VM: Preparing the VMs for the Deployment Update and upgrade the system After download, you might need to reboot the system for changes to be fully taken into account Reconnect to the VMs Test the Wireguard Connection We now want to ping the VMs using Wireguard. This will ensure the connection is properly established. First, we set Wireguard with the Terraform output. On your local computer, take the Terraform's output and create a file in the directory . Paste the content provided by the Terraform deployment. You can use to see the Terraform output. The WireGuard output stands in between . Start the WireGuard on your local computer: To stop the wireguard service: > Note: If it doesn't work and you already did a WireGuard connection with the same file from Terraform (from a previous deployment perhaps), do , then . This should set everything properly. As a test, you can ping the virtual IP addresses of both VMs to make sure the Wireguard connection is correct: If you correctly receive the packets for the two VMs, you know that the VPN is properly set. For more information on WireGuard, notably in relation to Windows, please read this documentation. Configure the MariaDB Database Download MariaDB and Configure the Database Download the MariaDB server and client on both the master VM and the worker VM Configure the MariaDB database Do the following changes Add in front of Remove in front of the following lines and replace by for the master VM and by for the worker VM Below the lines shown above add the following line: Restart MariaDB Launch Mariadb Create User with Replication Grant Do the following on both the master and the worker Verify the Access of the User Verify the access of repuser user You want to see in Host Set the VMs to accept the MariaDB Connection TF Template Worker Server Data Write the following in the Worker VM TF Template Master Server Data Write the following in the Master VM Set the MariaDB Databases on Both 3Nodes We now set the MariaDB database. You should choose your own username and password. The password should be the same for the master and worker VMs. On the master VM, write: On the worker VM, write: To see a database, write the following: To see users on MariaDB: To exit MariaDB: Install and Set GlusterFS We will now install and set GlusterFS, a free and open-source software scalable network filesystem. Install GlusterFS on both the master and worker VMs Start the GlusterFS service on both VMs Set the master to worker probe IP on the master VM: See the peer status on the worker VM: Set the master and worker IP address on the master VM: Start Gluster: Check the status on the worker VM: Mount the server with the master IP on the master VM: See if the mount is there on the master VM: Mount the Server with the worker IP on the worker VM: See if the mount is there on the worker VM: We now update the mount with the filse fstab on both master and worker. To prevent the mount from being aborted if the server reboot, write the following on both servers: Add the following line in the file to set the master VM with the master virtual IP (here it is 10.1.3.2): Add the following line in the file to set the worker VM with the worker virtual IP (here it is 10.1.4.2): The databases of both VMs are accessible in . This means that any change in either folder of each VM will be reflected in the same folder of the other VM. In order words, the databases are now synced in real-time. Conclusion You now have two VMs syncing their MariaDB databases. This can be very useful for a plethora of projects requiring redundancy in storage. You should now have a basic understanding of the Threefold Grid, the ThreeFold Explorer, Wireguard, Terraform, MariaDB and GlusterFS. As always, if you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_gpu_support.md",
    "title": "GPU Support",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_gpu_support",
    "content": "Introduction The TFGrid now supports GPUs. We present here a quick example. This section will be expanded as new information comes in. Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_couchdb_synced_databases.md",
    "title": "Synced CouchDB Databases (NoSQL)",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_couchdb_synced_databases",
    "content": "Introduction In this guide, we will demonstrate how to deploy a VPN using WireGuard and create a synced Apache CouchDB database between two virtual machines (VMs) using the built-in replication feature of CouchDB. Any changes made to the database on one VM will be mirrored on the other VM. This setup can be useful for creating redundant and highly available server architectures. CouchDB Apache CouchDB is a NoSQL database that uses JSON for documents, JavaScript for indexing and querying, and HTTP for an API. It is designed for ease of use, scalability, and reliability, offering features like distributed architecture, offline-first capabilities, and built-in replication. CouchDB is Free and Open Source Software (FOSS), released under the Apache License 2.0, making it free to use, modify, and distribute. Replication The CouchDB replication is bidirectional and managed by the CouchDB server itself. The replication request tells CouchDB to synchronize data between the two databases, and CouchDB handles the rest. Main Steps Here’s an overview of the process: 1. Set up Terraform and WireGuard on your local machine. 2. Find two 3Nodes on the ThreeFold Grid with sufficient resources. 3. Deploy and configure the VMs using Terraform. 4. Install and configure CouchDB on both VMs. 5. Verify the replication between the two VMs. Prerequisites Before starting, ensure you have the following installed on your local machine: 1. Terraform: Follow the official Terraform installation guide. 2. WireGuard: Follow the official WireGuard installation guide. 3. SSH Key: Ensure you have an SSH key pair ( and ). If not, generate one: Find Nodes with the ThreeFold Explorer 1. Go to the ThreeFold Grid Node Finder (Main Net). 2. Find two 3Nodes with the following minimum resources: - 1 CPU - 2 GB RAM - 50 GB Storage - Public IPv4 Address 3. Note the Node IDs of the selected nodes for use in the Terraform configuration. Set Up the VMs Create a Two-Server WireGuard VPN with Terraform 1. Create a folder for the Terraform configuration: 2. Create the file: 3. Paste the following Terraform configuration into : 4. Create the file: 5. Paste the following content into : Replace the placeholders with your actual mnemonic, SSH public key, and node IDs. Deploy the 3Nodes with Terraform 1. Initialize Terraform: 2. Apply the Terraform configuration: 3. Confirm the deployment by typing when prompted. 4. After deployment, note the WireGuard configuration and VM IP addresses from the Terraform output. Test the WireGuard Connection 1. On your local machine, create a WireGuard configuration file: 2. Paste the output from Terraform into the file. 3. Start WireGuard: 4. Test the connection by pinging the VMs: SSH into the VMs 1. SSH into each VM using its IP address: Prepare the VMs for Deployment You can upgrade and reboot the system if you want, but it is optional. The updating command is necessary. 1. Update and upgrade the system: 2. Reboot the VMs if necessary: Configure CouchDB Install CouchDB on Both VMs 1. Update the system and install dependencies, add the CouchDB repository, install CouchDB and test the installation: You should see a response like: 5. Start and enable the CouchDB service: Configure CouchDB for Replication 1. On both VMs, edit the CouchDB configuration file: 2. Update the section to bind CouchDB to the WireGuard IP address, make sure to remove the semi-clon () in front of the lines 2. Set the admin with a password 1. Restart CouchDB on both VMs: 2. On both VMs, create a database: 3. Set up replication between the two databases on either one of the VMs. This command sets up continuous replication from the master VM to the worker VM. Verify the Replication 1. On the master VM, add a document to the database: 2. On the worker VM, check if the document is replicated: You should see the document you created on the master VM. Conclusion You now have two VMs with a synced Apache CouchDB database with the built-in CouchDB replication feature. This setup provides redundancy and high availability for your database. If you have any questions, feel free to ask the ThreeFold community on the ThreeFold Forum or the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_capacity_planning.md",
    "title": "Capacity Planning",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_capacity_planning",
    "content": "Introduction In this example we will discuss capacity planning on top of the TFGrid. Example Preparing the Requests Here we define a of requests, each request has a name and filter options e.g , , , , having or not, for this deployment, whether or not this node should be , whether or not this node should be from other nodes in this plannder, to search in, nodes to exlude from search in , and whether or not this node should be . The full docs for the capacity planner are found here And after that in our code we can reference the grid_scheduler object with the request name to be used instead of node_id. For example: > Note: you need to call while specifying the nodes in the network, because the scheduler may assign server1, server2 on the same node. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_advanced_readme.md",
    "title": "Advanced",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme",
    "content": "TABLE OF CONTENTS - Terraform Provider - Terraform Provisioners - Mounts - Capacity Planning - Updates - SSH Connection with Wireguard - Set a Wireguard VPN - Synced MariaDB Databases (SQL) - Synced CouchDB Databases (NoSQL) - Nomad - Nextcloud Deployments - Nextcloud All-in-One Deployment - Nextcloud Single Deployment - Nextcloud Redundant Deployment - Nextcloud 2-Node VPN Deployment",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_vpn.md",
    "title": "Nextcloud 2-Node VPN Deployment",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_vpn",
    "content": "Introduction This guide is a proof-of-concept to show that, using two VMs in a WireGuard VPN, it is possible to, on the first VM, set a Nextcloud AIO instance on the TFGrid, set on it a daily backup and update with Borgbackup, and, on the second VM, set a second daily backup of the first backup. This means that we have 2 virtual machines, one VM with the Nextcloud instance and the Nextcloud backup, and another VM with a backup of the Nextcloud backup. This architecture leads to a higher redundancy level, since we can afford to lose one of the two VMs and still be able to retrieve the Nextcloud database. Note that to achieve this, we are creating a virtual private network (VPN) with WireGuard. This will connect the two VMs and allow for file transfers. While there are many ways to proceed, for this guide we will be using ssh-keygen, Rsync and Cron. Note that, in order to reduce the deployment cost, we set the minimum CPU and memory requirements for the Backup VM. We do not need high CPU and memory for this VM since it is only used for storage. Note that this guide also make use of the ThreeFold gateway. For this reason, this deployment can be set on any two 3Nodes on the TFGrid, i.e. there is no need for IPv4 on the 2 nodes we are deploying on, as long as we set a gateway on a gateway node. This guide also includes a comprehensive recovery section that provides step-by-step instructions for restoring your Nextcloud instance from Borgbackup files in case of deployment failure. With these recovery procedures, you can quickly rebuild your Nextcloud environment with minimal data loss. For now, let's see how to achieve this redundant deployment with Rsync! 2-Node Terraform Deployment For this guide, we are deploying a Nextcloud AIO instance along a Backup VM, enabling daily backups of both VMs. The two VMs are connected by a WireGuard VPN. The deployment will be using the Nextcloud FList available in the tf-images ThreeFold repository. Create the Terraform Files For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workloads. To facilitate the deployment, only the environment variables file needs to be adjusted. The main.tf file contains the environment variables (e.g. var.size for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployment based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the main.tf as is. For this example, we will be deploying the Nextcloud instance with a ThreeFold gateway and a gateway domain. Other configurations are possible. Variables File Copy the following content and save the file under the name : Make sure to add your own seed phrase and SSH public key. Simply replace the three dots by the content. Note that you can deploy on a different node than node 5453 for the vm1 node. If you want to deploy on another node than node 5453 for the gateway node, make sure that you choose a gateway node. To find a gateway node, go on the ThreeFold Dashboard Nodes section of the Explorer and select Gateways (Only). Obviously, you can decide to increase or modify the quantity for the CPU, memory and size variables. Note that we set the minimum CPU and memory parameters for the Backup VM (vm2). This will reduce the cost of the deployment. Since the Backup VM is only used for storage, we don't need to set the CPU and memory higher. Main File Copy the following content and save the file under the name : Deploy the 2-Node VPN We now deploy the 2-node VPN with Terraform. Make sure that you are in the correct folder containing the main and variables files. Initialize Terraform: Apply Terraform to deploy Nextcloud: Note that, at any moment, if you want to see the information on your Terraform deployment, write the following: Nextcloud Setup Access Nextcloud Setup Once you've deployed Nextcloud, you can access the Nextcloud Setup page by pasting on a browser the URL displayed on the line of the output. For more information on this, read this page. Create a backup and set a daily backup and update Make sure to create a backup with as the mount point, and set a daily update and backup for your Nextcloud VM. For more information, read this page. > Note: By default, the daily Borgbackup is set at 4:00 UTC. If you change this parameter, make sure to adjust the moment the Rsync backup is done. Nextcloud VM Prerequisites We need to install a few things on the Nextcloud VM before going further. Update the Nextcloud VM Install ping on the Nextcloud VM if you want to test the VPN connection (Optional) Install Rsync on the Nextcloud VM Install nano on the Nextcloud VM Install Cron on the Nextcloud VM apt install cron Prepare the VMs for the Rsync Daily Backup Test the VPN (Optional) with ping Generate an SSH key pair on the Backup VM Take note of the public key in the Backup VM Add the public key of the Backup VM in the Nextcloud VM > Make sure to put the Backup VM SSH public key before the public key already present in the file authorized_keys of the Nextcloud VM. Create a Cron Job for the Rsync Daily Backup We now set a daily cron job that will make a backup between the Nextcloud VM and the Backup VM using Rsync. Open the crontab on the Backup VM Add the cron job at the end of the file * > Note: By default, the Nextcloud automatic backup is set at 4:00 UTC. For this reason, we set the Rsync daily backup at 8:00 UTC. > Note: To set Rsync with a script, read this documentation. Recovery from Borgbackup If your Nextcloud deployment fails but you have access to your Borgbackup files, you can restore your entire instance following these recovery procedures. 1. Deploy a New Nextcloud Instance First, deploy a new Nextcloud AIO instance following the Terraform deployment steps presented in this guide. Do not start the containers yet. 2. Access Your Backup Files You have two options to access your backup files: - From Primary VM Backup: If your first VM failed but you can still access the backup files in - From Secondary VM Backup: If you have the Rsync backup from your secondary VM 3. Prepare for Restoration You'll need: - The Borg repository (the backup files folder) - The encryption password that was shown in the AIO interface when you created your first backup 4. Restore from the AIO Interface 1. On your new Terraform deployment, access the AIO interface at port 8080 (e.g., ) 2. During the initial setup, select \"Restore former AIO instance from backup\" 3. Enter the encryption password from your old backup 4. Specify the path to the backup folder (without the \"borg\" part), for example: - If your backup is at , enter - If you copied your backup to a new location, provide that path 5. Click \"Submit location and password\" 6. Choose the latest backup from the dropdown and click \"Restore selected backup\" 7. Wait for the restoration process to complete 8. Start the containers through the AIO interface 5. Verification After restoration is complete: 1. Access your Nextcloud instance through your domain 2. Verify that your files, users, and applications are properly restored 3. Check that all services are working correctly 4. Configure a new backup schedule to ensure continued data protection Troubleshooting Recovery If you encounter issues during recovery: - Incorrect Password: Double-check the encryption password is correct (it's case-sensitive) - Backup Path Issues: Ensure the path points to the directory containing the \"borg\" folder, not the \"borg\" folder itself - Permission Problems: If using a copied backup, ensure the permissions are set correctly with and - Database Errors: If you see database errors after restore, try running maintenance commands through the Nextcloud container: By following these steps, you should be able to successfully recover your Nextcloud deployment from your Borgbackup files, ensuring minimal data loss in case of a deployment failure.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_toc.md",
    "title": "Nextcloud Deployments",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc",
    "content": "We present here different Nextcloud deployments. While this section is focused on Nextcloud, those deployment architectures can be used as templates for other kind of deployments on the TFGrid. TABLE OF CONTENTS - Nextcloud All-in-One Deployment - Nextcloud Single Deployment - Nextcloud Redundant Deployment - Nextcloud 2-Node VPN Deployment",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_single.md",
    "title": "Nextcloud Single Deployment",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_single",
    "content": "Introduction In this Threefold Guide, we deploy a Nextcloud instance on a full VM running on the Threefold Grid. We will learn how to deploy a full virtual machine (Ubuntu 22.04) with Terraform. We will install and deploy Nextcloud. We will add a DDNS (dynamic DNS) domain to the Nextcloud deployment. It will then be possible to connect to the Nextcloud instance over public internet. Nextcloud will be available over your computer and even your smart phone! We will also set HTTPS for the DDNS domain in order to make the Nextcloud instance as secure as possible. You are free to explore different DDNS options. In this guide, we will be using DuckDNS for simplicity. As always, if you have questions concerning this guide, you can write a post on the Threefold Forum. Let's go! Main Steps This guide might seem overwhelming, but the steps are carefully explained. Take your time and it will all work out! To get an overview of the whole process, we present the main steps: Download the dependencies Find a 3Node on the TF Grid Deploy and set the VM with Terraform Install PHP and Nextcloud Create a subdomain with DuckDNS Set Apache Access Nextcloud Add HTTPS protection Set a firewall Prerequisites - Install Terraform You need to download and install properly Terraform on your local computer. Simply follow the documentation depending on your operating system (Linux, MAC and Windows). Find a 3Node with the ThreeFold Explorer We first need to decide on which 3Node we will be deploying our workload. We thus start by finding a 3Node with sufficient resources. For this current Nextcloud guide, we will be using 1 CPU, 2 GB of RAM and 50 GB of storage. We are also looking for a 3Node with a public IPv4 address. Go to the ThreeFold Grid Node Finder (Main Net) Find a 3Node with suitable resources for the deployment and take note of its node ID on the leftmost column For proper understanding, we give further information on some relevant columns: refers to the node ID refers to available IPv4 public IP addresses refers to HDD storage refers to SSD storage refers to RAM (memory) refers to virtual cores (vcores) To quicken the process of finding a proper 3Node, you can narrow down the search by adding filters: At the top left of the screen, in the box, select the parameter(s) you want. For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Node. : 50 : 2 : 1 : 2 Note: if you want a public IPv4 address, it is recommended to set the parameter to at least 2 to avoid false positives. This ensures that the shown 3Nodes have viable IP addresses. Once you've found a 3Node, take note of its node ID. You will need to use this ID when creating the Terraform files. Set the Full VM Overview For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workload. To facilitate the deployment, only the environment variables file needs to be adjusted. The file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployment based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the as is. On your local computer, create a new folder named and a subfolder called . In the subfolder, store the files and . Modify the variable files to take into account your own seed phrase and SSH keys. You should also specifiy the node ID of the 3Node you will be deploying on. Create the Terraform Files Open the terminal and follow those steps. Go to the home folder Create the folder and the subfolder : Create the file: Copy the content and save the file. In this file, we name the full VM as . Create the file: Copy the content and save the file. Make sure to add your own seed phrase and SSH public key. You will also need to specify the node ID of the 3Node. Simply replace the three dots by the appropriate content. Obviously, you can decide to set more storage (size). The memory and CPU should be sufficient for the Nextcloud deployment with the above numbers. Deploy the Full VM with Terraform We now deploy the full VM with Terraform. Make sure that you are in the correct folder with the main and variables files. Initialize Terraform: Apply Terraform to deploy the full VM: After deployments, take note of the 3Node's IPv4 address. You will need this address to SSH into the 3Node. SSH into the 3Node To SSH into the 3Node, write the following: Prepare the Full VM Update and upgrade the system After download, reboot the system Reconnect to the VM Create the MariaDB Database Download MariaDB and Configure the Database Download MariaDB's server and client Configure the MariaDB database Do the following changes Add in front of Remove in front of the following lines and make sure the variable is set to Below the lines shown above add the following line: Restart MariaDB Launch MariaDB Set the Nextcloud User and Database We now set the Nextcloud database. You should choose your own username and password. On the full VM, write: To see the databases, write: To see users, write: To exit MariaDB, write: Install PHP and Nextcloud Install PHP and the PHP modules for Nextcloud on both the master and the worker: We will now install Nextcloud. On the full VM, go to the folder : To install the latest Nextcloud version, go to the Nextcloud homepage: See the latest Nextcloud releases. We now download Nextcloud on the full VM. Then, extract the file. This will take a couple of minutes. We use 7z to track progress: Then, we grant permissions to the folder. Create a Subdomain with DuckDNS We want to create a subdomain to access Nextcloud over the public internet. For this guide, we use DuckDNS to create a subdomain for our Nextcloud deployment. Note that this can be done with other services. We use DuckDNS for simplicity. We invite users to explore other methods as they see fit. We create a public subdomain with DuckDNS. To set DuckDNS, you simply need to follow the steps on their website. First, sign in on the website: https://www.duckdns.org/. Then go to https://www.duckdns.org/install.jsp and follow the steps. For this guide, we use as the operating system. Hint: make sure to save the DuckDNS folder in the home menu. Write before creating the folder to be sure. Set Apache We now want to tell Apache where to store the Nextcloud data. To do this, we will create a file called . On full VM, write the following: The file should look like this, with your own subdomain instead of : On the full VM, write the following to set the Nextcloud database with Apache and to enable the new virtual host file: Then, reload and restart Apache: Access Nextcloud on a Web Browser We now access Nextcloud over the public Internet. Go to a web browser and write the subdomain name created with DuckDNS (adjust with your own subdomain): Note: HTTPS isn't yet enabled. If you can't access the website, make sure to enable HTTP websites on your browser. Choose a name and a password. For this guide, we use the following: Enter the Nextcloud Database information created with MariaDB and click install: Nextcloud will then proceed to complete the installation. We use as the database location. You do not need to specifiy MariaDB's port (), as it is already configured within the database. After the installation, you can now access Nextcloud. To provide further security, we want to enable HTTPS for the subdomain. Enable HTTPS Install Certbot We will now enable HTTPS on the full VM. To enable HTTPS, first install with : Install certbot by following the steps here: https://certbot.eff.org/ See if you have the latest version of snap: Remove certbot-auto: Install certbot: Ensure that certbot can be run: Then, install certbot-apache: Set the Certbot with the DNS Domain We now set the certbot with the DNS domain. To add the HTTPS protection, write the following line on the full VM with your own subdomain: Verify HTTPS Automatic Renewal Make a dry run of the certbot renewal to verify that it is correctly set up. You now have HTTPS security on your Nextcloud instance. Set a Firewall Finally, we want to set a firewall to monitor and control incoming and outgoing network traffic. To do so, we will define predetermined security rules. As a firewall, we will be using Uncomplicated Firewall (ufw). It should already be installed on your system. If it is not, install it with the following command: For our security rules, we want to allow SSH, HTTP and HTTPS. We thus add the following rules: Allow SSH (port 22) Allow HTTP (port 80) Allow https (port 443) To enable the firewall, write the following: To see the current security rules, write the following: * You now have enabled the firewall with proper security rules for your Nextcloud deployment. Conclusion If everything went smooth, you should now be able to access Nextcloud over the Internet with HTTPS security from any computer or smart phone! You can now install Nextcloud on your local computer. You will then be able to \"use the desktop clients to keep your files synchronized between your Nextcloud server and your desktop\". You can also do regular backups with Nextcloud to ensure maximum resilience of your data. Check Nextcloud's documentation for more information on this. You should now have a basic understanding of the Threefold Grid, the ThreeFold Explorer, Terraform, MariaDB, PHP and Nextcloud. This Nextcloud deployment could be improved in many ways and other guides might be published in the future with enhanced functionalities. Stay tuned for more Threefold Guides. If you have ideas on how to improve this guide, please let us know. We learn best when sharing knowledge. Acknowledgements and References A big thank you to Scott Yeager for his help on brainstorming, troubleshooting and creating this tutorial. This guide wouldn't have been properly done without his time and dedication. This really is a team effort! This guide has been inspired by Weynand Kuijpers' great tutorial on how to deploy Nextcloud with Terraform. This single Nextcloud instance guide is an adaptation from the Nextcloud Redundant Deployment guide. The inspiration to make a single instance deployment guide comes from RobertL on the ThreeFold Forum. Thanks to everyone who helped shape this guide.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_redundant.md",
    "title": "Nextcloud Redundant Deployment",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_redundant",
    "content": "Introduction In this Threefold Guide, we deploy a redundant Nextcloud instance that is continually synced on two different 3node servers running on the Threefold Grid. We will learn how to deploy two full virtual machines (Ubuntu 22.04) with Terraform. The Terraform deployment will be composed of a virtual private network (VPN) using Wireguard. The two VMs will thus be connected in a private and secure network. Once this is done, we will link the two VMs together by setting up a MariaDB database and using GlusterFS. Then, we will install and deploy Nextcloud. We will add a DDNS (dynamic DNS) domain to the Nextcloud deployment. It will then be possible to connect to the Nextcloud instance over public internet. Nextcloud will be available over your computer and even your smart phone! We will also set HTTPS for the DDNS domain in order to make the Nextcloud instance as secure as possible. You are free to explore different DDNS options. In this guide, we will be using DuckDNS for simplicity. The advantage of this redundant Nextcloud deployment is obvious: if one of the two VMs goes down, the Nextcloud instance will still be accessible, as the other VM will take the lead. Also, the two VMs will be continually synced in real-time. If the master node goes down, the data will be synced to the worker node, and the worker node will become the master node. Once the master VM goes back online, the data will be synced to the master node and the master node will retake the lead as the master node. This kind of real-time backup of the database is not only limited to Nextcloud. You can use the same architecture to deploy different workloads while having the redundancy over two 3node servers. This architecture could be deployed over more than two 3nodes. Feel free to explore and let us know in the Threefold Forum if you come up with exciting and different variations of this kind of deployment. As always, if you have questions concerning this guide, you can write a post on the Threefold Forum. Let's go! Main Steps This guide might seem overwhelming, but the steps are carefully explained. Take your time and it will all work out! To get an overview of the whole process, we present the main steps: Download the dependencies Find two 3nodes on the TF Grid Deploy and set the VMs with Terraform Create a MariaDB database Download and set GlusterFS Install PHP and Nextcloud Create a subdomain with DuckDNS Set Apache Access Nextcloud Add HTTPS protection Set a firewall Prerequisites Install Terraform Install Wireguard You need to download and install properly Terraform and Wireguard on your local computer. Simply follow the documentation depending on your operating system (Linux, MAC and Windows). Find Nodes with the ThreeFold Explorer We first need to decide on which 3Nodes we will be deploying our workload. We thus start by finding two 3Nodes with sufficient resources. For this current Nextcloud guide, we will be using 1 CPU, 2 GB of RAM and 50 GB of storage. We are also looking for 3Nodes with each a public IPv4 address. Go to the ThreeFold Grid Node Finder (Main Net) Find two 3Nodes with suitable resources for the deployment and take note of their node IDs on the leftmost column For proper understanding, we give further information on some relevant columns: refers to the node ID refers to available IPv4 public IP addresses refers to HDD storage refers to SSD storage refers to RAM (memory) refers to virtual cores (vcores) To quicken the process of finding proper 3Nodes, you can narrow down the search by adding filters: At the top left of the screen, in the box, select the parameter(s) you want. For each parameter, a new field will appear where you can enter a minimum number requirement for the 3Nodes. : 50 : 2 : 1 : 2 Note: if you want a public IPv4 address, it is recommended to set the parameter to at least 2 to avoid false positives. This ensures that the shown 3Nodes have viable IP addresses. Once you've found two 3Nodes, take note of their node IDs. You will need to use those IDs when creating the Terraform files. Set the VMs Create a Two Servers Wireguard VPN with Terraform For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workloads. To facilitate the deployment, only the environment variables file needs to be adjusted. The file contains the environment variables (e.g. for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployment based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the as is. On your local computer, create a new folder named and a subfolder called . In the subfolder, store the files and . Modify the variable files to take into account your own seed phrase and SSH keys. You should also specifiy the node IDs of the two 3nodes you will be deploying on. Create the Terraform Files Open the terminal. Go to the home folder Create the folder and the subfolder : Create the file: Copy the content and save the file. In this file, we name the first VM as and the second VM as . In the guide, we call as the master VM and as the worker VM. In this guide, the virtual IP for is 10.1.3.2 and the virtual IP for is 10.1.4.2. This might be different during your own deployment. Change the codes in this guide accordingly. Create the file: Copy the content and save the file. Make sure to add your own seed phrase and SSH public key. You will also need to specify the two node IDs of the servers used. Simply replace the three dots by the content. Obviously, you can decide to set more storage (size). The memory and CPU should be sufficient for the Nextcloud deployment with the above numbers. Deploy the 3nodes with Terraform We now deploy the VPN with Terraform. Make sure that you are in the correct folder with the main and variables files. Initialize Terraform: Apply Terraform to deploy the VPN: After deployments, take note of the 3nodes' IPv4 address. You will need those addresses to SSH into the 3nodes. SSH into the 3nodes To SSH into the 3nodes, write the following: Preparing the VMs for the Deployment Update and upgrade the system After download, reboot the system Reconnect to the VMs Test the Wireguard Connection We now want to ping the VMs using Wireguard. This will ensure the connection is properly established. For more information on WireGuard, notably in relation to Windows, please read this documentation. First, we set Wireguard with the Terraform output. On your local computer, take the Terraform's output and create a file in the directory . Paste the content provided by the Terraform deployment. You can use to see the Terraform output. The Wireguard output stands in between . Start Wireguard on your local computer: To stop the wireguard service: If it doesn't work and you already did a wireguard connection with the same file from Terraform (from a previous deployment perhaps), do , then . This should set everything properly. As a test, you can ping the virtual IP addresses of both VMs to make sure the Wireguard connection is correct: If you correctly receive the packets from the two VMs, you know that the VPN is properly set. Create the MariaDB Database Download MariaDB and Configure the Database Download MariaDB's server and client on both VMs Configure the MariaDB database Do the following changes Add in front of Remove in front of the following lines and replace by on the master VM and by on the worker VM Below the lines shown above add the following line: Restart MariaDB Launch MariaDB Create User with Replication Grant Do the following on both VMs Verify the Access of the User Verify the access of the user You want to see in Host Set the VMs to Accept the MariaDB Connection TF Template Worker Server Data Write the following in the worker VM TF Template Master Server Data Write the following in the master VM Set the Nextcloud User and Database We now set the Nextcloud database. You should choose your own username and password. The password should be the same for the master and worker VMs. On the master VM, write: On the worker VM, write: To see the databases, write: To see users, write: To exit MariaDB, write: Install and Set GlusterFS We will now install and set GlusterFS, a free and open source software scalable network filesystem. Install GlusterFS on both the master and worker VMs Start the GlusterFS service on both VMs Set the master to worker probe IP on the master VM: See the peer status on the worker VM: Set the master and worker IP address on the master VM: Start GlusterFS on the master VM: Check the status on the worker VM: Mount the server with the master IP on the master VM: See if the mount is there on the master VM: Mount the server with the worker IP on the worker VM: See if the mount is there on the worker VM: We now update the mount with the filse fstab on both VMs. To prevent the mount from being aborted if the server reboots, write the following on both servers: Add the following line in the file to set the master VM with the master virtual IP (here it is 10.1.3.2): Add the following line in the file to set the worker VM with the worker virtual IP (here it is 10.1.4.2): Install PHP and Nextcloud Install PHP and the PHP modules for Nextcloud on both the master and the worker: We will now install Nextcloud. This is done only on the master VM. On both the master and worker VMs, go to the folder : To install the latest Nextcloud version, go to the Nextcloud homepage: See the latest Nextcloud releases. We now download Nextcloud on the master VM. You only need to download on the master VM, since you set a peer-to-peer connection, it will also be accessible on the worker VM. Then, extract the file. This will take a couple of minutes. We use 7z to track progress: After the download, see if the Nextcloud file is there on the worker VM: Then, we grant permissions to the folder. Do this on both the master VM and the worker VM. Create a Subdomain with DuckDNS We want to create a subdomain to access Nextcloud over the public internet. For this guide, we use DuckDNS to create a subdomain for our Nextcloud deployment. Note that this can be done with other services. We use DuckDNS for simplicity. We invite users to explore other methods as they see fit. We create a public subdomain with DuckDNS. To set DuckDNS, you simply need to follow the steps on their website. Make sure to do this for both VMs. First, sign in on the website: https://www.duckdns.org/. Then go to https://www.duckdns.org/install.jsp and follow the steps. For this guide, we use as the operating system. Hint: make sure to save the DuckDNS folder in the home menu. Write before creating the folder to be sure. Worker File for DuckDNS In our current scenario, we want to make sure the master VM stays the main IP address for the DuckDNS subdomain as long as the master VM is online. To do so, we add an statement in the worker VM's file. The process is as follow: the worker VM will ping the master VM and if it sees that the master VM is offline, it will run the command to update DuckDNS's subdomain with the worker VM's IP address. When the master VM goes back online, it will run the file within 5 minutes and the DuckDNS's subdomain will be updated with the master VM's IP address. The content of the file for the worker VM is the following. Make sure to replace the line with the line provided by DuckDNS and to replace with the master VM's IP address. Note: When the master VM goes offline, after 5 minutes maximum DuckDNS will change the IP address from the master’s to the worker’s. Without clearing the DNS cache, your browser might have some difficulties connecting to the updated IP address when reaching the URL . Thus you might need to clear your DNS cache. You can also use the Tor browser to connect to Nextcloud. If the IP address changes, you can simply leave the browser and reopen another session as the browser will automatically clear the DNS cache. Set Apache We now want to tell Apache where to store the Nextcloud data. To do this, we will create a file called . On both the master and worker VMs, write the following: The file should look like this, with your own subdomain instead of : On both the master VM and the worker VM, write the following to set the Nextcloud database with Apache and to enable the new virtual host file: Then, reload and restart Apache: Access Nextcloud on a Web Browser with the Subdomain We now access Nextcloud over the public Internet. Go to a web browser and write the subdomain name created with DuckDNS (adjust with your own subdomain): Note: HTTPS isn't yet enabled. If you can't access the website, make sure to enable HTTP websites on your browser. Choose a name and a password. For this guide, we use the following: Enter the Nextcloud Database information created with MariaDB and click install: Nextcloud will then proceed to complete the installation. We use as the database location. You do not need to specifiy MariaDB's port (), as it is already configured within the database. After the installation, you can now access Nextcloud. To provide further security, we want to enable HTTPS for the subdomain. Enable HTTPS Install Certbot We will now enable HTTPS. This needs to be done on the master VM as well as the worker VM. This section can be done simultaneously on the two VMs. But make sure to do the next section on setting the Certbot with only one VM at a time. To enable HTTPS, first install with : Install certbot by following the steps here: https://certbot.eff.org/ See if you have the latest version of snap: Remove certbot-auto: Install certbot: Ensure that certbot can be run: Then, install certbot-apache: Set the Certbot with the DNS Domain To avoid errors, set HTTPS with the master VM and power off the worker VM. To do so with a 3node, you can simply comment the section of the worker VM in the Terraform file and do on the terminal. Put one line above the section, and one line below the section : Put in front of the appropriated lines, as shown below: To add the HTTPS protection, write the following line on the master VM with your own subdomain: Once the HTTPS is set, you can reset the worker VM: To reset the worker VM, simply remove , and on the main file and redo on the terminal. Note: You then need to redo the same process with the worker VM. This time, make sure to set the master VM offline to avoid errors. This means that you should comment the section of instead of . Verify HTTPS Automatic Renewal Make a dry run of the certbot renewal to verify that it is correctly set up. You now have HTTPS security on your Nextcloud instance. Set a Firewall Finally, we want to set a firewall to monitor and control incoming and outgoing network traffic. To do so, we will define predetermined security rules. As a firewall, we will be using Uncomplicated Firewall (ufw). It should already be installed on your system. If it is not, install it with the following command: For our security rules, we want to allow SSH, HTTP and HTTPS. We thus add the following rules: Allow SSH (port 22) Allow HTTP (port 80) Allow https (port 443) To enable the firewall, write the following: To see the current security rules, write the following: * You now have enabled the firewall with proper security rules for your Nextcloud deployment. Conclusion If everything went smooth, you should now be able to access Nextcloud over the Internet with HTTPS security from any computer or smart phone! The Nextcloud database is synced in real-time on two different 3nodes. When one 3node goes offline, the database is still synchronized on the other 3node. Once the powered-off 3node goes back online, the database is synced automatically with the node that was powered off. You can now install Nextcloud on your local computer. You will then be able to \"use the desktop clients to keep your files synchronized between your Nextcloud server and your desktop\". You can also do regular backups with Nextcloud to ensure maximum resilience of your data. Check Nextcloud's documentation for more information on this. You should now have a basic understanding of the Threefold Grid, the ThreeFold Explorer, Wireguard, Terraform, MariaDB, GlusterFS, PHP and Nextcloud. Now, you know how to deploy workloads on the Threefold Grid with an efficient architecture in order to ensure redundancy. This is just the beginning. The Threefold Grid has a somewhat infinite potential when it comes to deployments, workloads, architectures and server projects. Let's see where it goes from here! This Nextcloud deployment could be improved in many ways and other guides might be published in the future with enhanced functionalities. Stay tuned for more Threefold Guides. If you have ideas on how to improve this guide, please let us know. We learn best when sharing knowledge. Acknowledgements and References A big thank you to Scott Yeager for his help on brainstorming, troubleshooting and creating this tutorial. This guide wouldn't have been properly done without his time and dedication. This really is a team effort! The main reference for this guide is this amazing video by NETVN82. Many steps were modified or added to make this suitable with Wireguard and the Threefold Grid. Other configurations are possible. We invite you to explore the possibilities offered by the Threefold Grid! This guide has been inspired by Weynand Kuijpers' great tutorial on how to deploy Nextcloud with Terraform.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_aio.md",
    "title": "Nextcloud All-in-One Deployment",
    "url": "/labs/documentation/system_administrators/terraform_toc/terraform_advanced_readme/terraform_nextcloud_toc/terraform_nextcloud_aio",
    "content": "Introduction We present a quick way to install Nextcloud All-in-One on the TFGrid. This guide is based heavily on the Nextcloud documentation available here. It's mostly a simple adaptation to the TFGrid with some additional information on how to set correctly the firewall and the DNS record for your domain. Deploy a Full VM Deploy a Full VM with the TF Dashboard or Terraform Minimum specs: IPv4 Address 2 vcores 4096 MB of RAM 50 GB of Storage Take note of the VM IP address SSH into the Full VM Set a Firewall We set a firewall to monitor and control incoming and outgoing network traffic. To do so, we will define predetermined security rules. As a firewall, we will be using Uncomplicated Firewall (ufw). It should already be installed on your system. If it is not, install it with the following command: For our security rules, we want to allow SSH, HTTP and HTTPS (443 and 8443). We thus add the following rules: Allow SSH (port 22) Allow HTTP (port 80) Allow https (port 443) Allow port 8443 Allow port 3478 for Nextcloud Talk To enable the firewall, write the following: To see the current security rules, write the following: You now have enabled the firewall with proper security rules for your Nextcloud deployment. Set the DNS Record for Your Domain Go to your domain name registrar (e.g. Namecheap) In the section Advanced DNS, add a DNS A Record to your domain and link it to the IP address of the VM you deployed on: Type: A Record Host: @ Value: VM_IP_Address TTL: Automatic It might take up to 30 minutes to set the DNS properly. To check if the A record has been registered, you can use a common DNS checker: Install Nextcloud All-in-One For the rest of the guide, we follow the steps availabe on the Nextcloud website's tutorial How to Install the Nextcloud All-in-One on Linux. Install Docker Install Nextcloud AIO Reach the AIO interface on your browser: Example: Take note of the Nextcloud password Log in with the given password Add your domain name and click Click * Click You can now easily access Nextcloud AIO with your domain URL! Set BorgBackup On the AIO interface, you can easily set BorgBackup. Since we are using Linux, we use the mounting directory . Make sure to take note of the backup password. Conclusion Most of the information in this guide can be found on the Nextcloud official website. We presented this guide to show another way to deploy Nextcloud on the TFGrid.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_readme.md",
    "title": "Pulumi",
    "url": "/labs/documentation/system_administrators/pulumi_readme",
    "content": "Welcome to the Pulumi Plugin section of the ThreeFold Manual! In this section, we will explore the dynamic world of infrastructure as code (IaC) through the lens of Pulumi, a versatile tool that empowers you to define, deploy, and manage infrastructure using familiar programming languages. TABLE OF CONTENTS - Introduction to Pulumi - Installing Pulumi - Deployment Examples - Deployment Details - Complete Guides",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_intro.md",
    "title": "Introduction to Pulumi",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_intro",
    "content": "With Pulumi, you can express your infrastructure requirements using the languages you know and love, creating a seamless bridge between development and operations. Let's go! Introduction ThreeFold Grid is a decentralized cloud infrastructure platform that provides developers with a secure and scalable way to deploy and manage their applications. It is based on a peer-to-peer network of nodes that are distributed around the world. Pulumi is a cloud-native infrastructure as code (IaC) platform that allows developers to manage their infrastructure using code. It supports a wide range of cloud providers, including ThreeFold Grid. Consult the official Pulumi documentation for more information. The Pulumi plugin for ThreeFold Grid provides developers with a way to deploy and manage their ThreeFold Grid resources using Pulumi. This means that developers can benefit from all of the features and benefits that Pulumi offers, such as cross-cloud support, type safety, preview and diff, and parallel execution -still in the works-. Please note that the Pulumi plugin for ThreeFold Grid is not yet officially published. We look forward to your feedback on this project. Mycelium Network Note that you can use the Mycelium network to connect to your deployments. To do so, make sure that the Mycelium network is properly set up for the deployments. You can consult the different examples that include the Mycelium network to understand this further. Benefits of Using Pulumi Here are some additional benefits of using the Pulumi plugin for ThreeFold Grid: - Increased productivity: Pulumi allows developers to manage their infrastructure using code, which can significantly increase their productivity. - Reduced errors: Pulumi's type safety and preview and diff features can help developers catch errors early, which can reduce the number of errors that occur in production. - Improved collaboration: Pulumi programs can be shared with other developers, which can make it easier to collaborate on infrastructure projects. The Pulumi plugin for ThreeFold Grid is a powerful tool that can be used to deploy and manage a wide range of ThreeFold Grid applications. It is a good choice for developers who want to manage their ThreeFold Grid infrastructure using code and benefit from all of the features and benefits that Pulumi offers. Declarative vs. Imperative Programming Declarative programming and imperative programming are two different ways to write code. Declarative programming focuses on describing the desired outcome, while imperative programming focuses on describing the steps needed to achieve that outcome. In the context of infrastructure as code (IaC), declarative programming allows you to describe your desired infrastructure state, and the IaC tool will figure out how to achieve it. Imperative programming, on the other hand, requires you to describe the steps needed to create and configure your infrastructure. Declaration Programming Example Say I want an infrastructure of two virtual machines with X disks. The following would happen: 1. Connect to the backend services. 2. Send the requests to create the virtual machines. 3. Sign the requests. 4. Execute the requests in a careful order. As you can see, the declarative code is much simpler and easier to read. It also makes it easier to make changes to your infrastructure, as you only need to change the desired state, and the IaC tool will figure out how to achieve it. Benefits of Declarative Programming in IaC There are several benefits to using declarative programming in IaC: - Simpler code: Declarative code is simpler and easier to read than imperative code. This is because declarative code focuses on describing the desired outcome, rather than the steps needed to achieve it. - More concise code: Declarative code is also more concise than imperative code. This is because declarative code does not need to specify the steps needed to achieve the desired outcome. - Easier to make changes: Declarative code makes it easier to make changes to your infrastructure. This is because you only need to change the desired state, and the IaC tool will figure out how to achieve it. - More reliable code: Declarative code is more reliable than imperative code. This is because declarative code does not need to worry about the order in which the steps are executed. The IaC tool will take care of that. We will be taking a look at a couple of examples, I'll be linking the source directory of the example and go through it, but first let's go through some concepts first Concepts Pulumi Project A Pulumi project is any folder that contains a Pulumi.yaml file. When in a subfolder, the closest enclosing folder with a Pulumi.yaml file determines the current project. A new project can be created with pulumi new. A project specifies which runtime to use and determines where to look for the program that should be executed during deployments. Supported runtimes are nodejs, python, dotnet, go, java, and yaml. Project File The Pulumi.yaml project file specifies metadata about your project. The project file must begin with a capitalized P, although either a .yml or .yaml extension will work. A typical Pulumi.yaml file looks like the following: or For more on project or project files, please check the Pulumi documentation. Stacks Every Pulumi program is deployed to a stack. A stack is an isolated, independently configurable instance of a Pulumi program. Stacks are commonly used to denote different phases of development (such as development, staging, and production) or feature branches (such as feature-x-dev). A project can have as many stacks as you need. By default, Pulumi creates a stack for you when you start a new project using the pulumi new command. Resources Resources represent the fundamental units that make up your cloud infrastructure, such as a compute instance, a storage bucket, or a Kubernetes cluster. All infrastructure resources are described by one of two subclasses of the Resource class. These two subclasses are: - CustomResource: A custom resource is a cloud resource managed by a resource provider such as AWS, Microsoft Azure, Google Cloud, or Kubernetes. - ComponentResource: A component resource is a logical grouping of other resources that creates a larger, higher-level abstraction that encapsulates its implementation details. Here's an example: Pulumi Registry You can visit the Pulumi registry to access the ThreeFold package here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_install.md",
    "title": "Installing Pulumi",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_install",
    "content": "Introduction You can install Pulumi on Linux, MAC and Windows. To install Pulumi, simply follow the steps provided in the Pulumi documentation. We cover the basic steps here for convenience. Installation Install on Linux Install on MAC Install on Windows For Linux, if you prefer checking the shell script before executing, please do so. For Windows, note that there are other installation methods. Read the Pulumi documentation for more information. Verification To verify that Pulumi is properly installed on your machine, use the following command: If you need more in-depth information, e.g. installing a specific version or migrating from an older version, please check the installation documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_examples.md",
    "title": "Deployment Examples",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_examples",
    "content": "Introduction Pulumi is an infrastructure as code platform that allows you to use familiar programming languages and tools to build, deploy, and manage cloud infrastructure. We present here the basic steps to test the examples within the ThreeFold Pulumi plugin repository. Once you've set the plugin and exported the necessary variables, the deployment process from one example to another is very similar. Please note that the Pulumi plugin for ThreeFold Grid is not yet officially published. We look forward to your feedback on this project. Check All the Examples In the manual, we cover some basic examples of Pulumi deployments on the grid. You can access all the Pulumi deployment examples on the ThreeFold Pulumi repository here. Prerequisites There are a few things to set up before exploring Pulumi. Since we will be using the examples in the ThreeFold Pulumi repository, we must clone the repository before going further. Install Pulumi on your machine Clone the Pulumi-ThreeFold repository Change directory Set the Environment Variables You can export the environment variables before deploying workloads. Export the network (dev, qa, test, main). Note that we are using the dev network by default. Export your mnemonics. Export the SSH_KEY (public key). Test the Plugin Once you've properly set the prerequisites, you can test many of the examples by simply going into the proper repository and running make run. The different examples that work simply by running make run are the following: virtual_machine kubernetes network zdb gateway_name We give an example with virtual_machine. Go to the directory virtual_machine Deploy the Pulumi workload with make Note: To test gateway_fqdn, you will have to update the fqdn in Pulumi.yaml and create an A record for your domain pointing to the gateway IP. Destroy the Deployment You can destroy your Pulumi deployment at any time with the following make command:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_deployment_details.md",
    "title": "Deployment Details",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_deployment_details",
    "content": "Introduction We present here noteworthy details concerning different types of deployments that are possible with the ThreeFold Pulumi plugin. Please note that the Pulumi plugin for ThreeFold Grid is not yet officially published. We look forward to your feedback on this project. Installation If this isn't already done, install Pulumi on your machine. Essential Workflow State We will be creating a state directory and informing pulumi we want to use that local directory to manage the state, no need to use a cloud backend managed by pulumi or other providers (for the sake of testing). Creating an Empty Stack Bringing up the Infrastructure Here we create an empty stack using and we give it the name then to bring up the infrastructure we execute . > The command shows the plan before agreeing to execute it Destroy the Infrastructure Pulumi Makefile In every example directory, you will find a project file and a to reduce the amount of typing: This means that, to execute, you just need to type and to destroy, you need to type . Creating a Network We address here how to create a network. Pulumi File You can find the original file here. We will now go through this file section by section to properly understand what is happening. Here we set the name for the project. It can be anything. We also set the runtime. It can be some code in yaml, python, go, etc. We then start by initializing the resources. The provider which we loaded in the plugins section is also a resource that has properties (the main one now is just the mnemonic of TFChain). Then, we create a scheduler , that does the planning for us. Instead of being too specific about node IDs, we just give it some generic information. For example, \"I want to work against these data centers (farms)\". As long as the necessary criteria are provided, the scheduler can be more specific in the planning and select the appropriate resources available on the TFGrid. Now, that we created the scheduler, we can go ahead and create the network resource . Please note that the network depends on the scheduler's existence. If we remove it, the scheduler and the network will be created in parallel, that's why we have the section. We then proceed to specify the network resource properties, e.g. the name, the description, which nodes to deploy our network on, the IP range of the network. In our case, we only choose one node. To access information related to our deployment, we set the section outputs. This will display results that we can use, or reuse, while we develop our infrastructure further. Creating a Virtual Machine Now, we will check an example on how to create a virtual machine. Just like we've seen above, we will have two files and where we describe the infrastructure. We have a scheduler, and a network just like before. But now, we also have a deployment object that can have one or more disks and virtual machines. The deployment can be linked to a network using and can have virtual machines in the section, and disks in the section. The disk can be linked and mounted in the VM if is used in the section of the VM. We also specify a couple of essential properties, like how many virtual cores, how much memory, what FList to use, and the environment variables in the section. That's it! You can now execute to bring the infrastructure up. Kubernetes We now see how to deploy a Kubernetes cluster using Pulumi. Now, we define the Kubernetes resource that has master and workers blocks. You define almost everything like a normal VM except for the FLiist. Also note that the token is the . This will ensure that the workers and the master communicate properly. Creating a Domain The ThreeFold Pulumi repository also covers examples on how to work with TFGrid gateways. The basic idea is that you have a virtual machine workload on a specific IP, e.g. public IPv4, IPv6, or Planetary Network, and you want to access it using domains. There are two versions to achieve this, a simple and a fully controlled version. - Simple domain version: - subdomain.gent01.dev.grid.tf - This is a generous service from ThreeFold to reserve a subdomain on a set of defined gateway domains like gent01.dev.grid.tf. - Fully controlled domain version: - e.g. where you manage the domain with the name provider. Example of a Simple Domain Prefix We present here the file for a simple domain prefix. In this example, we create a gateway name resource for the name . Some things to note: - pulumi is the prefix we want to reserve. - It's assuming that the gateway domain we received by scheduler was the one managed by freefarm . - backends: defines a list of IPs to load balance against when a request for is received on the gateway. Example of a Fully Controlled Domain Here's an example of a more complicated, but fully controlled domain. Here, we informed the gateway that any request coming for the domain needs to be balanced through the backends. > Note: You need to create an A record for your domain (here ) pointing to the gateway IP. Conclusion We covered in this guide some basic details concerning the use of the ThreeFold Pulumi plugin.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_yaml.md",
    "title": "Pulumi and YAML",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_yaml",
    "content": "Introduction In this guide, we cover the complete steps to deploy a virtual machine on the grid with Pulumi via a YAML file. To provide a uniform deployment method, we use Docker for this guide. It is optional but will greatly facilitate the deployment as the steps will be similar for Linux, MacOS and Windows. This guide is useful to get you started quickly with Pulumi on the TFGrid. Once you've successfully deployed a VM, you can try all the different YAML examples within the pulumi-threefold repository. The examples are available in the subdirectory . Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain - Get Docker Steps - Deploy a Docker Ubuntu container in interactive mode: - In Docker Ubuntu, deploy a VM with Pulumi. Make sure to add your and below before running the script. For this deployment we use as the . Change this if needed. - You can now SSH into the deployment from your local machine terminal - To destroy the deployment, run the following line within the Docker Ubuntu terminal. Alternative to Make Commands You can use direct Pulumi commands instead of the Make commands above. - You can replace with: - You can replace with: That being said, the Make commands provide additional commands. Feel free to explore the possibilities and consult the files within the repo for more information.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_python.md",
    "title": "Pulumi and Python",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_python",
    "content": "Introduction In this guide, we cover the complete steps to deploy a virtual machine on the grid with Pulumi via Python. To provide a uniform deployment method, we use Docker for this guide. It is optional but will greatly facilitate the deployment as the steps will be similar for Linux, MacOS and Windows. This guide is useful to get you started quickly with Pulumi on the TFGrid. Once you've successfully deployed a VM, you can try all the different Python examples within the pulumi-threefold repository. The examples are available in the subdirectory . Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain - Get Docker Steps - Deploy a Docker Ubuntu container in interactive mode: - In Docker Ubuntu, deploy a VM with Pulumi. Make sure to add your and below before running the script. For this deployment we use as the . Change this if needed. - You can now SSH into the deployment from your local machine terminal - To destroy the deployment, run the following line within the Docker Ubuntu terminal. Alternative to Make Commands You can use direct Pulumi commands instead of the Make commands above. - You can replace with: - You can replace with: That being said, the Make commands run additional features. Feel free to explore the possibilities and consult the files within the repo for more information.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_go.md",
    "title": "Pulumi and Go",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_go",
    "content": "Introduction In this guide, we cover the complete steps to deploy a virtual machine on the grid with Pulumi via Go. To provide a uniform deployment method, we use Docker for this guide. It is optional but will greatly facilitate the deployment as the steps will be similar for Linux, MacOS and Windows. This guide is useful to get you started quickly with Pulumi on the TFGrid. Once you've successfully deployed a VM, you can try all the different Go examples within the pulumi-threefold repository. The examples are available in the subdirectory . Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain - Get Docker Steps - Deploy a Docker Ubuntu container in interactive mode: - In Docker Ubuntu, deploy a VM with Pulumi. Make sure to add your and below before running the script. For this deployment we use as the . Change this if needed. - You can now SSH into the deployment from your local machine terminal - To destroy the deployment, run the following line within the Docker Ubuntu terminal. Alternative to Make Commands You can use direct Pulumi commands instead of the Make commands above. - You can replace with: - You can replace with: That being said, the Make commands run additional features. Feel free to explore the possibilities and consult the files within the repo for more information.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc/pulumi_complete_guides_toc.md",
    "title": "Complete Guides",
    "url": "/labs/documentation/system_administrators/pulumi_readme/pulumi_complete_guides_toc",
    "content": "This section covers complete guides to deploy workloads on the ThreeFold Grid with Pulumi. TABLE OF CONTENTS - Pulumi and YAML - Pulumi and Python - Pulumi and Go",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/packet.md",
    "title": "Packet",
    "url": "/labs/documentation/system_administrators/mycelium_toc/packet",
    "content": "Introduction A is the largest communication object between established . All communication is done via these . The itself consists of a fixed size header, and a variable size body. The body contains a more specific type of data. Packet Header The packet header has a fixed size of 4 bytes, with the following layout: The first byte is used to indicate the version of the protocol. Currently, only version 1 is supported (0x01). The next byte is used to indicate the type of the body. indicates a data packet, while indicates a control packet. The remaining 16 bits are currently reserved, and should be set to all 0.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/overview.md",
    "title": "Overview",
    "url": "/labs/documentation/system_administrators/mycelium_toc/overview",
    "content": "Introduction Mycelium is an end-2-end encrypted IPv6 overlay network written in Rust where each node that joins the overlay network will receive an overlay network IP in the 400::/7 range. The overlay network uses some of the core principles of the Babel routing protocol. Features - Mycelium, is locality aware, it will look for the shortest path between nodes - All traffic between the nodes is end-2-end encrypted - Traffic can be routed over nodes of friends, location aware - If a physical link goes down Mycelium will automatically reroute your traffic - The IP address is IPV6 and linked to private key - A simple reliable messagebus is implemented on top of Mycelium - Mycelium has multiple ways how to communicate quic, tcp, ... and we are working on holepunching for Quick which means P2P traffic without middlemen for NATted networks e.g. most homes - Scalability is very important for us, we tried many overlay networks before and got stuck on all of them, we are trying to design a network which scales to a planetary level - You can run mycelium without TUN and only use it as reliable message bus. Testing We are looking for lots of testers to push the system. Visit the Mycelium repository to contribute.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/mycelium_toc.md",
    "title": "Mycelium",
    "url": "/labs/documentation/system_administrators/mycelium_toc",
    "content": "In this section, we present Mycelium, an end-to-end encrypted IPv6 overlay network. TABLE OF CONTENTS - Overview - Mycelium App - Installation - Additional Information - Message - Packet - Data Packet - API YAML",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/mycelium_app.md",
    "title": "Mycelium App",
    "url": "/labs/documentation/system_administrators/mycelium_toc/mycelium_app",
    "content": "Mycelium App The Mycelium app is available for Android, Windows, macOS and iOS. Download Links You can download the Mycelium app with the following links: - iOS and macOS - Download the app from the App Store - Android - Download the app from the Google Play Store - Windows - Go to the official Mycelium release page and download the latest file (e.g. ) > Note: There is no app for Linux, but you can simply follow the installation guide here. Start Mycelium To start Mycelium, simply open the app and click on . ! Stop or Restart Mycelium To stop or restart Mycelium, click on the appropriate button. ! Add Peers You can add different Mycelium peers in the window. Simply add peers and then either start or restart the app. ! You can consult the Mycelium hosted public nodes to find more peers. For example, if you want to add the node with the IPv4 address with the tcp port , simply add the following line then start or restart the app. Mycelium Address When you use the Mycelium app, you are assigned a unique Mycelium address. To copy the Mycelium address, click on the button on the right of the address. ! Deploy on the Grid with Mycelium Once you've installed Mycelium, you can deploy on the grid and connect to your workload using Mycelium. For more information, read this guide.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/message.md",
    "title": "Message",
    "url": "/labs/documentation/system_administrators/mycelium_toc/message",
    "content": "Introduction The message subsystem can be used to send arbitrary length messages to receivers. A receiver is any other node in the network. It can be identified both by its public key, or an IP address in its announced range. The message subsystem can be interacted with both via the HTTP API, which is documented here, or via the binary. By default, the messages do not interpret the data in any way. When using the binary, the message is slightly modified to include an optional topic at the start of the message. Note that in the HTTP API, all messages are encoded in base64. This might make it difficult to consume these messages without additional tooling. Curl Examples These examples assume you have at least 2 nodes running, and that they are both part of the same network. Send a message on node1, waiting up to 2 minutes for a possible reply: Listen for a message on node2. Note that messages received while nothing is listening are added to a queue for later consumption. Wait for up to 1 minute. The system will (immediately) receive our previously sent message: To send a reply, we can post a message on the reply path, with the received message (still on node2): If you did this fast enough, the initial sender (node1) will now receive the reply. Mycelium Binary Examples As explained above, while using the binary the message is slightly modified to insert the optional topic. As such, when using the binary to send messages, it is suggested to make sure the receiver is also using the binary to listen for messages. The options discussed here are not covering all possibilities, use the flag ( and ) for a full overview. Once again, send a message. This time using a topic (example.topic). Note that there are no constraints on what a valid topic is, other than that it is valid UTF-8, and at most 255 bytes in size. The flag can be used to indicate that we are waiting for a reply. If it is set, we can also use an additional flag to govern exactly how long (in seconds) to wait for. The default is to wait forever. On the second node, listen for messages with this topic. If a different topic is used, the previous message won't be received. If no topic is set, all messages are received. An optional timeout flag can be specified, which indicates how long to wait for. Absence of this flag will cause the binary to wait forever. Again, if the previous command was executed a message will be received immediately: And once again, we can use the ID from this message to reply to the original sender, who might be waiting for this reply (notice we used the hex encoded public key to identify the receiver here, rather than an IP):",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/installation.md",
    "title": "Installation",
    "url": "/labs/documentation/system_administrators/mycelium_toc/installation",
    "content": "Introduction In this section, we cover how to install Mycelium. This guide can be done on a local machine and also on a full VM running on the TFGrid. Currently, Linux, macOS and Windows are supported. On Windows, you must have in the same directory you are executing the binary from. Considerations You might need to run Mycelium as root, enable IPv6 at the OS level and disconnect your VPN. Read the Troubleshooting section for more information. Set Mycelium We show how to set up Mycelium. - Update the system - Download the latest Mycelium release: https://github.com/threefoldtech/mycelium/releases/latest - E.g. for Linux 64-bit x86 processor, download the latest release of the file - Extract Mycelium - Move Mycelium to your path Start Mycelium You can start Mycelium - Start Mycelium - Open another terminal - Check the Mycelium connection information (address and public key) Use Mycelium Once you've set Mycelium, you can use it to ping other addresses and also to connect into VMs running on the TFGrid. - Ping the VM from another machine with IPv6 - SSH into a VM running on the TFGrid Mycelium Service (optional) You can create a systemd service to make sure Mycelium is always enabled and running. - Create a Mycelium service - Set the service and save the file - Enable the service - Verify that the Mycelium service is properly running Systemd will start up the Mycelium, restart it if it ever crashes, and start it up automatically after any reboots.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/information.md",
    "title": "Additional Information",
    "url": "/labs/documentation/system_administrators/mycelium_toc/information",
    "content": "Introduction We provide additional information concerning Mycelium and how to properly use it. Connect to Other Nodes If you want to connect to other nodes, you can specify their listening address as part of the command (combined with the protocol they are listening on, usually TCP); If you are using other tun inferface, e.g. utun3 (default), you can set a different utun inferface Hosted Public Nodes A couple of public nodes are provided, which can be freely connected to. This allows anyone to join the global network. These are hosted in 3 geographic regions, on both IPv4 and IPv6, and supporting both the Tcp and Quic protocols. The nodes are the following: | Node ID | Region | IPv4 | IPv6 | Tcp port | Quic port | Mycelium IP | | --- | --- | --- | --- | --- | --- | --- | | 01 | DE | 188.40.132.242 | 2a01:4f8:221:1e0b::2 | 9651 | 9651 | 54b:83ab:6cb5:7b38:44ae:cd14:53f3:a907 | | 02 | DE | 136.243.47.186 | 2a01:4f8:212:fa6::2 | 9651 | 9651 | 40a:152c:b85b:9646:5b71:d03a:eb27:2462 | | 03 | BE | 185.69.166.7 | 2a02:1802:5e:0:ec4:7aff:fe51:e80d | 9651 | 9651 | 597:a4ef:806:b09:6650:cbbf:1b68:cc94 | | 04 | BE | 185.69.166.8 | 2a02:1802:5e:0:ec4:7aff:fe51:e36b | 9651 | 9651 | 549:8bce:fa45:e001:cbf8:f2e2:2da6:a67c | | 05 | FI | 65.21.231.58 | 2a01:4f9:6a:1dc5::2 | 9651 | 9651 | 410:2778:53bf:6f41:af28:1b60:d7c0:707a | | 06 | FI | 65.109.18.113 | 2a01:4f9:5a:1042::2 | 9651 | 9651 | 488:74ac:8a31:277b:9683:c8e:e14f:79a7 | | 07 | US-EAST | 209.159.146.190 | 2604:a00:50:17b:9e6b:ff:fe1f:e054 | 9651 | 9651 | 4ab:a385:5a4e:ef8f:92e0:1605:7cb6:24b2 | | 08 | US-WEST | 5.78.122.16 | 2a01:4ff:1f0:8859::1 | 9651 | 9651 | 4de:b695:3859:8234:d04c:5de6:8097:c27c | | 09 | SG | 5.223.43.251 | 2a01:4ff:2f0:3621::1 | 9651 | 9651 | 5eb:c711:f9ab:eb24:ff26:e392:a115:1c0e | | 10 | IND | 142.93.217.194 | 2400:6180:100:d0::841:2001 | 9651 | 9651 | 445:465:fe81:1e2b:5420:a029:6b0:9f61 | These nodes are all interconnected, so 2 peers who each connect to a different node (or set of disjoint nodes) will still be able to reach each other. For optimal performance, it is recommended to connect to all of the above at once however. An example connection string could be: It is up to the user to decide which peers he wants to use, over which protocol. Note that quotation may or may not be required, depending on which shell is being used. Default Port By default, the node will listen on port , though this can be overwritten with the flag. Check Network Information You can check your Mycelium network information by running the following line: Where a typical output would be: Test the Network You can easily test that the network works by pinging to anyone in the network. Key Pair The node uses a key pair from which its identity is derived. The private key of this key pair is saved in a local file (32 bytes in binary format). You can specify the path to this file with the flag. By default, the file is saved in the current working directory as . Running without TUN interface It is possible to run the system without creating a TUN interface, by starting with the flag. Obviously, this means that your node won't be able to send or receive L3 traffic. There is no interface to send packets on, and consequently no interface to send received packets out of. From the point of other nodes, your node will simply drop all incoming L3 traffic destined for it. The node will still route traffic as normal. It takes part in routing, exchanges route info, and forwards packets not intended for itself. The node also still allows access to the message subsystem. API The node starts an HTTP API, which by default listens on . A different listening address can be specified on the CLI when starting the system through the flag. The API allows access to send and receive messages, and will later be expanded to allow admin functionality on the system. Note that message are sent using the identity of the node, and a future admin API can be used to change the system behavior. As such, care should be taken that this API is not accessible to unauthorized users. Message System A message system is provided which allows users to send a message, which is essentially just \"some data\" to a remote. Since the system is end-to-end encrypted, a receiver of a message is sure of the authenticity and confidentiality of the content. The system does not interpret the data in any way and handles it as an opaque block of bytes. Messages are sent with a deadline. This means the system continuously tries to send (part of) the message, until it either succeeds, or the deadline expires. This happens similar to the way TCP handles data. Messages are transmitted in chunks, which are embedded in the same data stream used by L3 packets. As such, intermediate nodes can't distinguish between regular L3 and message data. The primary way to interact with the message system is through the API. The message API is documented in here. For some more info about how to use the message system, see the Message section. Inspecting Node Keys Using the subcommand, you can view the address associated with a public key. If no public key is provided, the node will show its own public key. In either case, the derived address is also printed. You can specify the path to the private key with the flag. If the file does not exist, a new private key will be generated. The optional flag can be used to print the information in json format. Where the output could be something like this: Troubleshooting Root Access You might need to run Mycelium as root. Some error messages could be something like: . Enable IPv6 at the OS Level You need to enable IPv6 at the OS level. Some error messages could be something like: . - Check if IPv66 is enabled - If disabled, output is 1, if enabled, output is 0 - Enable IPv6 Here's some commands to troubleshoot IPv6: VPN Can Block Mycelium You might need to disconnect your VPN when using Mycelium. Add Peers It can help to connect to other peers. Check the Mycelium repository for peers.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/data_packet.md",
    "title": "Data Packet",
    "url": "/labs/documentation/system_administrators/mycelium_toc/data_packet",
    "content": "Introduction A contains user specified data. This can be any data, as long as the sender and receiver both understand what it is, without further help. Intermediate hops, which route the data have sufficient information with the header to know where to forward the packet. In practice, the data will be encrypted to avoid eavesdropping by intermediate hops. Packet Header The packet header has a fixed size of 36 bytes, with the following layout: The first 5 bits are reserved and must be set to 0. The next 19 bits are used to specify the length of the body. It is expected that the actual length of a packet does not exceed 256K right now, so the 19th bit is only needed because we have to account for some overhead related to the encryption. The next byte is the hop-limit. Every node decrements this value by 1 before sending the packet. If a node decrements this value to 0, the packet is discarded. The next 16 bytes contain the sender IP address. The final 16 bytes contain the destination IP address. Body Following the header is a variable length body. The protocol does not have any requirements for the body, and the only requirement imposed is that the body is as long as specified in the header length field. It is technically legal according to the protocol to transmit a data packet without a body, i.e. a body length of 0. This is useless however, as there will not be any data to interpret.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/mycelium_toc/api_yaml.md",
    "title": "API YAML",
    "url": "/labs/documentation/system_administrators/mycelium_toc/api_yaml",
    "content": "Introduction We provide an example of a YAML API file. File Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/gpu_toc/gpu_toc.md",
    "title": "GPU",
    "url": "/labs/documentation/system_administrators/gpu_toc",
    "content": "The ThreeFold Manual covers many ways to use a GPU node on the TFGrid. A good place to start would be the GPU Introduction section. Feel free to explore the different possibilities! TABLE OF CONTENTS - GPU Support - Node Finder and GPU - Javascript Client and GPU - GPU and Go - TFCMD and GPU - Terraform and GPU - Full VM and GPU - Zero-OS API and GPU - GPU Farming",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/gpu_toc/gpu.md",
    "title": "GPU Support",
    "url": "/labs/documentation/system_administrators/gpu_toc/gpu",
    "content": "How to Use GPU on the Grid Introduction This guide provides step-by-step instructions for deploying and using GPU resources on the ThreeFold Grid. You'll learn how to rent a dedicated GPU node, deploy a virtual machine, and install the necessary GPU drivers. Prerequisites - Access to the ThreeFold Dashboard - Basic knowledge of SSH and Linux command line - Understanding of your GPU requirements (AMD or NVIDIA) Step 1: Rent a GPU Node Find Available GPU Nodes 1. Navigate to the ThreeFold Dashboard explorer 2. Enable the GPU Node (only) option to filter nodes with GPU capabilities !GPU Node Filter Reserve Your Node 1. Once you've identified a suitable GPU node, navigate to the Dedicated Node page 2. Complete the rental process for your selected node !Node Reservation Step 2: Deploy a Virtual Machine with GPU After successfully renting a GPU node, deploy a virtual machine on your dedicated node using one of the following methods: - ThreeFold Dashboard (recommended for beginners) - TypeScript Client - Terraform - Other supported deployment tools !VM Deployment Step 3: Install GPU Drivers System Preparation 1. SSH into your deployed virtual machine 2. Update your system to ensure compatibility: Identify Your GPU Hardware Before downloading drivers, identify your GPU specifications using either: - ThreeFold Dashboard: Check node details in your dashboard - Command line tools: Download GPU Drivers Download the appropriate driver for your GPU: - AMD GPUs: Visit AMD Support - NVIDIA GPUs: Visit NVIDIA Driver Downloads Use to download the driver package to your VM. AMD GPU Installation 1. Install the downloaded AMD driver package (replace with your specific version): 2. Verify the installation: 3. Expected output should resemble: !AMD GPU Verification 1 !AMD GPU Verification 2 NVIDIA GPU Installation For NVIDIA GPUs, the installation process is more straightforward: 1. Follow the comprehensive guide: NVIDIA Drivers on Ubuntu 20.04 2. Verify the installation using: 3. Expected output: !NVIDIA GPU Verification Alternative: AI Model Installation For users interested in AI workloads, consider trying InvokeAI, which can help with driver installation and provide an AI-ready environment. Troubleshooting Recommended System Configuration Operating System: Ubuntu 22.04.2 LTS (GNU/Linux 5.18.13-051813-generic x86_64) Useful Resources - AMD Driver Installation: Official AMD GPU Install Documentation - Kernel Version Management: - Ubuntu Kernel Management Guide - Alternative Kernel Configuration Next Steps Once your GPU is successfully installed and verified, you can: - Deploy AI/ML workloads - Run GPU-accelerated applications - Explore ThreeFold's GPU-specific documentation for advanced use cases For additional GPU support resources, consult the GPU Table of Contents.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/screenshots.md",
    "title": "Screenshots",
    "url": "/labs/documentation/system_administrators/computer_it_basics/screenshots",
    "content": "Introduction In this section, we show how to easily take screenshots on Linux, MAC and Windows. Linux - Copy to the clipboard a full screenshot - Copy to the clipboard a screenshot of an active window - Copy to the clipboard a screenshot of an active app - Copy to the clipboard a screenshot of a selected area MAC - Save to the desktop a full screenshot - Save to the desktop a screenshot of an active window - Copy to the clipboard a screenshot of an active window - Save to the desktop a screenshot of a selected area - Copy to the clipboard a screenshot of a selected area Windows - Copy to the clipboard a full screenshot - Save to the pictures directory a full screenshot - Copy to the clipboard a screenshot of an active window - Copy to the clipboard a selected area of the screen",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/git_github_basics.md",
    "title": "Git and GitHub Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/git_github_basics",
    "content": "Introduction In this section, we cover basic commands and aspects of GitHub and Git. Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. GitHub is a platform and cloud-based service for software development and version control using Git, allowing developers to store and manage their code. Install Git You can install git on MAC, Windows and Linux. You can consult Git's documentation learn how to install git. Install on Linux Fedora distribution Debian-based distribution Click here for other Linux distributions Install on MAC With Homebrew Install on Windows You can download Git for Windows at this link. Basic Commands Check Git version Clone a repository Clone a single branch Check all available branches Check the current branch Go to another branch Add your changes to a local branch Add all changes Add changes of a specific file Push changes of a local branch to the remote Github branch To push changes to Github, you can use the following commands: Count the differences between two branches Replace branch1 and branch2 with the appropriate branch names. See the default branch Force a push Merge a branch to a different branch Checkout the branch you want to copy content TO Merge the branch you want content FROM Push the changes Clone completely one branch to another branch locally then push the changes to Github For this example, we copy branchB into branchA. See available branches Go to branchA Copy branchB into branchA Force the push The 3 levels of the command reset Bring the History to the Stage/Index Discard last commit Bring the History to the Working Directory Discard last commit and add Bring the History to the Working Directory Discard last commit, add and any changes you made on the codes Note 1: If you're using --hard, make sure to run git status to verify that your directory is clean, otherwise you will lose your uncommitted changes. Note 2: The argument --mixed is the default option, so git reset is equivalent to git reset --mixed. Reverse modifications to a file where changes haven't been staged yet You can use the following to reverse the modifications of a file that hasn't been staged: Download binaries from Github Template: Resolve conflicts between branches We show how to resolve conflicts in a development branch (e.g. branch_dev) and then merging the development branch into the main branch (e.g. branch_main). Clone the repo Pull changes and potential conflicts Checkout the development branch Resolve conflicts in a text editor Save changes in the files Add the changes Commit the changes Push the changes Download all repositories of an organization Log in to gh Clone all repositories. Replace ` with the organization in question. Revert a push commited with git Find the commit ID Revert the commit Push the changes Make a backup of a branch Revert to a backup branch Checkout the branch you want to update (branch) Do a reset of your current branch based on the backup branch Start over local branch and pull remote branch To start over your local branch and pull the remote branch to your working environment, thus ignoring local changes in the branch, you can do the following: Note that this will not work for untracked and new files. See below for untracked and new files. Overwrite local files and pull remote branch This method can be used to overwrite local files. This will work even if you have untracked and new files. Save local changes on a stash Discard local changes Discard untracked and new files Pull the remote branch Then, to delete the stash, you can use git stash drop. Stash command and parameters The stash command is used to record the current state of the working directory. Stash a branch (equivalent to git stash push) List the changes in the stash Inspect the changes in the stash Remove a single stashed state from the stash list and apply it on top of the current working tree state Apply the stash on top of the current working tree state without removing the state from the stash list Drop a stash Code Editors There are many code editors that can work well when working with git. VS-Code VS-Codeis a source-code editor made by Microsoft with the Electron Framework, for Windows, Linux and macOS. To download VS-Code, visit their website and follow the given instructions. VS-Codium VS-Codium is a community-driven, freely-licensed binary distribution of Microsoft’s editor VS Code. There are many ways to install VS-Codium. Visit the official website for more information. Install on MAC Install on Linux Install on Windows * References Git Documentation - https://git-scm.com/docs/user-manual",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/file_transfer.md",
    "title": "File Transfer",
    "url": "/labs/documentation/system_administrators/computer_it_basics/file_transfer",
    "content": "Introduction Deploying on the TFGrid with tools such as the Playground and Terraform is easy and it's also possible to quickly transfer files between local machine and VMs deployed on 3Nodes on the TFGrid. In this section, we cover different ways to transfer files between local and remote machines. SCP File transfer with IPv4 From local to remote, write the following on the local terminal: From remote to local, you can write the following on the local terminal (more secure): scp / @:/// File transfer with IPv6 For IPv6, it is similar to IPv4 but you need to add after scp and add before and after the IPv6 address. Rsync File transfer rsync is a utility for efficiently transferring and synchronizing files between a computer and a storage drive and across networked computers by comparing the modification times and sizes of files. We show here how to transfer files between two computers. Note that at least one of the two computers must be local. This will transfer the content of the source directory into the destination directory. From local to remote From remote to local Here is short description of the parameters used: -a: archive mode, preserving the attributes of the files and directories -v: verbose mode, displaying the progress of the transfer -z: compress mode, compressing the data before transferring --progress tells rsync to print information showing the progress of the transfer --delete tells rsync to delete files that aren't on the sending side Adjust reorganization of files and folders before running rsync rsync-sidekick propagates changes from source directory to destination directory. You can run rsync-sidekick before running rsync. Make sure that Go is installed. Install rsync-sidekick Reorganize the files and folders with rsync-sidekick Transfer and update files and folders with rsync Automate backup with rsync We show how to automate file transfers between two computers using rsync. Create the script file Write the following script with the proper paths. Here the log is saved in the same directory. Give permission Set a cron job to run the script periodically Copy your .sh file to /root: Open the cron file Add the following to run the script everyday. For this example, we set the time at 18:00PM Parameters --checksum and --ignore-times with rsync Depending on your situation, the parameters --checksum or --ignore-times can be quite useful. Note that adding either parameter will slow the transfer. With --ignore time, you ignore both the time and size of each file. This means that you transfer all files from source to destination. With --checksum, you verify with a checksum that the files from source and destination are the same. This means that you transfer all files that have a different checksum compared source to destination. Trailing slashes with rsync rsync does not act the same whether you use or not a slash (\"\\/\") at the end of the source path. Copy content of source_folder into destination_folder to obtain the result: destination_folder/source_folder_content Copy source_folder into destination_folder to obtain the result: destination_folder/source_folder/source_folder_content * SFTP SFTP on the Terminal Using SFTP for file transfer on the terminal is very quick since the SSH connection is already enabled by default when deploying workloads on the TFGrid. If you can use the following command to connect to a VM on the TFGrid: Then, it means you can use SFTP to access the same VM: Once in the server via SFTP, you can use the command line to get all the commands with or : SFTP Basic Commands Here are some common commands for SFTP. | Command | Function | | --------------------------- | ----------------------------------- | | bye | Quit sftp | | cd path | Change remote directory to 'path' | | help | Display this help text | | pwd | Display remote working directory | | lpwd | Print local working directory | | ls [-1afhlnrSt] [path] | Display remote directory listing | | mkdir path | Create remote directory | | put [-afpR] local [remote] | Upload file | | get [-afpR] remote [local] | Download file | | quit | Quit sftp | | rm path | Delete remote file | | rmdir path | Remove remote directory | | version | Show SFTP version | | !command | Execute 'command' in local shell | SFTP File Transfer Using SFTP to transfer a file from the local machine to the remote VM is as simple as the following line: This will transfer the file in the current user home directory of the remote VM. To transfer the file in a given directory, use the following: To transfer a file from the remote VM to the local machine, you can use the command : To transfer ( or ) all the files within a directory, use the argument, as shown in the following example SFTP with FileZilla FileZilla is a free and open-source, cross-platform FTP application, consisting of FileZilla Client and FileZilla Server. It is possible to use FileZilla Client to transfer files between your local machine and a remote VM on the TFGrid. Since SSH is set, the user basically only needs to add the private key in FileZilla and enter the VM credentials to connect using SFTP in FileZilla. Install FileZilla FileZilla is available on Linux, MAC and Windows on the FileZilla website. Simply follow the steps to properly download and install FileZilla Client. Add a Private Key To prepare a connection using FileZilla, you need to add the private key of the SSH key pair. Simply add the file in SFTP. - Open FileZilla Client - Go to Edit -> Settings -> Connection -> SFTP - Then click on Add key file... - Search the file usually located in - Click on OK FileZilla SFTP Connection You can set a connection between your local machine and a remote 3Node with FileZilla by using root as Username and the VM IP address as Host. - Enter the credentials - Host - - Username - - Password - As set by the user. Can be empty. - Port - - Click on Quickconnect You can now transfer files between the local machine and the remote VM with FileZilla. Questions and Feedback If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/docker_basics.md",
    "title": "Docker Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/docker_basics",
    "content": "Introduction We present here a quick introduction to Docker. We cover basic commands, as well as command combinations. Understanding the following should give system administrators confidence when it comes to using Docker efficiently. The following can serve as a quick reference guide when deploying workloads on the ThreeFold Grid and using Docker in general. We invite the readers to consult the official Docker documentation for more information. Basic Commands Install Docker Desktop and Docker Engine You can install Docker Desktop and Docker Engine for Linux, MAC and Windows. Follow the official Docker documentation for the details. Note that the quickest way to install Docker Engine is to use the convenience script: Remove completely Docker To completely remove docker from your machine, you can follow these steps: List the docker packages Purge and autoremove docker Remove the docker files and folders You can also use the command whereis docker to see if any Docker folders and files remain. If so, remove them with List containers List only running containers List all containers (running + stopped) Pull an image To pull an image from Docker Hub: Pull an image Pull an image with the tag Pull all tags of an image Push an image To pull an image to Docker Hub: Push an image Push an image with the tag Push all tags of an image Inspect and pull an image with GHCR Inspect the docker image Pull the docker image See a docker image (no download) If you want to see a docker image without downloading the image itself, you can use Quay's Skopeo tool, a command line utility that performs various operations on container images and image repositories. Make sure to write the proper information for the repository and the image. To install Skopeo, read this documentation. Build a container Use docker build to build a container based on a Dockerfile Build a container based on current directory Dockerfile Build a container and store the image with a given name Template Example Build a docker container without using the cache List all available docker images Run a container To run a container based on an image, use the command docker run. Run an image Run an image in the background (run and detach) Run an image with CLI input You can combine arguments, e.g. docker run -itd. You can also specify the shell, e.g. docker run -it image_name /bin/bash Run a new command in an existing container To run a new command in an existing container, use docker exec. Execute interactive shell on the container Bash shell into container Bash shell into a container Bash shell into a container with root Note: if bash is not available, you can use Pass arguments with a bash script and a Dockerfile You can do the following to pass arguments with a bash script and a Dockerfile. File Copy files from a container to the local computer Delete all the containers, images and volumes To delete all containers: To delete all images: To delete all volumes: To delete all containers, images and volumes: Kill all the Docker processes To kill all processes: Output full logs for all containers The following command output the full logs for all containers in the file containers.log: Resources Usage Examine containers with size Examine disks usage Basic mode Verbose mode Wasted Resources Prune the Docker logs Prune the Docker containers You can use the prune function to delete all stopped containers: Remove unused and untagged local container images The following is useful if you want to clean up local filesystem: Clean up and delete all unused container images Clean up container images based on a given timeframe To clean up container images created X hours ago, you can use the following template (replace X with a number): To clean up container images created before a given date, you can use the following template (replace 2023-01-04T00:00:00` Command Combinations Kill all running containers Stop all running containers Delete all stopped containers Delete all images Update and stop a container in a crash-loop References Docker Manual - https://docs.docker.com/ Code Notary - https://codenotary.com/blog/extremely-useful-docker-commands",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/computer_it_basics.md",
    "title": "Computer and IT Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics",
    "content": "Welcome to the Computer and IT Basics section of the ThreeFold Manual! In this section, tailored specifically for system administrators, we'll delve into fundamental concepts and tools that form the backbone of managing and securing infrastructure. Whether you're a seasoned sysadmin or just starting your journey, these basics are essential for navigating the intricacies of the ThreeFold Grid. TABLE OF CONTENTS - CLI and Scripts Basics - Docker Basics - Git and GitHub Basics - Gitea - Firewall Basics - File Transfer - Screenshots",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/cli_scripts_basics.md",
    "title": "CLI and Scripts Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/cli_scripts_basics",
    "content": "Introduction We present here a quick guide on different command-line interface (CLI) commands as well as some basic scripts. The main goal of this guide is to demonstrate that having some core understanding of CLI and scripts can drastically increase efficiency and speed when it comes to deploying and managing workloads on the TFGrid. Basic Commands Update and upgrade packages The command update ensures that you have access to the latest versions of packages available. The command upgrade downloads and installs the updates for each outdated package and dependency on your system. Test the network connectivity of a domain or an IP address with ping To test the network connectivity of a domain or an IP address, you can use on Linux, MAC and Windows: Template Example On Windows, by default, the command will send 4 packets. On MAC and Linux, it will keep on sending packets, so you will need to press to stop the command from running. You can also set a number of counts with on Linux and MAC and on Windows. Send a given number of packets on Linux and MAC (e.g 5 packets) Send a given number of packets on Windows (e.g 5 packets) Install Go Here are the steps to install Go. Install go Verify that go is properly installed Install Brew Follow those steps to install Brew Installation command from Brew: Add the path to the .profile directory. Replace \\ by your username. Evaluation the following: Verify the installation Brew basic commands To update brew in general: To update a specific package: To install a package: To uninstall a package: To search a package: Uninstall Brew Install Terraform with Brew Installing Terraform with Brew is very simple by following the Terraform documentation. Compile HashiCorp software on Homebrew's infrastructure Install Terraform Yarn basic commands Add a package Initialize the development of a package Install all the dependencies in the package.json file Publish a package to a package manager Remove unused package from the current package Clean the cache Set default terminal See the current path List hidden files Display the content of a directory You can use tree to display the files and organization of a directory: General command View hidden files Vim modes and basic commands Vim is a free and open-source, screen-based text editor program. With Vim, you can use two modes. Insert mode - normal text editor Press i Command mode - commands to the editor Press ESC Here are some basic commands: Delete characters x Undo last command u Undo the whole line U Go to the end of line A Save and exit :wq Discard all changes :q! Move cursor to the start of the line 0 Delete the current word dw Delete the current line dd Check the listening ports using netstat Use the command: See the disk usage of different folders Verify the application version Find the path of a file with only the file name On MAC and Linux, you can use coreutils and realpath from Brew: Become the superuser (su) on Linux You can use either command: Option 1 Option 2 Exit a session You can use either command depending on your shell: Know the current user You can use the following command: See the path of a package To see the path of a package, you can use the following command: Set the path of a package See the current path Find the current shell Compact version Detailed version SSH into Remote Server Create SSH key pair Install openssh-client on the local computer Install openssh-server on the remote computer Copy public key Create the ssh directory on the remote computer Add public key in the file authorized_keys on the remote computer Check openssh-server status SSH into the remote machine \\Note: For MAC, you can install openssh-server and openssh-client with Brew: brew install openssh-server and brew install openssh-client. To enable remote login on a MAC, read this section. Replace a string by another string in a text file Replace one string by another (e.g. old_string, new_string) Use environment variables (double quotes) Replace extensions of files in a folder Replace ext1 and ext2 by the extensions in question. Remove extension of files in a folder Replace ext with the extension in question. See the current date and time on Linux Special variables in Bash Shell | Special Variables | Descriptions | | ---------------- | ----------------------------------------------- | | $0 | Name of the bash script | | $1, $2...$n | Bash script arguments | | $$ | Process id of the current shell | | $ | String containing every command-line argument | | $# | Total number of arguments passed to the script | | $@ | Value of all the arguments passed to the script | | $? | Exit status of the last executed command | | $! | Process id of the last executed command | | $- | Print current set of option in current shell | Gather DNS information of a website You can use Dig to gather DNS information of a website Template Example You can also use online tools such as DNS Checker. Partition and mount a disk We present one of many ways to partition and mount a disk. Create partition with gparted Find the disk you want to mount (e.g. sdb) Create a directory to mount the disk to Open fstab Append the following to the fstab with the proper disk path (e.g. /dev/sdb) and mount point (e.g. /mnt/disk) Mount the disk Add permissions (as needed) Encryption Encrypt files with Gocryptfs You can use gocryptfs to encrypt files. Install gocryptfs Create a vault directory (e.g. vaultdir) and a mount directory (e.g. mountdir) Initiate the vault Mount the mount directory with the vault You can now create files in the folder. For example: The new file test.txt is now encrypted in the vault To unmount the mountedvault folder: Option 1 Option 2 Encrypt files with Veracrypt To encrypt files, you can use Veracrypt. Let's see how to download and install Veracrypt. Veracrypt GUI Download the package Install the package Veracrypt console only Download the package Install the package You can visit Veracrypt download page to get the newest releases. To run Veracrypt Network-related Commands See the network connections and ports ifconfig See identity and info of IP address See abuses related to an IP address: See general information of an IP address: ip basic commands Manage and display the state of all network Display IP Addresses and property information (abbreviation of address) Display and alter the routing table Manage and display multicast IP addresses Show neighbour object Display a list of commands and arguments for each subcommand Add an address Template Example: set IP address to device enp0 Delete an address Template Example: set IP address to device enp0 Alter the status of an interface Template Example 1: Bring interface online (here device em2) Example 2: Bring interface offline (here device em2) Add a multicast address Template Example : set IP address to device em2 Delete a multicast address Template Example: set IP address to device em2 Add a routing table entry Template Example 1: Add a default route (for all addresses) via a local gateway Example 2: Add a route to 192.168.3.0/24 via the gateway at 192.168.3.2 Example 3: Add a route to 192.168.1.0/24 that can be reached on device em1 Delete a routing table entry Template Example: Delete the route for 192.168.1.0/24 via the gateway at 192.168.1.1 Replace, or add, a route Template Example: Replace the defined route for 192.168.1.0/24 to use device em1 Display the route an address will take Template Example: Display the route taken for IP 192.168.18.25 References: https://www.commandlinux.com/man-page/man8/ip.8.html Display socket statistics Show all sockets Show detailed socket information Show timer information Do not resolve address Show process using the socket Note: You can combine parameters, e.g. ss -aeo. References: https://www.commandlinux.com/man-page/man8/ss.8.html Query or control network driver and hardware settings Display ring buffer for a device (e.g. eth0) Display driver information for a device (e.g. eth0) Identify eth0 by sight, e.g. by causing LEDs to blink on the network port Display network and driver statistics for a device (e.g. eth0) References: https://man.archlinux.org/man/ethtool.8.en See if ethernet port is active Replace \\ with the proper device: Add IP address to hardware port (ethernet) Find ethernet port ID on both computers Add IP address (DHCO or static) Computer 1 Computer 2 Ping the address to confirm connection To set and view the address for either DHCP or static, go to Networks then Details. Private IP address range The private IP range is the following: 10.0.0.0–10.255.255.255 172.16.0.0–172.31.255.255 192.168.0.0–192.168.255.255 Set IP Address manually You can use the following template when you set an IP address manually: Address \\ Netmask 255.255.255.0 Gateway optional Basic Scripts Run a script with arguments You can use the following template to add arguments when running a script: Option 1 Option 2 Print all arguments Write a script File: Give permissions Run the script with arguments Iterate over arguments Write the script Give permissions Run the script with arguments The following script is equivalent Count lines in files given as arguments Write the script Give permissions Run the script with arguments (files). Here we use the script itself as an example. Find path of a file Write the script Run the script Print how many arguments are passed in a script Write the script Run the script Linux Install Terraform Here are the steps to install Terraform on Linux based on the Terraform documentation. Note that the Terraform documentation also covers other methods to install Terraform on Linux. MAC Enable remote login on MAC Option 1: Use the following command line: Option 2 Use System Preferences Go to System Preferences -> Sharing -> Enable Remote Login. Find Other storage on MAC Open Finder \\> Go \\> Go to Folder Paste this path Sort files by size and extension on MAC From your desktop, press Command-F. Click This Mac. Click the first dropdown menu field and select Other. From the Search Attributes window tick File Size and File Extension. Windows Install Chocolatey To install Chocolatey on Windows, we follow the official Chocolatey website instructions. Run PowerShell as Administrator Check if Get-ExecutionPolicy is restricted If it is restricted, run the following command: Install Chocolatey Note: You might need to restart PowerShell to use Chocolatey Install Terraform with Chocolatey Once you've installed Chocolatey on Windows, installing Terraform is as simple as can be: Install Terraform with Chocolatey Find the product key Write the following in Command Prompt (run as administrator): Find Windows license type Write the following in Command Prompt: References * GNU Bash Manual - https://www.gnu.org/software/bash/manual/bash.html",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/gitea_toc/gitea_toc.md",
    "title": "Gitea",
    "url": "/labs/documentation/system_administrators/computer_it_basics/gitea_toc",
    "content": "Gitea TABLE OF CONTENTS - Gitea Basics - Gitea API",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/gitea_toc/gitea_basics.md",
    "title": "Gitea Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/gitea_toc/gitea_basics",
    "content": "Introduction We present a basic guide for Gitea, a forge software package for hosting software development version control using Git as well as other collaborative features like bug tracking, code review, continuous integration, kanban boards, tickets, and wikis. ThreeFold hosts its own git server on Gitea OurWorld. We will be using OurWorld's Gitea instance for this guide. Prerequisites You should have git installed on your computer to work easily with Gitea. It is not necessary to use Gitea but recommended to work with files. - Install git - Optional, to update repositories from your local computer - Install VSCodium - Optional, to edit your files - Install OpenSSH - Optional, to use SSH Register - Go to the main gitea URL, e.g. https://git.ourworld.tf - On the top right click on - Set your credentials - Enter a - Enter your - Enter and confirm a - Click on ! Sign In - Go to the main Gitea URL, e.g. https://git.ourworld.tf - On the top right click on - Set your credentials - Enter your or your - Enter your - Click on ! Set an SSH Key Pair - Generate an SSH key pair. You can leave default option - Note the public key - Add the SSH public key on git.ourworld.tf - Click on on the top right - Paste the public key in - The will be added automatically - Click on under ! - Optional: on git.ourworld.tf, verify the key. Make sure to put the proper token. Start the SSH Agent - Start the ssh agent - Add private key to the agent Clone a Repository - Clone a repository and change directory Create and Push a New Branch On the Browser and Git - On the repo of the Gitea instance, click on the ̀ icon (e.g. ) - Write a branch name with the convention - Click ! - Make changes in the files - When changes are done, make a new branch, add the new files, commit and push to the remote server Only With Git - Start by working on the latest development release - Make changes in the files - When changes are done, make a new branch, add the new files, commit and push to the remote server Create a Pull Request - Go to the repo of the Gitea instance - Click on then ! - Choose the branch you want to merge into development for then click - At ThreeFold, we protect the master/main and development branches and always make Pull Request from to ! - On the next page, choose a and a , then click - Usually, we write at least any related issue and a brief description of the work done ! - At any time you can close your own Pull Request ! Create a Draft Pull Request To create a draft pull request, you simply need to add before the title of your pull request. This will set the pull request in Draft mode. - Example of a draft pull request: Useful Commands - See current branch - See all branches locally - See the git status Gitea References There are great Gitea references available online. - Gitea Docs - Gitea Cheat Sheet",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/gitea_toc/gitea_api.md",
    "title": "Gitea API",
    "url": "/labs/documentation/system_administrators/computer_it_basics/gitea_toc/gitea_api",
    "content": "Introduction We show how to use the Gitea API with both Swagger and CLI. Swagger The Gitea API is available with the slugs after your Gitea domain URL. - For ThreeFold, we use the following Gitea API: You can access different levels of the Gitea instance: ! You can use the Swagger for different queries. Parameters are expained for each example so it is a fairly intuitive use. For example, to get the raw content of a file, you can use the following: - Go to the section . - In this example, we query the tfgrid organization and its repository for the branch . We write the path of the file. ! Once you tried a query on the API, you can take the curl command example to query the same information from the CLI. We check this in the next section. CLI To use the API with a command line interface, you can use curl. For example, we take the raw content of a file: We can save this in a file by adding after the line above: Swagger and CLI A combination of the Swagger and the CLI can be very effective. First, find the proper command by using the Gitea Swagger, then use the CLI to pass the commands. API Authorization If you want to query information that is access-protected, such as a private repository, you first need to create a Gitea access token and then log into the Gitea API with the token. Once this is done, every Swagger request you ask will be accompanied with the access token. - Create an access token directly on Gitea - Go to the section of the on Gitea - Under , choose a - Select either ̀ or . For private access, choose the latter - You must select at least one permission to create a token. Click on and choose the permissions for your token - Click on - Copy the generate token and keep it somewhere safe ! - Log in the Gitea API with your access token - On the top of the Gitea API page, click on ! - In write followed by a space and then paste your token, e.g.: - - Once you're logged in with your token, you can make queries with the API References You can learn more by reading the Gitea API documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/firewall_basics/ufw_basics.md",
    "title": "UFW Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/firewall_basics/ufw_basics",
    "content": "Introduction We present a quick introduction to Uncomplicated Firewall (ufw), a free and open-source firewall management tool for Linux operating systems. This guide can be useful for users of the TFGrid deploying on full and micro VMs as well as other types of deployment. Basic Commands We show here basic commands to set a firewall on Linux with Uncomplicated Firewall (ufw). Install ufw Update Install ufw Enable ufw * ufw disable ufw reset ufw reload ufw default deny incoming ufw default allow outgoing ufw allow from ufw allow from to any port ufw allow /tcp ufw allow /udp ufw allow ufw allow ssh ufw allow http ufw allow https ufw allow 3306 ufw allow : ufw allow 6000:6005 ufw allow from ufw allow from to any port ufw deny ufw deny ufw deny from ufw deny in on from ufw status ufw status verbose ufw status numbered ufw delete ufw delete ufw delete allow ssh ufw delete allow 22 ufw app list ufw app info ufw verbose ufw allow \"\" ufw allow \"NGINX Full\" ` References ufw man pages - https://manpages.ubuntu.com/manpages/trusty/man8/ufw.8.html",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/firewall_basics/firewalld_basics.md",
    "title": "Firewalld Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/firewall_basics/firewalld_basics",
    "content": "Introduction We present a quick introduction to firewalld, a free and open-source firewall management tool for Linux operating systems. This guide can be useful for users of the TFGrid deploying on full and micro VMs as well as other types of deployment. Firewalld Basic Commands Install Firewalld See the Status of Firewalld Enable Firewalld Stop Firewalld Start Firewalld Disable Firewalld Mask Firewalld Unmask Firewalld Add a Service to Firewalld Temporary Permanent Remove a Service to Firewalld Temporary Permanent Remove the Diles of a Service to Firewalld See if a Service is Available Reload Firewalld Display the Services and the Open Ports for the Public Zone Display the Open Ports by Services and Port Numbers By services By port numbers Add a Port for tcp Add a Port for udp Add a Port for tcp and udp * References ufw man pages - https://firewalld.org/documentation/man-pages/firewalld.html",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/computer_it_basics/firewall_basics/firewall_basics.md",
    "title": "Firewall Basics",
    "url": "/labs/documentation/system_administrators/computer_it_basics/firewall_basics",
    "content": "In this section, we cover the basic information concerning Firewall uses on Linux, most notably, we give basic commands and information on UFW and Firewalld. TABLE OF CONTENTS - UFW Basics - Firewalld Basics",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/token_transfer_keygenerator.md",
    "title": "Token Transfer Keygenerator",
    "url": "/labs/documentation/system_administrators/advanced/token_transfer_keygenerator",
    "content": "Introduction Using this method, only transfer is possible between accounts that are generated in the same manner and that are yours. Please find the keygen tooling for it below. Prerequisites Keypair - ed25519 keypair - Go installed on your local computer Create a keypair with the following tool: https://github.com/threefoldtech/tfchain_tft/tree/main/tfchain_bridge/tools/keygen Stellar to TFChain Create a Stellar wallet from the key that you generated. Transfer the TFT from your wallet to the bridge address. A deposit fee of 1 TFT will be taken, so make sure you send a larger amount as 1 TFT. Bridge addresses : - On Mainnet: on Stellar Mainnet. - On testnet: on Stellar MAINnet The amount deposited on TF Chain minus 1 TFT will be transferred over the bridge to the TFChain account. Effect will be the following : - Transferred TFTs from Stellar will be sent to a Stellar vault account representing all tokens on TFChain - TFTs will be minted on the TFChain for the transferred amount Alternative Transfer to TF Chain We also enabled deposits to TF Grid objects. Following objects can be deposited to: - Twin - Farm - Node - Entity To deposit to any of these objects, a memo text in format must be passed on the deposit to the bridge wallet. Example: . To deposit to a TF Grid object, this object must exists. If the object is not found on chain, a refund is issued. TFChain to Stellar Create a TFChain account from the key that you generated. (TF Chain raw seed). Browse to : - For mainnet: https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Ftfchain.grid.tf#/accounts - For testnet: https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Ftfchain.test.grid.tf#/accounts - For Devnet: https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Ftfchain.dev.grid.tf#/accounts -\\> Add Account -\\> Click on mnemonic and select -\\> Paste raw TF Chain seed. Select -> Change to . Click and proceed. Choose a name and password and proceed. Browse to the extrinsics , select tftBridgeModule and extrinsic: . Provide your Bridge substrate address and the amount to transfer. Sign using your password. Again, a withdrawfee of 1 TFT will be taken, so make sure you send an amount larger than 1 TFT. The amount withdrawn from TFChain will be sent to your Stellar wallet. Behind the scenes, following will happen: - Transferred TFTs from Stellar will be sent from the Stellar vault account to the user's Stellar account - TFTs will be burned on the TFChain for the transferred amount Example: !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/node_status_bot.md",
    "title": "Node Status Bot",
    "url": "/labs/documentation/system_administrators/advanced/node_status_bot",
    "content": "--- title: \"Node Status Bot\" sidebar_position: 202 --- Introduction We present the Node Status Bot and how to use it. The Node Status Bot is a very helpful tool for farmers of the ThreeFold Grid. It can give you relevant information on your node status, notify you if the node status changes and also provide information on minting violations. You can find the bot source code on GitHub here. Disclaimer Note that the bot is developed and operated on a best effort basis. You are responsible for your nodes' uptime and your farming rewards. Getting Started with the Bot To get started with the bot, simply go to the bot link on Telegram and hit the start button to begin interacting with the bot. You can get the real time status of a node with the status command. For example, this gives the status of node 42 The bot can also send you a message when the status of a node changes. Use the subscribe command (or sub for short) to begin alerts for one or more nodes. Here we are subscribing to nodes 1, 2, and 3: Once you have subscribed you can issue the status command with no input to get the current status of the nodes you are subscribed to: By default, the bot is on main network. To change the network to the dev or test networks, use the network (net) command. Changing the network does not affect any existing subscriptions, and the bot does not specify which network the nodes belong to in its messages. Here's an example to change the network to devnet: You can also check if there are any violations in the current minting period. Like status, this command takes a node id as input or works on the currently subscribed nodes if no input is given: The next section covers in-depth the different commands available. Commands Here is a reference for all supported commands and their different forms: - - Print the start message with all the available commands - - Check the current status of one or all nodes. - This uses a similar method as the Dashboard for determining node status, and update may be delayed by an hour - With no input, a status report will be generated for all subscribed nodes, if any - Examples - Check status of node ID 1 - - Check status of all currently subscribed nodes - - - Scan for farmerbot related violations during the current and previous minting periods - Like status, this works on all subscribed nodes when no input is given - Examples - Check violations of node ID 1 - - Check status of all currently subscribed nodes - - - Subscribe to updates about one or more nodes - You can use the shortcut - If you don't provide an input, the nodes you are currently subscribed to will be shown - Examples - Subscribe to node ID 1 - - Subscribe to node ID 1, 2, 3 - - Check all subscribed nodes - - - Unsubscribe to updates about one or more nodes - You can use the shortcut - Examples - Unsubscribe to node ID 1 - - Unsubscribe to node ID 1, 2, 3 - - Unsubscribe to all currently subscribed nodes - - - Change the network to , , or - Default is - You can use the shortcut - If you don't provide an input, the currently selected network is shown - Examples - Check current network - - Change to another network, e.g. to - Bugs and Features To report bugs and request features, please open an issue on the GitHub repo or contact Scott Yeager on Telegram. Node Status Bot News If you use the bot, please also subscribe to the Node Status Bot News channel on Telegram to receive occasional updates and news concerning the bot.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/minio_helm3.md",
    "title": "MinIO Operator with Helm3",
    "url": "/labs/documentation/system_administrators/advanced/minio_helm3",
    "content": "Introduction We show how to deploy a Kubernetes cluster and set a MinIO Operator with Helm 3. MinIO is a high-performance, S3 compatible object store. It is built for large scale AI/ML, data lake and database workloads. Helm is a package manager for Kubernetes that allows developers and operators to more easily package, configure, and deploy applications and services onto Kubernetes clusters. Prerequisites - TFChain account with TFT - Deploy Kubernetes cluster with one master and one worker (IPv4) - Make sure you can connect via SSH on the terminal Create an SSH Tunnel To access the MinIO Operator, we need to create an SSH tunnel with the port 9090. - Open a terminal and create an SSH tunnel Simply leave this window open and follow the next steps. Set the VM We set the Master VM to access the minIO Operator. - Install the prerequisites: - Install Helm - Install yq Set MinIO We can then set the MinIO Operator. For this step, we mainly follow the MinIO documentation here. - Add the MinIO repo - Validate the MinIO repo content - Install the operator - Verify the operator installation Access the MinIO Operator You can then access the MinIO Operator on your local browser (port 9090) To log in the MinIO Operator, you will need to enter the token. To see the token, run the following line: Enter the token on the login page: ! You then have access to the MinIO Operator: ! Questions and Feedback If you have any questions, feel free to ask for help on the ThreeFold Forum.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/minetest.md",
    "title": "Minetest",
    "url": "/labs/documentation/system_administrators/advanced/minetest",
    "content": "Introduction We show how to deploy a Minetest server on the TFGrid, install Minetest on a local machine and access the Minetest server from the local machine. ! Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain Deploy a Full VM We start by deploying a full VM on the ThreeFold Dashboard. On the Threefold Dashboard, go to the full virtual machine deployment page Deploy a full VM (Ubuntu 22.04) with an IPv4 address and at least the minimum specs for a full VM Network Set IPv4 Address (required) Set Wireguard (optional) Minimum vcores: 1vcore Minimum MB of RAM: 512MB Minimum storage: 15GB After deployment, note the VM IPv4 address SSH into the VM DNS Settings You need to set an A record for the IPv4 address. The following table explicitly shows how to set the A record for your domain. Note that we set as a subdomain. | Type | Host | Value | | ---- | ---- | -------------- | | A | minetest | ipv4_address | You will then be able to access your server on Minetest with the URL . More on the port below. DNS Verification You can use tools such as DNSChecker or dig on a terminal to check if the DNS propagadation is complete. - Check that the subdomain resolves to the IPv4 address of the full VM Run a Minetest Server on the TFGrid - Install the Minetest server - Set the Minetest server - Update the following lines - Run the Minetest server Run Minetest Locally - Update the local machine - Install Minetest - Reboot the machine - Install Minetest - Run Minetest Access the Server from Minetest - On Minetest, go to the server you previously set ! - You can then access the Minetest world! ! Public Server Notes Once you set the Minetest server publicly, you can see it displayed on https://servers.minetest.net/. - Example of publicly available server ! References For further information on Minetest, read the Minetest documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/list_public_ips.md",
    "title": "Listing Free Public IPs",
    "url": "/labs/documentation/system_administrators/advanced/list_public_ips",
    "content": "Introduction Listing public IPs can be done by asking graphQL for all IPs that has Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/hummingbot.md",
    "title": "Hummingbot",
    "url": "/labs/documentation/system_administrators/advanced/hummingbot",
    "content": "Introduction Hummingbot is an open source platform that helps you design, backtest, and deploy fleets of automated crypto trading bots. In this guide, we go through the basic steps to deploy a Hummingbot instance on a full VM running on the TFGrid. Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain Deploy a Full VM We start by deploying a full VM on the ThreeFold Dashboard. On the Threefold Dashboard, go to the full virtual machine deployment page Deploy a full VM (Ubuntu 22.04) with an IPv4 address and at least the minimum specs for Hummingbot IPv4 Address Minimum vcores: 1vcore Minimum MB of RAM: 4096GB Minimum storage: 15GB After deployment, note the VM IPv4 address Connect to the VM via SSH Preparing the VM We prepare the full VM to run Hummingbot. Update the VM Install Docker Setting Hummingbot We clone the Hummingbot repo and start it via Docker. Clone the Hummingbot repository Start Hummingbot Attach to instance You should now see the Hummingbot page. ! References The information to install Hummingbot have been taken directly from their documentation. For any advanced configurations, you may refer to the Hummingbot documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/https_caddy.md",
    "title": "HTTPS with Caddy",
    "url": "/labs/documentation/system_administrators/advanced/https_caddy",
    "content": "Introduction We show how to set HTTPS with Caddy for any deployment on the grid. Prerequisites - A deployment on the TFGrid and SSH access Set HTTPS We set HTTPS with Caddy. - Install Caddy - Set a reverse proxy on port 80 with your own domain You should see in the logs that it successfully obtains an SSL certificate, and after that you can try navigating to your site's domain again to verify it's working. Using a private window or adding specifically might be necessary until your browser drops its cache. When you're satisfied that everything looks good, hit to exit Caddy and we'll proceed to making this persistent. Adjust the Firewall To use Caddy and set HTTPS, we want to allow port 443. If you are using , add the permission for HTTPS: Add the permissions Manage with zinit We manage Caddy with zinit. - Open the file for editing - Insert the following line with your own domain and save the file - Add the new Caddy file to zinit Zinit will start up Caddy immediately, restart it if it ever crashes, and start it up automatically after any reboots. Assuming you tested the Caddy invocation above and used the same form here, that should be all there is to it. Here are some other Zinit commands that could be helpful to troubleshoot issues: - See status of all services (same as \"zinit list\") - Get logs for a service - Restart a service (to test configuration changes, for example) Questions and Feedback If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/grid3_redis.md",
    "title": "Redis",
    "url": "/labs/documentation/system_administrators/advanced/grid3_redis",
    "content": "Introduction Redis is an open-source, in-memory data structure store that is widely used as a caching layer, message broker, and database. It is known for its speed, versatility, and support for a wide range of data structures. Redis is designed to deliver high-performance data access by storing data in memory, which allows for fast read and write operations. It supports various data types, including strings, lists, sets, hashes, and more, and provides a rich set of commands for manipulating and querying the data. Redis is widely used in various use cases, including caching, session management, real-time analytics, leaderboards, task queues, and more. Its simplicity, speed, and flexibility make it a popular choice for developers who need a fast and reliable data store for their applications. In Threefold's ecosystem context, Redis can be used as a backend mechanism to communicate with the nodes on the ThreeFold Grid using the Reliable Message Bus. Install Redis Linux If you don't find Redis in your Linux distro's package manager, check the Redis downloads page for the source code and installation instructions. MacOS On MacOS, Homebrew can be used to install Redis. The steps are as follow: Alternatively, it can be built from source, using the same download page as shown above. Run Redis You can launch the Redis server with the following command:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/contract_bill_report.md",
    "title": "Contract Bills Reports",
    "url": "/labs/documentation/system_administrators/advanced/contract_bill_report",
    "content": "Introduction Now you can check the billing rate of your contracts directly from the tab in the Dashboard. > It takes an hour for the contract to display the billing rate (Until it reaches the first billing cycle). The is displayed in ! Contract Billing Report (GraphQL) - you need to find the contract ID - ask the graphql for the consumption > example query for all contracts And for a specific contract Consumption",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/cloud_console.md",
    "title": "Cloud Console",
    "url": "/labs/documentation/system_administrators/advanced/cloud_console",
    "content": "Introduction Cloud console is a tool to view machine logging and interact with the machine you have deployed. We show the basics of cloud-console and how to access it via a browser during deployment. Overview Cloud console always runs on the machine's private network ip and port number equla to of machine private IP. For example if the machine ip is , this means that is running on . For the cloud-console to run we need to start the cloud-hypervisor with option \"--serial pty\" instead of tty, this allows us to interact with the vm from another process, in our case. Connect to Cloud Console You can easily connect to cloud console on the TFGrid. - Deploy a VM on the TFGrid with the WireGuard network - Set the WireGuard configuration file - Start the WireGuard connection: - Go to your browser with the network router IP to access cloud console. > Note: You might need to create a user/password in the VM first before connecting to cloud-console if the image used does not have a default user.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/cancel_contracts.md",
    "title": "Cancel Contracts",
    "url": "/labs/documentation/system_administrators/advanced/cancel_contracts",
    "content": "Introduction We present different methods to delete contracts on the TFGrid. Using the Dashboard To cancel contracts with the Dashboard, consult the Contracts List documentation. Using GraphQL and Polkadot UI From the QraphQL service execute the following query. replace with your twin id. The information should be available on the Dashboard. Then from polkadot UI, add the tfchain endpoint to development. ! Go to , choose the module and extrinsic and use the IDs from GraphQL to execute the cancelation. ! Using grid3_client_ts In order to use the module, it is essential to first clone our official mono-repo containing the module and then navigate to it. If you are looking for a quick and efficient way to cancel contracts, we offer a code-based solution that can be found here. To make the most of , we highly recommend following our Grid-Client guide for a comprehensive overview of the many advanced capabilities offered by this powerful tool. With features like contract creation, modification, and retrieval, provides an intuitive and easy-to-use solution for managing your contracts effectively.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/advanced.md",
    "title": "Advanced",
    "url": "/labs/documentation/system_administrators/advanced",
    "content": "In this section, we delve into sophisticated topics and powerful functionalities that empower you to harness the full potential of TFGrid 3.0. Whether you're an experienced user seeking to deepen your understanding or a trailblazer venturing into uncharted territories, this manual is your gateway to mastering advanced concepts on the ThreeFold Grid. TABLE OF CONTENTS - Token Transfer Keygenerator - Cancel Contracts - Contract Bills Reports - Listing Free Public IPs - Cloud Console - Redis - IPFS - Hummingbot - AI & ML Workloads - Ecommerce - HTTPS with Caddy - Node Status Bot - Minetest - Remote Desktop and GUI",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/remote-desktop_gui/xrdp_guide.md",
    "title": "XRDP: an Open-Source Remote Desktop Protocol",
    "url": "/labs/documentation/system_administrators/advanced/remote-desktop_gui/xrdp_guide",
    "content": "Introduction In this guide, we learn how to deploy a full virtual machine on a 3node on the Threefold Grid. We access Ubuntu with a desktop environment to offer a graphical user interface (GUI). This guide can be done on a Windows, MAC, or Linux computer. The only difference will be in the Remote Desktop app. The steps are very similar. For more information on deploying a full VM and using SSH remote connection, read this SSH guide. If you are new to the Threefold ecosystem and you want to deploy workloads on the Threefold Grid, read the Get Started section of the Threefold Manual. Server Side: Deploy the Full VM, install a desktop and XRDP Go to the Threefold Dashboard Deploy a full VM (Ubuntu 24.04) With an IPv4 Address After deployment, copy the IPv4 address To SSH into the VM, write in the terminal Once connected, update, upgrade and install the desktop environment Update You can install XCFE, a lightweight desktop environment or Ubuntu Desktop (choose either one) Install XCFE Install Ubuntu Desktop Create a user with root access You should see the newuser directory Give sudo capacity to newuser Update the setuid for root Make newuser accessible by SSH Add the authorized public key and save the file Exit the VM and reconnect with new user Reconnect to the VM terminal with newuser Check XRDP status If not running, run manually (this also makes sure xrdp runs at every restart of the VM) If needed, configure xrdp (optional) Create a session with root-access user Go to home directory of root-access user Create a desktop session For XCFE For Ubuntu desktop Reload the daemon and restart xrdp Set Firewall (Optional) You can set a firewall, but this is optional. Find your local computer IP address On your local computer terminal, write On the VM terminal, install ufw Allow client computer port to the firewall (ufw) Allow SSH connection to your firewall Verify status of the firewall If not active, do the following: Then the ufw status should show changes Client Side: Install Remote Desktop Connection for Windows, MAC or Linux For the client side (the local computer accessing the VM remotely), you can use remote desktop connection for Windows, MAC and Linux. The process is very similar in all three cases. Simply download the app, open it and write the IPv4 address of the VM. You then will need to write the username and password to enter into your VM. Download the App Client side Remote app Windows Remote Desktop Connection app MAC Download in app store Microsoft Remote Desktop Connection app Linux Remmina RDP Client Connect Remotely General process In the Remote app, enter the following: the IPv4 Address of the VM the VM root-access username and password You now have remote desktop connection to your VM Conclusion You now have a remote access to the desktop environment of your VM. If you have any questions, let us know by writing a post on the Threefold Forum.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/remote-desktop_gui/remote-desktop_gui.md",
    "title": "Remote Desktop and GUI",
    "url": "/labs/documentation/system_administrators/advanced/remote-desktop_gui",
    "content": "Remote Desktop and GUI This section of the Threefold Guide provides different methods to access your 3node servers with either a remote desktop protocol or a graphical user interface (GUI). If you have any questions, or if you would like to see a specific guide on remote desktop connection or GUI, please let us know by writing a post on the Threefold Forum. TABLE OF CONTENTS - Cockpit: a Web-based Graphical Interface for Servers - XRDP: an Open-Source Remote Desktop Procol - Apache Guacamole: a Clientless Remote Desktop Gateway.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/remote-desktop_gui/guacamole_guide.md",
    "title": "Apache Guacamole: a Clientless Remote Desktop Gateway",
    "url": "/labs/documentation/system_administrators/advanced/remote-desktop_gui/guacamole_guide",
    "content": "Introduction In this guide, we deploy a full virtual machine (Ubuntu 20.04) on the Threefold Grid with IPv4. We install and run Apache Guacamole and access the VM with remote desktop connection by using xrdp. The Apache Guacamole instance has a two-factor authorization to give further security to the deployment. With Apache Guacamole, a user can access different deployments and command servers remotely, with desktop access. This guide can be done on a Windows, MAC, or Linux computer. For more information on deploying a full VM and using SSH remote connection, read this SSH guide. If you are new to the Threefold ecosystem and you want to deploy workloads on the Threefold Grid, read the Get Started section of the Threefold Manual. Deploy a Full VM and Create a Root-Access User Go to the Threefold Dashboard Deploy a full VM (Ubuntu 20.04) with at least the minimum specs for a desktop environment IPv4 Address Minimum vcores: 2vcores Minimum Gb of RAM: 4Gb Minimum storage: 15Gb After deployment, note the VM IPv4 address Connect to the VM via SSH Once connected, create a new user with root access (for this guide we use \"newuser\") You should now see the new user directory Give sudo capacity to the new user Make the new user accessible by SSH Add authorized public key in the file and save it Exit the VM and reconnect with the new user SSH with Root-Access User, Install Prerequisites and Apache Guacamole SSH into the VM Update and upgrade Ubuntu Download and run Apache Guacamole Access Apache Guacamole and Create Admin-Access User On your local computer, open a browser and write the following URL with the proper IPv4 address On Guacamole, enter the following for both the username and the password Download the TOTP app on your Android or iOS Scan the QR Code Enter the code Next time you log in go to the TOTP app and enter the given code Go to the Guacamole Settings Users Create a new user with all admin privileges Log out of the session Enter with the new admin user Go to Settings Users Delete the default user Apache Guacamole is now installed Download the Desktop Environment and Run xrdp Download a Ubuntu desktop environment on the VM Choose lightdm Run tasksel and choose Download and run xrdp Create an RDP Connection and Access the Server Remotely Create an RDP connection on Guacamole Open Guacamole Go to Settings Click on Connections Click on New Connection Write the following parameters Name: Choose a name for the connection Location: ROOT Protocol: RDP Network Hostname: VM_IPv4_Address Port: 3389 Authentication Username: your root-access username (newuser) Password: your root-access username password (newuser) Security mode: Any Ignore server certificate: Yes Click Save Go to the Apache Guacamole Home menu (top right button) Click on the new connection The remote desktop access is done Feedback and Questions If you have any questions, let us know by writing a post on the Threefold Forum. References Apache Guacamole for Secure Remote Access to your Computers, https://discussion.scottibyte.com/t/apache-guacamole-for-secure-remote-access-to-your-computers/32 MysticRyuujin's guac-install, https://github.com/MysticRyuujin/guac-install",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/remote-desktop_gui/cockpit_guide.md",
    "title": "Cockpit: a Web-based Interface for Servers",
    "url": "/labs/documentation/system_administrators/advanced/remote-desktop_gui/cockpit_guide",
    "content": "Introduction In this Threefold Guide, we show how easy it is to deploy a full VM and access Cockpit, a web-based interface to manage servers. For more information on Cockpit, visit this link. For more information on deploying a full VM and using SSH remote connection, read this SSH guide. If you are new to the Threefold ecosystem and you want to deploy workloads on the Threefold Grid, read the Get Started section of the Threefold Manual. Note that the two sections Change the Network System Daemon and Set a Firewall are optional. That being said, they provide more features and security to the deployment. Deploy a Full VM and Create a Root-Access User To start, you must deploy and SSH into a full VM. Go to the Threefold dashboard Deploy a full VM (e.g. Ubuntu 22.04) With an IPv4 Address After deployment, copy the IPv4 address Connect into the VM via SSH Create a new user with root access Here we use as an example To see the directory of the new user Give sudo capacity to the new user Make the new user accessible by SSH add the authorized public key in the file, then save and quit Exit the VM and reconnect with the new user Set the VM and Install Cockpit Update and upgrade the VM Install Cockpit Change the Network System Daemon We now change the system daemon that manages network configurations. We will be using NetworkManager instead of networkd. This will give us further possibilities on Cockpit. Install NetworkManager. Note that it might already be installed. Update the file Go to netplan's directory Search for the proper file name Update the file Add the following lines under Note that these two lines should be aligned with Remove at the bottom of the file Save and exit the file Disable networkd and enable NetworkManager Apply netplan to set NetworkManager Reboot the system to load the new kernel and to properly set NetworkManager Reconnect to the VM Set a Firewall We now set a firewall. We note that ufw is not compatible with Cockpit and for this reason, we will be using firewalld. Install firewalld Add Cockpit to firewalld See if Cockpit is available See the status of firewalld Access Cockpit On your web browser, write the following URL with the proper VM IPv4 address Enter the username and password of the root-access user You might need to grant administrative access to the user On the top right of the Cockpit window, click on * Enter the root-access user password then click Conclusion You now have access to a web-based graphical interface to manage your VM. You can read Cockpit's documentation to explore further this interface. Acknowledgements and References A big thank you to Drew Smith for his advice on using NetworkManager instead of networkd with Cockpit.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ipfs_toc/ipfs_toc.md",
    "title": "IPFS",
    "url": "/labs/documentation/system_administrators/advanced/ipfs_toc",
    "content": "TABLE OF CONTENTS - IPFS on a Full VM - IPFS on a Micro VM",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ipfs_toc/ipfs_microvm.md",
    "title": "IPFS on a Micro VM",
    "url": "/labs/documentation/system_administrators/advanced/ipfs_toc/ipfs_microvm",
    "content": "Introduction In this ThreeFold guide, we explore how to set an IPFS node on a micro VM using the ThreeFold Playground. Deploy a Micro VM We start by deploying a micro VM on the ThreeFold Playground. Go to the Threefold Playground Deploy a micro VM (Ubuntu 22.04) with an IPv4 address IPv4 Address Minimum vcores: 1vcore Minimum MB of RAM: 1024MB Minimum storage: 50GB After deployment, note the VM IPv4 address Connect to the VM via SSH Install the Prerequisites We install the prerequisites before installing and setting IPFS. Update Ubuntu Install nano and ufw Set a Firewall We set a firewall to monitor and control incoming and outgoing network traffic. To do so, we will define predetermined security rules. As a firewall, we will be using Uncomplicated Firewall (ufw). For our security rules, we want to allow SSH, HTTP and HTTPS (443 and 8443). We thus add the following rules: Allow SSH (port 22) Allow port 4001 To enable the firewall, write the following: To see the current security rules, write the following: You have enabled the firewall with proper security rules for your IPFS deployment. Additional Ports We provided the basic firewall ports for your IPFS instance. There are other more advanced configurations possible. If you want to access your IPFS node remotely, you can allow port 5001. This will allow anyone to access your IPFS node. Make sure that you know what you are doing if you go this route. You should, for example, restrict which external IP address can access port 5001. If you want to run your deployment as a gateway node, you should allow port 8080. Read the IPFS documentation for more information on this. If you want to run pubsub capabilities, you need to allow port 8081. For more information, read the IPFS documentation. Install IPFS We install the IPFS Kubo binary. Download the binary Unzip the file Change directory Run the install script Verify that IPFS Kubo is properly installed Set IPFS We initialize IPFS and run the IPFS daemon. Initialize IPFS Increase the storage capacity (optional) Run the IPFS daemon Set IPFS with zinit We set the IPFS daemon with zinit. This will make sure that the IPFS daemon starts at each VM reboot or if it stops functioning momentarily. Create the yaml file Set the execution command Run the IPFS daemon with the zinit monitor command Verify that the IPFS daemon is running Final Verification We reboot and reconnect to the VM and verify that IPFS is properly running as a final verification. Reboot the VM Reconnect to the VM and verify that the IPFS daemon is running * Questions and Feedback If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ipfs_toc/ipfs_fullvm.md",
    "title": "IPFS on a Full VM",
    "url": "/labs/documentation/system_administrators/advanced/ipfs_toc/ipfs_fullvm",
    "content": "Introduction In this ThreeFold guide, we explore how to set an IPFS node on a Full VM using the ThreeFold Playground. Deploy a Full VM We start by deploying a full VM on the ThreeFold Playground. Go to the Threefold Playground Deploy a full VM (Ubuntu 20.04) with an IPv4 address and at least the minimum specs IPv4 Address Minimum vcores: 1vcore Minimum MB of RAM: 1024GB Minimum storage: 50GB After deployment, note the VM IPv4 address Connect to the VM via SSH Create a Root-Access User We create a root-access user. Note that this step is optional. Once connected, create a new user with root access (for this guide we use \"newuser\") You should now see the new user directory Give sudo capacity to the new user Switch to the new user Create a directory to store the public key Give read, write and execute permissions for the directory to the new user Add the SSH public key in the file authorized_keys and save it Exit the VM Reconnect with the new user Set a Firewall We set a firewall to monitor and control incoming and outgoing network traffic. To do so, we will define predetermined security rules. As a firewall, we will be using Uncomplicated Firewall (ufw). For our security rules, we want to allow SSH, HTTP and HTTPS (443 and 8443). We thus add the following rules: Allow SSH (port 22) Allow port 4001 To enable the firewall, write the following: To see the current security rules, write the following: You now have enabled the firewall with proper security rules for your IPFS deployment. Additional Ports We provided the basic firewall ports for your IPFS instance. There are other more advanced configurations possible. If you want to access your IPFS node remotely, you can allow port 5001. This will allow anyone to access your IPFS node. Make sure that you know what you are doing if you go this route. You should, for example, restrict which external IP address can access port 5001. If you want to run your deployment as a gateway node, you should allow port 8080. Read the IPFS documentation for more information on this. If you want to run pubsub capabilities, you need to allow port 8081. For more information, read the IPFS documentation. Install IPFS We install the IPFS Kubo binary. Download the binary Unzip the file Change directory Run the install script Verify that IPFS Kubo is properly installed Set IPFS We initialize IPFS and run the IPFS daemon. Initialize IPFS Increase the storage capacity (optional) Run the IPFS daemon Set an Ubuntu systemd service to keep the IPFS daemon running after exiting the VM Enter the systemd info Enable the service Verify that the IPFS daemon is properly running Final Verification We reboot and reconnect to the VM and verify that IPFS is properly running as a final verification. Reboot the VM Reconnect to the VM Check that the IPFS daemon is running * Questions and Feedback If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ecommerce/woocommerce.md",
    "title": "WooCommerce",
    "url": "/labs/documentation/system_administrators/advanced/ecommerce/woocommerce",
    "content": "Introduction We show how to deploy a free and open-source ecommerce on the ThreeFold Grid. We will be deploying on a micro VM with an IPv4 address. WooCommerce is the open-source ecommerce platform for WordPress. The platform is free, flexible, and amplified by a global community. The freedom of open-source means you retain full ownership of your store’s content and data forever. Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain Deploy Wordpress We start by deploying Wordpress on the ThreeFold Dashboard. On the Threefold Dashboard, go to the Wordpress deloyment page Deploy a Wordpress with an IPv4 address and sufficient resources to run Wordpress IPv4 Address Minimum vcores: 2vcore Minimum MB of RAM: 4GB Minimum storage: 50GB After deployment, note the VM IPv4 address Set a DNS Record Go to your domain name registrar In the section Advanced DNS, add a DNS A Record to your domain and link it to the IP address of the VM you deployed on: Type: A Record Host: @ Value: \"IPv4_Address\" TTL: Automatic It might take up to 30 minutes to set the DNS properly. To check if the A record has been registered, you can use a common DNS checker: HTTPS with Caddy We set HTTPS with Caddy. - Install Caddy - Set a reverse proxy on port 80 with your own domain You should see in the logs that it successfully obtains an SSL certificate, and after that you can try navigating to your site's domain again to verify it's working. Using a private window or adding specifically might be necessary until your browser drops its cache. When you're satisfied that everything looks good, hit to exit Caddy and we'll proceed to making this persistent. Adjust the Firewall By default, ufw is set on Wordpress application from the Dashboard. To use Caddy and set HTTPS, we want to allow port 443. Add the permissions Manage with zinit We manage Caddy with zinit. - Open the file for editing - Insert the following line with your own domain and save the file - Add the new Caddy file to zinit Zinit will start up Caddy immediately, restart it if it ever crashes, and start it up automatically after any reboots. Assuming you tested the Caddy invocation above and used the same form here, that should be all there is to it. Here are some other Zinit commands that could be helpful to troubleshoot issues: - See status of all services (same as \"zinit list\") - Get logs for a service - Restart a service (to test configuration changes, for example) Access Admin Panel You can access the admin panel by clicking on under on the Dashboard. You can also use the following template on a browser with your own domain: If you've forgotten your credentials, just open the Wordpress info window on the Dashboard. Install WooCommerce On the Wordpress admin panel, go to and search for WooCommerce. ! Once this is done, you can open WooCommerce on the left-side menu. ! You can then set your store and start your online business! ! Troubleshooting You might need to deactivate some plugins that aren't compatible with WooCommerce, such as . References Make sure to read the Wordpress and Woocommerce documentation to set your ecommerce. Questions and Feedback If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ecommerce/nopcommerce.md",
    "title": "nopCommerce",
    "url": "/labs/documentation/system_administrators/advanced/ecommerce/nopcommerce",
    "content": "Introduction We show how to deploy a free and open-source ecommerce on the ThreeFold Grid. We will be deploying on a full VM with an IPv4 address. nopCommerce is an open-source ecommerce platform based on Microsoft's ASP.NET Core framework and MS SQL Server 2012 (or higher) backend Database. Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain Deploy a Full VM We start by deploying a full VM on the ThreeFold Dashboard. On the Threefold Dashboard, go to the full virtual machine deployment page Deploy a full VM (Ubuntu 22.04) with an IPv4 address and at least the minimum specs shown below IPv4 Address Minimum vcores: 2 vcores Minimum GB of RAM: 4 GB Minimum storage: 50 GB After deployment, note the VM IPv4 address Create an SSH Tunnel We create an SSH tunnel with port 5432:80, as it is this combination that we will set for nopCommerce on the docker-compose file. - Open a terminal and create an SSH tunnel Simply leave this window open and follow the next steps. Preparing the VM We prepare the full to run nopCommerce. Connect to the VM via SSH Update the VM Install Docker Install docker-compose Set a Firewall You can set a firewall to your VM for further security. This should be used in production mode. Add the permissions Enable the firewall Verify the fire wall status Download nopCommerce Clone the repository Build the image Run the image Access nopCommerce You can access the nopCommerce interface on a browser with port 5432 via the SSH tunnel: ! For more information on how to use nopCommerce, refer to the nopCommerce docs. Install nopCommerce You will need to set your ecommerce store and database information. - Enter an email for your website (e.g. ) - For the database, choose PostgreSQL and check both options and . Enter the following information (as per the docker-compose information) - Note: For production, you will need to set your own username and password. Access the Ecommerce from the Public Internet Set a DNS Record Go to your domain name registrar In the section Advanced DNS, add a DNS A Record to your domain and link it to the IP address of the VM you deployed on: Type: A Record Host: @ Value: \"IPv4_Address\" TTL: Automatic It might take up to 30 minutes to set the DNS properly. To check if the A record has been registered, you can use a common DNS checker: * Access the Ecommerce You can now go on a web browser and access your website via your domain, e.g. . ! HTTPS with Caddy We set HTTPS with Caddy. - Install Caddy - Set a reverse proxy on port 80 with your own domain You should see in the logs that it successfully obtains an SSL certificate, and after that you can try navigating to your site's domain again to verify it's working. Using a private window or adding specifically might be necessary until your browser drops its cache. ! When you're satisfied that everything looks good, hit to exit Caddy and we'll proceed to making this persistent. Manage with Systemd We create a systemd service to always run the reverse proxy for port 80. - Create a caddy service - Set the service with your own domain - Enable the service - Verify that the Caddy service is properly running Systemd will start up Caddy immediately, restart it if it ever crashes, and start it up automatically after any reboots. Access Admin Panel You can access the admin panel by clicking on and providing the admin username and password set during the nopCommerce installation. ! In , you can set the HTTPS address of your domain and enable SSL. You will need to properly configure your ecommerce instance for your own needs and products. Read the nopCommerce docs for more information. Manage nopCommerce with Systemd We create a systemd service to always run the nopCommerce docker-compose file. - Create a nopcommerce service - Set the service with your own domain - Enable the service - Verify that the Caddy service is properly running Systemd will start up the nopCommerce docker-compose file, restart it if it ever crashes, and start it up automatically after any reboots. References For further information on how to set nopCommerce, read the nopCommerce documentation. Questions and Feedback If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ecommerce/ecommerce.md",
    "title": "Ecommerce",
    "url": "/labs/documentation/system_administrators/advanced/ecommerce",
    "content": "You can easily deploy a free and open-source ecommerce on the TFGrid. We present here two of the most popular options. TABLE OF CONTENTS - WooCommerce - nopCommerce",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ai_ml_workloads_toc/gpu_and_pytorch.md",
    "title": "GPU and Pytorch",
    "url": "/labs/documentation/system_administrators/advanced/ai_ml_workloads_toc/gpu_and_pytorch",
    "content": "Introduction We present a basic method to deploy artificial intelligence (AI) and machine learning (ML) on the TFGrid. For this, we make use of dedicated nodes and GPU support. In the first part, we show the steps to install the Nvidia driver of a GPU card on a full VM Ubuntu 22.04 running on the TFGrid. In the second part, we show how to use PyTorch to run AI/ML tasks. Prerequisites You need to reserve a dedicated GPU node on the ThreeFold Grid. Prepare the System - Update the system - Check the GPU info Install the GPU Driver - Download the latest Nvidia driver - Check which driver is recommended - Install the recommended driver (e.g. with 535) - Reboot and reconnect to the VM - Check the GPU status Now that the GPU node is set, let's work on setting PyTorch to run AI/ML workloads. Set a Python Virtual Environment Before installing Python package with pip, you should create a virtual environment. - Install the prerequisites - Create a virtual environment Install PyTorch and Test Cuda Once you've created and activated a virtual environment for Pyhton, you can install different Python packages. - Install PyTorch and upgrade Numpy Before going further, you can check if Cuda is properly installed on your machine. - Check that Cuda is available on Python with PyTorch by using the following lines: Set and Access Jupyter Notebook You can run Jupyter Notebook on the remote VM and access it on your local browser. - Install Jupyter Notebook - Run Jupyter Notebook in no-browser mode and take note of the URL and the token - On your local machine, copy and paste on a browser the given URL but make sure to change with the WireGuard IP (here it is ) and to set the correct token. Run AI/ML Workloads After following the steps above, you should now be able to run Python codes that will make use of your GPU node to compute AI and ML workloads. Feel free to explore different ways to use this feature. For example, the HuggingFace course on natural language processing is a good introduction to machine learning.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ai_ml_workloads_toc/gpu_and_fooocus.md",
    "title": "GPU and Fooocus",
    "url": "/labs/documentation/system_administrators/advanced/ai_ml_workloads_toc/gpu_and_fooocus",
    "content": "Introduction We show how to use a ThreeFold GPU node on the grid to deploy AI workloads for graphics and image generation. We will be using Fooocus and a full virtual machine with a GPU card. Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain - Reserve a dedicated GPU node on the ThreeFold Grid - Deploy a full VM running Ubuntu 22.04 - SSH into the node with Wireguard Prepare the System - Update the system - Check the GPU info Install the GPU Driver - Download the latest Nvidia driver - Check which driver is recommended - Install the recommended driver (e.g. with 535) - Check the GPU status Now that the GPU node is set, let's install and launch Fooocus. Install the Prerequisites and Launch Fooocus We install the prerequisites, including Miniconda, clone the repository, download the models and launch Fooocus. - Install the prerequisites - Reload the shell to enable Conda - Clone the Fooocus directory and install the Python requirements with Miniconda - Download the models with conda and deploy Fooocus - Create an SSH tunnel to the VM Use Fooocus You can then access Fooocus: Here are some image generated with Fooocus: ! ! ! !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ai_ml_workloads_toc/cpu_and_llama.md",
    "title": "CPU and Llama",
    "url": "/labs/documentation/system_administrators/advanced/ai_ml_workloads_toc/cpu_and_llama",
    "content": "Introduction We present a simple guide on how to deploy large language models on the grid using CPU. For this guide, we will be deploying Llama on a full VM using OpenWebUI bundled with Ollama support. Llama is a large language model trained by Meta AI. It is an open-source model, meaning that it is free to use and customize for various applications. This LLM is designed to be a more conversational AI allowing users to engage in natural-sounding conversations. Llama is trained on a massive dataset of text from the internet and can generate responses to a wide range of topics and questions. Ollama is an open-source project that allows users to run large language models (LLMs) on their local machine. OpenWebUI is one of many front ends for Ollama, providing a convenient and user friendly way to load weights and chat with the bot. Prerequisites - A TFChain account - TFT in your TFChain account - Buy TFT - Send TFT to TFChain Deploy a Full VM We start by deploying a full VM on the ThreeFold Dashboard. The more cores we set to the machine, the faster the model will be. On the Threefold Dashboard, go to the full virtual machine deployment page Deploy a full VM (Ubuntu 22.04) with only as the network Vcores: 8 vcores MB of RAM: 4096 GB GB of storage: 100 GB After deployment, set the Wireguard configurations Connect to the VM via SSH Preparing the VM We prepare the full VM to run Llama. Install Docker Setting OpenWebUI We now install OpenWebUI with bundled Ollama support. Note that you might need to use another port than if this port is already in use on your local machine. For CPU only Once the container is fully loaded and running, go to your browser to access OpenWebUI using the Wireguard address: * You should now see the OpenWebUI page. You can register by entering your email and setting a password. This information will stay on the machine running OpenWebUI. ! Pull a Model Once you've access OpenWebUI, you need to download a LLM model before using it. - Click on the bottom left button displaying your username - Click on , then and - Under , enter the LLM model you want to use - In our case we will use - Click on the button on the right to pull the image ! Using Llama Let's now use Llama! - Click on on the top left corner - Click on and select the model you downloaded - You can click on for convenience ! - You can now to Llama and interact with it! That's it. You now have a running LLM instance on the grid. References For any advanced configurations, you may refer to the OpenWebUI documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/system_administrators/advanced/ai_ml_workloads_toc/ai_ml_workloads_toc.md",
    "title": "AI & ML Workloads",
    "url": "/labs/documentation/system_administrators/advanced/ai_ml_workloads_toc",
    "content": "AI & ML Workloads TABLE OF CONTENTS - CPU and Llama - GPU and Pytorch - GPU and Fooocus",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/utilization_rewards.md",
    "title": "Utilization Rewards",
    "url": "/labs/documentation/farmers/utilization_rewards",
    "content": "Utilization Rewards Introduction 50% of proof-of-utilization rewards goes to the farmer running the 3Node. This means that farmers get paid in TFT 50% of what is spent to utilize their nodes. Process - Payments go to the TFChain wallet associated with the farm's twin. - Billing usually happens every hour, but funds are deposited into the farmer's wallet less frequently. The frequency is between 5 to 16 hours. Payment Information - Currently, there is no way to gather information on these payments. - If the farmer isn't using the wallet for anything else than farming, i.e. the wallet is not used to deploy workloads, the farmer will be able to see the TFT amount on their wallet accumulate.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/node_status_bot.md",
    "title": "Node Status Bot",
    "url": "/labs/documentation/farmers/node_status_bot",
    "content": "Introduction We present the Node Status Bot and how to use it. The Node Status Bot is a very helpful tool for farmers of the ThreeFold Grid. It can give you relevant information on your node status, notify you if the node status changes and also provide information on minting violations. You can find the bot source code on GitHub here. Disclaimer Note that the bot is developed and operated on a best effort basis. You are responsible for your nodes' uptime and your farming rewards. Getting Started with the Bot To get started with the bot, simply go to the bot link on Telegram and hit the start button to begin interacting with the bot. You can get the real time status of a node with the status command. For example, this gives the status of node 42 The bot can also send you a message when the status of a node changes. Use the subscribe command (or sub for short) to begin alerts for one or more nodes. Here we are subscribing to nodes 1, 2, and 3: Once you have subscribed you can issue the status command with no input to get the current status of the nodes you are subscribed to: By default, the bot is on main network. To change the network to the dev or test networks, use the network (net) command. Changing the network does not affect any existing subscriptions, and the bot does not specify which network the nodes belong to in its messages. Here's an example to change the network to devnet: You can also check if there are any violations in the current minting period. Like status, this command takes a node id as input or works on the currently subscribed nodes if no input is given: The next section covers in-depth the different commands available. Commands Here is a reference for all supported commands and their different forms: - - Print the start message with all the available commands - - Check the current status of one or all nodes. - This uses a similar method as the Dashboard for determining node status, and update may be delayed by an hour - With no input, a status report will be generated for all subscribed nodes, if any - Examples - Check status of node ID 1 - - Check status of all currently subscribed nodes - - - Scan for farmerbot related violations during the current and previous minting periods - Like status, this works on all subscribed nodes when no input is given - Examples - Check violations of node ID 1 - - Check status of all currently subscribed nodes - - - Subscribe to updates about one or more nodes - You can use the shortcut - If you don't provide an input, the nodes you are currently subscribed to will be shown - Examples - Subscribe to node ID 1 - - Subscribe to node ID 1, 2, 3 - - Check all subscribed nodes - - - Unsubscribe to updates about one or more nodes - You can use the shortcut - Examples - Unsubscribe to node ID 1 - - Unsubscribe to node ID 1, 2, 3 - - Unsubscribe to all currently subscribed nodes - - - Change the network to , , or - Default is - You can use the shortcut - If you don't provide an input, the currently selected network is shown - Examples - Check current network - - Change to another network, e.g. to - Bugs and Features To report bugs and request features, please open an issue on the GitHub repo or contact Scott Yeager on Telegram. Node Status Bot News If you use the bot, please also subscribe to the Node Status Bot News channel on Telegram to receive occasional updates and news concerning the bot.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_requirements.md",
    "title": "Farming Requirements",
    "url": "/labs/documentation/farmers/farming_requirements",
    "content": "Introduction This section contains information on the farming requirements. Uptime Requirements To be eligible for proof-of-capacity farming rewards, farmers need to ensure that their nodes have a minimum uptime per minting period. - 95% uptime requirements for DIY nodes - This means that nodes have 36.54 hours of allowed downtime per month (36 hours and 32.4 minutes) - 98% uptime requirements for certified nodes - This means that nodes have 14.616 hours of allowed downtime per month (14 hours and 36.96 minutes) Each minting period is 730.8 hours. The minimum uptime is always calculated against the duration of a full minting period. > We can recommend that farmers bring any new nodes online shortly before the start of a new minting period, to avoid any extra energy use during a period where the node can't possibly be eligible for minting. Consult the 2025 minting periods here. Farmerbot Considerations When minting considers a node running the Farmerbot, it counts standby time as uptime, as long as the node is healthy. If the node fails to wake within 24 hours, those 24 hours are deducted. This means that if the node misses two different wakeup within 24 hours, it will not have sufficient uptime for this minting period. This accounts for both certified and DIY cases.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farmers.md",
    "title": "Farmers",
    "url": "/labs/documentation/farmers",
    "content": "ThreeFold Farmers This section covers all practical information on how to become a cloud service provider (farmer) on the ThreeFold Grid. For complementary information on ThreeFold farming, refer to the Farming section. To buy a certified node from an official ThreeFold vendor, consult this section. TABLE OF CONTENTS - Build a 3Node - Farming Requirements - Farming Optimization - Advanced Networking - Farmerbot - Node Status Bot - Farming Troubleshooting - Utilization Rewards > Notes: Bugs in the code (e.g. ZOS or other components) can happen. If this is the case, there might be a loss of tokens during minting which won't be refunded by ThreeFold. If there are minting code errors, ThreeFold will try its best to fix the minting code and remint nodes that were affected by such errors. > > Farmers are solely responsible for the hardware they use to build their nodes. ThreeFold makes no warranties or representations regarding the compatibility, performance, or reliability of any specific hardware. Thorough research and testing are recommended before building your node.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_troubleshooting/farming_troubleshooting_tips.md",
    "title": "Build, Post Build & Memory",
    "url": "/labs/documentation/farmers/farming_troubleshooting/farming_troubleshooting_tips",
    "content": "Introduction We cover different ways and levels to troubleshoot farming issues. Build Troubleshooting In this section, we cover notions such as how to wipe disks, how to set the BIOS configurations and more. Set the BIOS You need to set the BIOS properly for your 3Node to boot with Zero-OS. The basic information is available here. BIOS Troubleshooting You might have to try UEFI first and if it doesn't work, try BIOS. Usually when this is the case (UEFI doesn't work with your current computer), the following message will be shown: > Initializing Network Devices... And then... nothing. This means that you are still in the BIOS of the hardware and boot is not even started yet. When this happens, try the BIOS mode of your computer. When running wipefs to wipe my disks on Linux, I get either of the following errors: \"syntax error near unexpected token\" or \"Probing Initialized Failed\". Is there a fix? Many different reasons can cause this issue. When you get that error, sometimes it is because your are trying to wipe your boot USB by accident. If this is not the case, and you really are trying to wipe the correct disk, here are some fixes to try out, with the disk as an example: Fix 1: Force the wiping of the disk: Fix 2: Unmount the disk then wipe it: Disk Not Recognized by Zero-OS If you're having trouble getting your disks recognized by Zero-OS, some farmers have had success enabling AHCI mode for SATA in their BIOS. Onboard Storage If you are using a server with onboard storage and are having issues, there are many ways to troubleshooting this. You can use the on board storage on a server without RAID. You can re-flash the RAID card, turn on HBA/non-RAID mode, or install a different card. There is no need for RAID with ThreeFold farming. It's usually easy to set servers such as a HP Proliant with the HBA mode. For Dell servers, you can either cross-flash the RAID controller with an “IT-mode-Firmware” (see this video) or get a DELL H310-controller (which has the non-RAID option). Otherwise, you can install a NVME SSD with a PCIe adaptor, and turn off the RAID controller. When I tried to boot my 3Node, at some point the screen went black, with or without a blinking hyphen or dash. What could cause this and what could I do to resolve the issue? There is a possibility that this happens because you are booting your 3Node on a HDD. A 3Node needs a minimum of 500GB of SSD to work properly. Also, make sure that you are using the correct boot option (Legacy BIOS or UEFI) in Settings and that it corresponds to the correct booting image on the ThreeFold Bootstrap page. This problem often arises when you plug your disks in the wrong controller. For example, try unplugging the disks from the SAS controller, and plug them in the SATA controller. Also, disable the SAS controller if needed. In a Legacy BIOS boot, make sure Legacy is enabled and disable Data Execution Prevention if possible. Also, it might have to do with your RAID controller configuration. Make sure this is properly set. For example, configuring all the HDD disks into one logical disk can fix this problem, or re-flashing the RAID card can also help. I get the error Certificate is not yet valid when booting my 3Node server, what can I do? Make sure your firmware is up to date. If necessary, reinstall it. You might have to install and then re-install the firmware if your system is very old. My SSD is sometimes detected as HDD by Zero-OS when there is a reboot. Is there a fix or a way to test the SSD disk? If your SSD disk shows as HDD, usually you can reboot the 3Node and Z-OS adjusts correctly. Anyone experiencing frequently this issue where Z-OS sometimes detects an SSD as HDD can try the following: Boot up a live Ubuntu Desktop image Run the benchmark utility within the Disks app Check if the seektime of the disk is sufficient for Z-OS If the seektime is above 0.5ms, Z-OS will consider your SSD as HDD Detailed Steps: Boot a Ubuntu Linux live USB Install gnome-disks if it isn't already installed: Open the application launcher and search for Disks Select your disk Click on the tree dots menu Select Benchmark Disk... Use the default parameters Transfer rate: This is not relevant for our current test You can set to it to minimum (e.g. 2) Sample size: 10 MB is sufficient Check the average access time on the ThreeFold repository Check seek time for HDD and SSD A SSD needs to be \\ Example: You want to start with your largest sticks, evenly distributed between both processors and work your way down to your smallest. Let's take an example with 2 processors as well as 4x 16GB sticks and 4x 8GB sticks. The arrangement would be A1-16GB, B1-16GB, A2-16GB, B2-16GB, A3-8GB, B3-8GB, A4-8GB, B4-8GB. Avoid odd numbers as well. You optimally want pairs. So if you only have 5x 8GB sticks, only install 4 until you have an even 6. What does RAM mean? RAM means random access memory. Those type of memory can be read and changed in any order. What does DIMM mean when it comes to RAM sticks? It means dual in-line memory module. This type of computer memory is natively 64 bits, enabling fast data transfer. I have 24 DIMMS ram slots on my server. Can I use them all? Be careful when installing memory on a server. Always check your server's documentation to make sure your RAM sticks combination are correct. For example, on the Dell R720, you can have 24x16gb RAM ECC sticks, but it can only handle 16 Quad ranked DIMMs. In this case, you can fill up all slots with registered DIMMs if you have a maximum of 4 quad DIMMS ranked on each CPU. Get Further Assistance If you've read this whole section and tried different troubleshooting methods to no avail, do not lose hope! You can get further assistance and we will most surely resolve your issues. You can contact the ThreeFold support team and raise a ticket to get further assistance. Also, you can ask questions on the ThreeFold Forum or on the ThreeFold Farmer Telegram Channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_troubleshooting/farming_troubleshooting.md",
    "title": "Farming Troubleshooting",
    "url": "/labs/documentation/farmers/farming_troubleshooting",
    "content": "When building a 3Node, we advise to follow carefully the 6 steps laid out in the 3Node building section of the manual. Make sure that the disks are properly wiped, that you have the correct bootstrap image and that the BIOS/UEFI is set correctly. If you are still having issues, you may find solutions to your issues by reading the sections Build Troubleshooting and Basic Post Build Troubleshooting. If your issues are related to memory, the section Memory Troubleshooting should help. If you still can't fix your issue, try to get more info by reading the Error/Log screen. Read the section Advanced Post Build Troubleshooting for more information. Once you have more information via the Error/Log screen, you should first try to find fixes to the errors by reading the troubleshooting section. If you still can't find solutions to your issues, read the section Get Further Assistance to ask for help. Going through the whole table of contents can quicken your search. TABLE OF CONTENTS - Build Troubleshooting - Basic Post Build Troubleshooting - Advanced Post Build Troubleshooting - Memory Troubleshooting - Get Further Assistance",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/set_additional_fees.md",
    "title": "Set Additional Fees",
    "url": "/labs/documentation/farmers/farming_optimization/set_additional_fees",
    "content": "Introduction Farmers can set additional fees for their 3Nodes on the TF Dashboard. By doing so, users will then be able to reserve the 3Node and use it as a dedicated node. This can be useful for farmers who provide additional values to their 3Nodes, e.g. a GPU card and/or high-quality hardware. Steps Here are the steps to set additional fees to a 3Node. On the Dashboard, go to Farms -> Your Farms Under the section Your Nodes, locate the 3Node and click Set Additional Fees under Actions * Set a monthly fee (in USD) and click Set TFT Payments When a user reserves your 3Node, you will receive TFT payments once every 24 hours. These TFT payments will be sent to the TFChain account of your farm's twin. Dedicated Nodes Notice Note that while any 3Node that has no workload can be reserved by a TF user as a dedicated node, when a farmer sets additional fees to a 3Node, this 3Node automatically becomes a dedicated node. For a user to run workloads on this 3Node, the 3Node must then be reserved, i.e rented as a dedicated node.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/minting_tool.md",
    "title": "Minting & Uptime Tool",
    "url": "/labs/documentation/farmers/farming_optimization/minting_tool",
    "content": "Minting Tool Introduction We present the Peppermint tool. This tool is very useful to track uptime of your nodes and also to check minting receipts. Access The tool is available at the following URL: - https://peppermint.gent01.test.grid.tf How to Use the Tool Using the tool is straightforward. - Search either by node ID or by farm ID ! Node ID Search - Searching by node ID, you can see the uptime of all past minting periods ! - By clicking on a row, you access a node's specific minting period - You can download CSV files of the minting reports (See button on the right) ! Farm ID Search - Search by farm ID, you can see the total minting periods of all nodes, where nodes are presented in ascending order ! - You can sort by to see the uptime of all the farm's nodes sorted by periods !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/minting_receipts.md",
    "title": "Minting Receipts",
    "url": "/labs/documentation/farmers/farming_optimization/minting_receipts",
    "content": "Introduction Once you have the receipt hash of your node minting, you can get the minting report of your node. Access the Reports - On the Dashboard, go to TFChain -> TF Minting Reports - Enter your receipt hash - Consult your minting report Available Information The ThreeFold Alpha minting tool will present the following information for each minting receipt hash: - Node Info: This contains the basic information in relation to your node. - Node ID - Farm Name and ID - Measured Uptime - Node Resources: These resources are related to the cloud units and the resource units. - CU - SU - NU - CRU - MRU - SRU - HRU - TFT Farmed: This is the quantity of TFT farmed during the minting period. - Payout Address: The payout address is the Stellar address you set to receive your farming rewards. TFT Farming Registration Price Currently, minting is set at a TFT value of 0.08 USD. This TFT farming registration price (i.e. the TFT minting value) can be seen as a farming difficulty level. The higher this number is, the less TFT is minted for the same given node. This number is not related to the TFT market price and is currently fixed. The ThreeFold DAO can vote to change this number. For example, if the ThreeFold DAO decides to increase the TFT minting value to 0.10 USD, the farming difficulty would be increased by 25% (0.08 * 1.25 = 0.10). This updated TFT farming registration price would then affect all new nodes that are registered after the DAO vote is passed. TF Minting Reports - In the section Your Farms, on the left of your Farm ID, click on the down arrow button - Click on Download Minting Receipts Download Minting Receipts of a 3Node You can download minting receipts of a single 3Node directly on the ThreeFold Dashboard. - On the ThreeFold Dashboard, go to Portal -> Farms - In the section Your Farm Nodes, on the left of your Node ID, click on the down arrow button - Click on Node Statistics - Click on Download Node Receipt Minting Receipts Information The minting receipts contain the following information: - Minting: - start: - end: - TFT: - Cloud Units: Alpha Minting Tool You can query additional minting information by using the Dashboard Alpha Minting tool. - Download the minting receipts of your farm or of a single 3Node - Copy a minting receipt hash - Open the ThreeFold Alpha Minting tool by clicking on Minting on the left-side ThreeFold Dashboard menu - Paste the minting receipt hash The ThreeFold Alpha minting tool will present the following information for each minting receipt hash: - Node ID - Farm Name - Measured Uptime - Node Resources - CU - SU - NU - CRU - MRU - SRU - HRU - TFT Farmed - Payout Address -->",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/minting_process.md",
    "title": "Minting Process",
    "url": "/labs/documentation/farmers/farming_optimization/minting_process",
    "content": "Minting Process Minting is based on blockchain data according to strict rules that are carried out by computers with humans involved only to check for errors and to sign the resulting transactions. There is a human verification mechanism through multisignatures for calculations done on the data as stored in the blockchain. This explains the timing differences when it comes to the monthly farming rewards distribution, since enough people need to sign off. The detailed minting process for V3 is as follow: - TFChain, ThreeFold's blockchain, has all the details about capacity provided by the nodes. - TFChain is used to track uptime. - Zero-OS reports to TFChain. - The code in this repo uses the information from the blockchain to calculate the TFT to be minted. - A proof of what needs to be minted and why is created. This proof is then sent to our guardians. - The guardians need to double check the execution and the minting report. This is like a human check on the automated process. - The guardians need to sign. Only when consensus is achieved the minting as suggested will happen. This allows human to check the code. It is important to understant that TFChain tracks the capacity and uptime and is the source for the minting. > Note: Additional auditing code will be added in V4 (i.e. special code generated at runtime for verification) using security primitives on motherboards. For more information on the minting periods, read this section.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/minting_periods.md",
    "title": "Minting Periods",
    "url": "/labs/documentation/farmers/farming_optimization/minting_periods",
    "content": "Introduction We discuss the length and the frequencies of the ThreeFold farming minting periods. Minting Period Length Each minting period has: 2630880 seconds = 43848 minutes = 730.8 hours. 2025 Minting Periods The minting periods for the 12 months of 2025 are the following: | Month | Start of the Minting Period | End of the Minting Period | |----------|---------------------------------|---------------------------------| | Jan 2025 | December 30, 2024 at 23:44:40 | January 30, 2025 at 10:32:40 | | Feb 2025 | January 30, 2025 at 10:32:40 | March 1, 2025 at 21:20:40 | | Mar 2025 | March 1, 2025 at 21:20:40 | April 1, 2025 at 08:08:40 | | Apr 2025 | April 1, 2025 at 08:08:40 | May 1, 2025 at 18:56:40 | | May 2025 | May 1, 2025 at 18:56:40 | June 1, 2025 at 05:44:40 | | Jun 2025 | June 1, 2025 at 05:44:40 | July 1, 2025 at 16:32:40 | | Jul 2025 | July 1, 2025 at 16:32:40 | August 1, 2025 at 03:20:40 | | Aug 2025 | August 1, 2025 at 03:20:40 | August 31, 2025 at 14:08:40 | | Sep 2025 | August 31, 2025 at 14:08:40 | September 30, 2025 at 00:56:40| | Oct 2025 | September 30, 2025 at 00:56:40| October 30, 2025 at 11:44:40 | | Nov 2025 | October 30, 2025 at 11:44:40 | November 29, 2025 at 22:32:40 | | Dec 2025 | November 29, 2025 at 22:32:40 | December 30, 2025 at 09:20:40 |",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/hdd_only_nodes.md",
    "title": "HDD-Only Nodes",
    "url": "/labs/documentation/farmers/farming_optimization/hdd_only_nodes",
    "content": "Introduction It is possible to create an HDD-only node. This means that this node doesn't have SSD disks, but only HDD disks. The steps are almost all the same, except for the creation of the Zero-OS Bootstrap image, which needs an extra kernel argument. The requirements and BIOS parameters differences are also covered. Requirements An HDD-only node needs at least 100GB of HDD disk. BIOS Parameters In the BIOS, make sure to set for SATA disks. Bootstrap Image for HDD-Only Nodes To create an HDD-only node, the bootstrap image needs an extra kernel argument: - Navigate to the Zero-OS Bootstrap site. - Select from the menu at the top. - Fill in all the needed inputs (Farm ID, network, kernel and format). - You can keep the default kernel - In the input field, type . - Generate and download the image.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/gpu_farming.md",
    "title": "GPU Farming",
    "url": "/labs/documentation/farmers/farming_optimization/gpu_farming",
    "content": "Welcome to the GPU Farming section of the ThreeFold Manual! In this guide, we delve into the realm of GPU farming, shedding light on the significance of Graphics Processing Units (GPUs) and how they can be seamlessly integrated into the ThreeFold ecosystem. Understanding GPUs A Graphics Processing Unit, or GPU, is a specialized electronic circuit designed to accelerate the rendering of images and videos. Originally developed for graphics-intensive tasks in gaming and multimedia applications, GPUs have evolved into powerful parallel processors with the ability to handle complex computations, such as 3D rendering, AI and machine learning. In the context of ThreeFold, GPU farming involves harnessing the computational power of Graphics Processing Units to contribute to the decentralized grid. This empowers users to participate in the network's mission of creating a more equitable and efficient internet infrastructure. Get Started In this guide, we focus on the integration of GPUs with a 3Node, the fundamental building block of the ThreeFold Grid. The process involves adding a GPU to enhance the capabilities of your node, providing increased processing power and versatility for a wide range of tasks. Note that any Nvidia or AMD graphics card should work as long as it's supported by the system. Install the GPU We cover the basic steps to install the GPU on your 3Node. Find a proper GPU model for your specific 3Node hardware Install the GPU on the server Note: You might need to move or remove some pieces of your server to make room for the GPU (Optional) Boot the 3Node with a Linux distro (e.g. Ubuntu) and use the terminal to check if the GPU is recognized by the system Output example with an AMD Radeon (on the line ) ! Boot the 3Node with the ZOS bootstrap image GPU Node and the Farmerbot If you are using the Farmerbot, it might be a good idea to first boot the GPU node without the Farmerbot (i.e. to remove the node in the config file and restart the Farmerbot). Once you've confirmed that the GPU is properly detected by TFChain, you can then put back the GPU node in the config file and restart the Farmerbot. While this is not necessary, it can be an effective way to test the GPU node separately. Set a Price for the GPU Node You can set additional fees for your GPU dedicated node on the TF Dashboard. When a user reserves your 3Node as a dedicated node, you will receive TFT payments once every 24 hours. These TFT payments will be sent to the TFChain account of your farm's twin. Check the GPU Node on the Node Finder You can use the Node Finder on the TF Dashboard to verify that the node is displayed as having a GPU. On the Dashboard, go to the Node Finder Under Node ID, write the node ID of the GPU node Once the results are displayed, you should see 1 under GPU * If you are using the Status bot, you might need to change the node status under Select Nodes Status (e.g. Down, Standby) to see the node's information > Note: It can take some time for the GPU parameter to be displayed. Reserving the GPU Node Now, users can reserve the node in the Dedicated Nodes section of the Dashboard and then deploy workloads using the GPU. For more information, read this documentation. Questions and Feedback If you have any questions or feedback, we invite you to discuss with the ThreeFold community on the ThreeFold Forum or on the ThreeFold Farmer chat on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/farming_optimization.md",
    "title": "Farming Optimization",
    "url": "/labs/documentation/farmers/farming_optimization",
    "content": "The section Build a 3Node covered the notions necessary to build a DIY 3Node server. The following section will give you additional information with the goal of optimizing your farm while also being able to plan ahead the costs in terms of energy and capitals. We also cover how to set a GPU node and more. TABLE OF CONTENTS - GPU Farming - Cloud Provider Farming - HDD-Only Nodes - Set Additional Fees - Minting Process - Minting Receipts - Minting & Uptime Tool - Minting Periods - Room Parameters - Farming Costs - Calculate Your ROI",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/farming_costs.md",
    "title": "Farming Costs",
    "url": "/labs/documentation/farmers/farming_optimization/farming_costs",
    "content": "Calculate the Total Electricity Cost of Your Farm The total electricity cost of your farm is the sum of all Power used by your system times the price you pay for each kWh of power. > Total electricity cost = Total Electricity in kWh Cost per kWh > Total Electricty in kWh = 3Nodes' electricity consumption Number of 3Nodes + Cooling system electricity consumption With our example, we have 5 servers running at 400 W at Full Load and we have a 12K BTU unit that is consuming in average 1000W. We would then have: > 5 400 W + 1000 W = 3000 W = 3 kW To get the kWh per day we simply multiply by 24. > kW (# of hour per day) = daily kWh consumption > 3 kW 24 = 72 kWh / day We thus have 72 kWH per day. For 30 days, this would be > kWh / day (# day in a month) = kWh per month > 72 30 = 2160 kWH / month. At a kWh price of 0.10$ USD, we have a cost of 216 $USD per month for the electricity bill of our ThreeFold farm. > kWH / month of the farm kWh Cost = Electricity Bill per month for the farm > 2160 0.1 = 216$USD / month for electricity bills Calculate the Proper Bandwidth Needed for Your Farm The bandwidth needed for a given 3Node is not yet set in stone and you are welcome to participate in ongoing discussion on this subject on the ThreeFold Forum. In this section, we will give general guidelines. The goal is to have a good idea of what constitutes a proper bandwidth available for a given amount of resources utilized on the ThreeFold Grid. Starting with a minimum of 1 mbps per Titan, which is 1 TB SSD and 32 GB RAM, we note that this is the lowest limit that gives the opportunity for the most people possible to join the ThreeFold Grid. That being said, we could set that 10 mbps is an acceptable upper limit for 1 TB SSD and 64 GB of RAM. Those numbers are empirical and more information will be shared in the future. The ratio 1TB SSD/64GB RAM is in tune with the optimal TFT rewards ratio. It is thus logical to think that farmers will build 3Node based on this ratio. Giving general bandwidth guidelines based on this ratio unit could thus be efficient for the current try-and-learn situation. The Minimum Bandwidth per 3Node Equation Here we explore some equations that can give a general idea to farmers of the bandwidth needed for their farms. As stated, this is not yet set in stones and the TFDAO will need to discuss and clarify those notions. Here is a general equation that gives you a good idea of a correct bandwidth for a 3Node: > min Bandwidth per 3Node (mbps) = k max((Total SSD TB / 1 Tb),(Total Threads / 8 Threads),(Total GB / 64 GB)) + k (Total HDD TB / 2) Setting k = 10 mbps, we have: > min Bandwidth per 3Node (mbps) = 10 max((Total SSD TB / 1 TB),(Total Threads / 8 Threads),(Total GB / 64 GB)) + 10 (Total HDD TB / 2) As an example, a Titan, with 1TB SSD, 8 Threads and 64 GB of RAM, would need 10 mbps: > 10 max(1, 1, 1) = 10 1 = 10 With the last portion of the equation, we can see that for each additional 1TB HDD storage, you would need to add 5 mbps of bandwidth. Let's take a big server as another example. Say we have a server with 5TB SSD, 48 threads and 384 GB of RAM. We would then need 60 mbps of bandwidth for each of these 3Nodes: > 10 max((5/5), (48/8), (384/64)) = 10 max(5,6,6) = 10 6 = 60 This server would need 60 mbps minimum to account for a full TF Grid utilization. You can easily scale this equation if you have many 3Nodes. Let's say you have a 1 gbps bandwidth from your Internet Service Provider (ISP). How much of those 3Nodes could your farm have? > Floor (Total available bandwidth / ((Bandwidth needed per 3Nodes)) = Max servers possible With our example we have: > 1000 / 60 = 16.66... = 16 We note that the function Floor takes the integer without the decimals. Thus, a 1 gbps bandwidth farm could have 16 3Nodes with each 5TB SSD, 48 threads and 384 GB of RAM. In this section, we used k = 10 mbps. If you follow those guidelines, you will most probably have a decent bandwidth for your ThreeFold farm. For the time being, the goal is to have farmers building ThreeFold farms and scale them reasonably with their available bandwidth. Stay tuned for official bandwidth parameters in the future. Cost per Month for a Given Bandwidth Once you know the general bandwidth needed for your farm, you can check with your ISP the price per month and take this into account when calculating your monthly costs. Let's take the example we used with 5 servers with 400 W at Full Load. Let's say these 5 servers have the same parameters we used above here. We then need 60 gbps per 3Nodes. This means we need 300 mbps. For the sake of our example, let's say this is around 100$ USD per month. Calculate Total Cost and Revenue As the TFT price is fixed for 60 months when you connect your 3Node for the first time on the TF Grid, we will use the period of 60 months, or 5 years, to calculate the total cost and revenue. The total cost is equal to: > Total Cost = Initial investment + 60 (electricity + Internet costs per month) In our example, we can state that we paid each server 1500$ USD and that they generate each 3000 TFT per month, with an entry price of 0.08$ USD per TFT. The electricity cost per month is > 144$ for the electricity bill > > 100$ for the Internet bill > > Total : 244 $ monthly cost for electricity and Internet The revenues are > Revenues per month = Number of 3Nodes TFT farmed per 3Node Price TFT Sold In this example, we have 5 servers generating 2000 TFT per month at 0.08$ USD per TFT: > 5 3000$ 0.08$ = 1200$ The net revenue per month are thus equal to > Net Revenue = Gross revenue - Monthly cost. We thus have > 1200$ - 244$ = 956$ This means that we generate a net profit of 956$ per month, without considering the initial investment of building the 3Nodes for the farm. In the previous AC example, we calculate that a minimum of 12K BTU was needed for the AC system. Let's say that this would mean buying a 350$ USD 12k BTU AC unit. The initial cost is the cost of all the 3Nodes plus the AC system. > Number of 3Nodes cost per 3Nodes + Cost of AC system = Total Cost In this case, it would be: > Total initial investment = Number of 3Nodes Cost of 3Node + Cost of AC system Then we'd have: > 5 1500 + 350 = 7850 $ Thus, a more realistic ROI would be: > Total initial investment / Net Revenue per Month = ROI in months In our case, we would have: > 7850$ / 956$ = Ceiling(8.211...) = 9 With the function Ceiling taking the upper integer, without any decimals. Then within 9 months, this farm would have paid itself and from now on, it would be only positive net revenue of 956$ per month. We note that this takes into consideration that we are using the AC system 24/7. This would surely not be the case in real life. This means that the real ROI would be even better. It is a common practice to do estimates with stricter parameters. If you predict being profitable with strict parameters, you will surely be profitable in real life, even when \"things\" happen and not everything goes as planned. As always, this is not financial advice. We recall that in the section Calculate the ROI of a DIY 3Node, we found a simpler ROI of 6.25 months, say 7 months, that wasn't taking into consideration the additional costs of Internet and electricity. We now have a more realistic ROI of 9 months based on a fixed TFT price of 0.08$ USD. You will need to use to equations and check with your current TF farm and 3Nodes, as well as the current TFT market price. Check Revenue with the ThreeFold Simulator To know how much TFT you will farm per month for a giving 3Node, the easiest route is to use the ThreeFold Simulator. You can do predictions of 60 months as the TFT price is locked at the TFT price when you first connect your 3Node, and this, for 60 months. To know the details of the calculations behind this simulator, you can read this documentation. Economics of Farming As a brief synthesis, the following equations are used to calculate the total revenues and costs of your farm. Questions and Feedback This section constitutes a quick synthesis of the costs and revenues when running a ThreeFold Farm. As always, do your own reseaerch and don't hesitate to visit the ThreeFold Forum on the ThreeFold Telegram Farmer Group if you have any questions.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/farm_room_parameters.md",
    "title": "Room Parameters",
    "url": "/labs/documentation/farmers/farming_optimization/farm_room_parameters",
    "content": "Introduction In this section of the ThreeFold Farmers book, we cover some important notions concerning the room parameters where your 3Nodes are working. We discuss topics such as air conditioner, relative humidity and air changes per hour. Planning ahead the building of your ThreeFold farm with these notions in mind will ensure a smooth farming experience. Calculate the Minimum BTU/h Needed for the AC Let's see how to calculate how powerful your AC unit needs to be when it comes to cooling down your server room. As we know, servers generate heat when they are working. While a desktop 3Node will generate under 20W at idle and a server 3Node might use 100W at idle, when you pile up some 3Nodes desktops/servers in the same location, things can get pretty warm when cultivation on the Grid is happening. Indeed, when your servers will be using a lot of power, especially in the summer time, you might need some additional cooling. A good thing about servers generating heat is that this can be used as a heat source in the winter. Other more advanced techniques can be used to maximize the heat production. But that's for another day! Note that for small farms, your current heating and cooling system may suffice. So let's do the calculation: How Much BTU/h is Needed? How much BTU/h does your ThreeFold Farm need to cool your servers? Calculating this is pretty simple actually. You need to keep in mind that 1 kW (1000 W) of power is equivalent to 3413 BTU/h (Britisth Thermal Unit). > 1000 W = 1 kW = 3413 BTU/h > > 1000 Wh = 1 kWh = 3413 BTU So with our idle server example running at 100W, we have 0.1 kW. > 100 W = 0.1 kW We then multiply our kW by the BTU/h factor 3413 to obtain the result in BTU/h. Here we have 341.3 BTU/h: > 0.1 kW 3413 = 341.3 BTU/h Say you have 5 servers with this same configuration. It means you have > (# of servers) (BTU/h per server) = Total BTU/h > 5 341.3 = 1706.5 BTU/h Thus, a 2000 BTU/h air conditioner would be able to compensate for the heat when your servers are at idle. > Note that in general for air conditioners, it will often be written BTU instead of BTU/h as a shorthand. Please take note that this does not take into account the energy needed to cool down your environment. You'd need to take into consideration the heat of the servers and the general heat of your environment to figure out how much BTU your AC needs in the big heat days of the summer. Taking Utilization Into Account But then, what happens at cultivation? Well, say your server needs 400W of power when it's being fully cultivated by some lively ThreeFold Users of the New Internet. In this case, we would say that 400 W is the power consumption at full load. As we started with 100 W, and we now have 400 W, it means that you'd need four times the amount of BTU/h. Here we show how to calculate this with any other configuration of full load/idle. > Full-load / Idle Ratio = Full Load W / Idle W > 4 = 400 W / 100 W The BTU/h needed in cultivation would be > (Full-Load / Idle Ratio) Idle BTU/h needed = Full Load BTU/h > 4 (1706.5 BTU/h at Idle) = 6826 BTU/h at Full Load Thus, you would need 6826 BTU/h from the AC unit for 5 servers running each at 400W. In that case, a 8000 BTU/h AC unit would be sufficient. Let's say your environment would typically need 4000 BTU/h to cool the room, you'd need about 12000 BTU/h AC unit for the whole setup. > If: BTU/h needed Server Power in kW at Full Load 3413 Number of Servers = Total Maximum BTU/h needed per ThreeFold Farm As another example, 7 servers using 120 W of power at idle would need: > 0.12 3413 7 = 2866.92 BTU/h During cultivation, these 7 servers might use 480 W. This would be: > 0.48 3413 * 7 = 11467.68 BTU/h To be sure everything's OK, this set up would need a 12 000 BTU/h AC unit to compensate for the heat generated by the ThreeFold Farm during full cultivation. This example considers the environment heat to be negligible. > 11467.68 12K BTU/h AC Unit is OK for farm That's it! It ain't any more complicated. Straight up mathematics and some judgment. Now, let's compute the costs of running all this! Ensure Proper Relative Humidity To ensure that the relative humidity in your server room stays within a proper range, look in your server's user manual to know the proper range of relative humidity your server can handle. If necessary, use an hygrometer to measure relative humidity and make sure it stays within an acceptable range for your 3Nodes. Depending on your geographical location and your current situation, it could be interesting to consider having a AC unit equipped with a dehumidifier. Read your servers' manual to check the proper relative humidity range and set the unit accordingly. The maximum/minimum temperature and relative humidity a 3Node server can handle will depend on the specific server/computer you are using. You should check the server's technical guide/manual to get the proper information. The following is an example. We will use here the Dell R720 as an example since it is a popular 3Node choice. In this case, we use the R720's Technical Guide as reference. For the R720, between 35˚C and 40˚C (or 95˚F and 104˚F), with 5% to 85% relative humidity, you can have this less than 10% of annual operating hours (around 36 days per year), and between 40˚C and 45˚C (or 104˚F and 113˚F), with 5 to 90% relative humidity, it’s less than 1% of annual operating hours (around 3.6 day per year). All this considers that there is no direct sunlight. From 10˚C to 35˚C (thus from 50˚F to 95˚F), it’s considered standard operating temperature. With relative humidity from 10% to 80%. This can give you a good idea of the conditions a 3Node can handle, but make sure you verify with your specific server's manual. Ensure Proper Air Changes per Hour To ensure that the air changes per hour is optimal in your 3Node servers' room, and depending on your current situation, it can be recommended to ventilate the server room in other to disperse or evacuate excess heat and humidity. In those cases, ventilation flow will be set depending on the air changes per hour (ACPH) needed. Note that the ASHRAE recommends from 10 to 15 ACPH for a computer room. > Note: A good AC unit will be able to regulate the heat and the relative humidity as well as ensure proper air changes per hour.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/cloud_provider_farming.md",
    "title": "Cloud Provider Farming",
    "url": "/labs/documentation/farmers/farming_optimization/cloud_provider_farming",
    "content": "Cloud Provider Farming Introduction We explain how to set up a 3Node on the ThreeFold Grid running on a cloud provider server. Currently, the documentation is made for Hetzner and OVH. Considerations When you set up a node as explained in this guide, it will be running ZMachine Light on Grid 3. This means that you can access the node stats on the Dashboard, but not the usual Dashboard link. To reach out the Dashboard, you will need to use the following link: - Dashboard link: https://next.dashboard.grid.tf/ Also, this current setup does not allow the node to be a grid gateway node out of the box. If you want to deploy a grid gateway node using Hetzner, reach out to support and we will assist you. To deploy on those nodes, you can either use the Next Dashboard link above or deploy using Terraform. Hetzner Server Specs You first need to order a dedicated server from Hetzner with the following specs. You can consult the Hetzner Server Auction page. Recommended Hetzner Server Specifications - NVMe: First filter on NVMe only servers with 'Drives' > 'NVMe SSD' - Preferred CPU: Intel Core i7-8700 / AMD Ryzen 5 3600. - Try to find the best deals in the first pages. - I.e. If you can rent a i7-6700 and a i7-8700 for about the same price, one would prefer the i7-8700. - The same logic applies for Xeon and AMD models. - You should compare them with benchmark scores vs price to pick the best deal. - Important: Currently, the following CPUs are not supported: Intel 12th, 13th or 14th generation. - This will not work with the current setup. - Recommendation - Max price range of €50 / mnd / excl. vat - HDD is a great addition, but it is not required. - Location - No preferred location. Once you get a server with Hetzner, it will be delivered booted in the Hetzner rescue mode with enabled. From this, we can install ZMachine Light. Make sure to use a ZOS bootstrap image. OVH Server Specs You'll need to order a dedicated server from OVH with hardware specifications that meet Zero-OS requirements. Visit the OVH Dedicated Server page to explore available options. Recommended OVH Server Specifications - CPU: Intel or AMD processors with good single-thread performance - Avoid very old CPU models for optimal performance - RAM: Minimum 32GB recommended for productive nodes - Storage: Servers with NVMe drives are preferred for better performance - Networking: Default networking configuration is sufficient After ordering, boot your server into mode with enabled through the OVH control panel. This is required to install ZMachine Light in the following steps. Make sure to use a ZOS image. OVH DDOS Protection When a Zero-OS node is deployed on OVH, you may receive automated emails about their DDOS protection being activated. This is normal behavior and does not indicate any actual problems with your node. What Happens - Certain UDP traffic patterns on your node can trigger OVH's automatic DDOS protection - This protection activates for approximately 10 minutes before disabling itself - You will receive notification emails when protection is enabled and disabled Important Notes - Your node remains online and functional during these protection periods - No actual DDOS attack is occurring - this is just OVH's security system working as designed - The multiple notification emails from OVH can be safely disregarded Update UDP Profile You can update the UDP profile so these email alerts stop. - Request the following: - \"Please adjust the DDoS protection profile for my server (provide your IP address) to match the profile used for IP 51.77.66.70, which has been configured for Zero-OS nodes\" - Explain that your server is running Zero-OS and requires appropriate thresholds to prevent false DDoS triggers from UDP traffic Important Notes - This profile adjustment must be requested for each new ZOS server you deploy on OVH - There is currently no standard profile name or automatic process - you need to specifically reference the existing working profile in your request - OVH support does not provide details about the specific changes made to the DDoS protection thresholds - After the profile change, monitor your node to ensure the issue is resolved ZMachine Light Installation Script The next step is to install ZMachine Light with UEFI using a script written in Bash. For this, we will SSH into the node, wipe the disk and then partition it to install ZMachine Light on the small partition. - SSH to the server that is in rescue mode to wipe the disks and chech the boot mode (BIOS or UEFI) - A server in BIOS mode would have the following output: - A server in UEFI mode would have the following output: Currently, it is only possible to deploy on a UEFI boot mode server. Since each auction server comes in BIOS boot mode, you have to ask the Hetzner support to change it to UEFI boot mode. - UEFI boot mode script installation, always use the first disk (mostly ) and make sure the second is wiped. Note that here we use the farm ID as an example. - Check if the partitions have been created. Test the Server Reboot the server and ping its public IP, it should reply soon (while in PXE boot). Then it will stop replying. This means it is booting into ZMachine Light. After about 1 minute, it should reply again. Once the node is connected and registered on the grid, the node should have its ID and be online in the dashboard. Dashboard Data You can consult some basic data on the Dashboard to make sure everything is set up properly. - Check that the node is properly registered and note the node ID - Check that all hardware is registered (CPU, RAM, total disk count) - Check that it is sending metrics by pressing As explained above, you will need to use the following Dashboard link: - Dashboard link: https://next.dashboard.grid.tf/",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farming_optimization/calculate_roi.md",
    "title": "Calculate Your ROI",
    "url": "/labs/documentation/farmers/farming_optimization/calculate_roi",
    "content": "To calculate the ROI of a DIY 3Node, we first calculate the Revenue per Month: >Revenue per month = TFT price when sold TFT farmed per month The ROI of a DIY 3Node is: > Cost of 3Node / Revenue per month = ROI in months For example, a Rack Server farming 3000 TFT per month with an initial cost of 1500$USD has the following ROI: > 1500 / (3000 0.08) = 6.25 month ROI This calculation is based on a TFT value of 8 cents. You should adjust this according to the current market price. Note that this ROI equation is used to compare efficienty between different DIY 3Nodes. It does not constitute real final gains as additional costs must be taken into consideration, such as electricity for the 3Nodes, for the AC system, as well as Internet bandwidth. All those notions are covered in this part of the book.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farmerbot_intro/farmerbot_quick.md",
    "title": "Quick Guide",
    "url": "/labs/documentation/farmers/farmerbot_intro/farmerbot_quick",
    "content": "Introduction In this guide, we show how to deploy the Farmerbot on a full VM running on the TFGrid. This guide can be done on bare metal or on a full VM running on the TFGrid. You need at least two 3Nodes on the same farm to make use of the Farmerbot. This version of the Farmerbot also works with ARM64. This means that if you have a Pi 3, 4, or Zero 2 with a 64 bit OS, you can download the appropriate release archive and it will work properly. Read the Additional Information section for further details concerning the Farmerbot. Prerequisites - The TFChain account associated with the farm should have at least 5 TFT (recommended is 50 TFT) Farmerbot Costs on the TFGrid If you run the Farmerbot on a 3Node on the TFGrid, you will have to pay TFT to deploy on that 3Node. You can run a full VM at minimum specs for the Farmerbot, that is 1vcore, 15GB of SSD storage and 512MB of RAM. Note that you can use the Planetary Network. You do not need to deploy a 3Node with IPv4. The cost on main net for this kind of workload is around 0.175TFT/hour (as of the date 11-07-23). Next to that, you will have to pay the transaction fees every time the Farmerbot has to wake up or shut down a node. This means that you need some TFT on the account tied to the twin of your farm. For the periodic wakeups, each node in the farm is shut down and powered on once a day, i.e. 30 times per month. Also, there is 10 random wakeups per month for each node. This means that each node is turned off and on 40 times per month in average. In that case, the average cost per month to power on nodes and shut them back down equals: > average transaction fees cost per month = 0.001 TFT (extrinsic fee) amount of nodes 40 2 (1 for powering down, one for powering up) Enable Wake-On-Lan For a 3Node to work properly with the Farmerbot, the parameter wake-on-lan must be enabled. Enabling wake-on-lan on your 3Node may differ depending on your computer model. Please refer to the documentation of your computer if needed. Usually the feature will be called Wake-on-Lan and you need to set it as \"enabled\" in the BIOS/UEFI settings. Here are some examples to guide you: Racker Server, Dell R720 Go into Set Wake-on-Lan to Desktop Computer, HP EliteDesk G1 Go to Power -> Hardware Power Management Disable Go to Set to > Hint: Check the Z-OS monitor screen and make sure that all the 3Nodes are within the same lan (e.g. all 3Nodes addresses are between 192.168.15.00 and 192.168.15.255). For more information on WOL, read this section. Deploy a Full VM For this guide, we run the Farmerbot on a Full VM running on the TFGrid. Note that while you do not need to run the Farmerbot on the TFGrid, the whole process is very simple as presented here. - Deploy a full VM on the TFGrid - Update and upgrade the VM - Reboot and reconnect to the VM Farmerbot Setup We present the different steps to run the Farmerbot using the binaries. > For a script that can help automate the steps in this guide, check this forum post. Download the Farmerbot Binaries - Download the latest ThreeFold tfgrid-sdk-go release and extract the farmerbot for your specific setup (here we use ). On the line , make sure to replace with the latest Farmerbot release. - Move the Farmerbot - Remove the tar file Create the Farmerbot Files - Create Farmerbot files directory - Create the Farmerbot file (see template below) - Create the environment variables file and set the variables (see template below) Run the Farmerbot We run the Farmerbot with the following command: For farmers with ed25519 keys, the flag should be used. Note that by default, the Farmerbot uses the sr25519 keys. For more information on the supported commands, the Additional Information section. You can also consult the Farmerbot repository. Once you've verified that the Farmerbot runs properly, you can stop the Farmerbot and go to the next section to set a Farmerbot service. This step will ensure the Farmerbot keeps running after exiting the VM. Set a systemd Service It is highly recommended to set a Ubuntu systemd service to keep the Farmerbot running after exiting the VM. Create the service file Set the Farmerbot systemd service Enable the Farmerbot service Verify that the Farmerbot service is properly running Check the Farmerbot Logs You can get more details on the operation of the Farmerbot by inspecting the log file. View the log file View the log file with reverse output View X lines from the log file View the log file since a given date * Create a log file with journalctl with the last 1000 lines Stop the Farmerbot You can stop the farmerbot with the following command: After stopping the farmerbot, any nodes in standby mode will remain in standby. To bring them online, use this command: Farmerbot Files Configuration File Template (config.yml) In this example, the farm ID is 1, we are setting the Farmerbot with 4 nodes and the node 1 never shuts down, we set a periodic wakeup at 1:00PM. Note that the timezone of the farmerbot will be the same as the time zone of the machine the farmerbot running inside. By default, a full VM on the TFGrid will be set in UTC. Note that if the user wants to include all the nodes within a farm, they can simply omit the section. In this case, all nodes of the farm will be included in the Farmerbot, as shown in the example below. If you are proceeding like this, make sure that you don't have any unused node IDs on your farm, as the Farmerbot would try to wake up nodes that aren't running anymore on the grid. For more information on the configuration file, refer to the Additional Information section. You can also consult the Farmerbot repository. Environment Variables File Template (.env) The network can be either , , or . The following example is with the main network. Running Multiple Farmerbots on the Same VM You can run multiple instances of the Farmerbot on the same VM. To do so, you need to create a directory for each instance of the Farmerbot. Each directory should contain the configuration and variables files as shown above. Once you've set the files, you can simply execute the Farmerbot command to start each bot in each directory. It's recommended to use distinct names for the directories and the services to easily differentiate the multiple farmerbots running on the VM. For example, the directory tree of two Farmerbots could be: For example, the services of two Farmerbots could be named as follows: Questions and Feedback This guide is meant to get you started quickly with the Farmerbot. That being said, there is a lot more that can be done with the Farmerbot. For more information on the Farmerbot, please refer to the Additional Information section. You can also consult the official Farmerbot Go repository. If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Farmers Chat on Telegram. > This is the new version of the Farmerbot written in Go. If you have any feedback and issues, please let us know!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farmerbot_intro/farmerbot_minting.md",
    "title": "Minting and the Farmerbot",
    "url": "/labs/documentation/farmers/farmerbot_intro/farmerbot_minting",
    "content": "Introduction We cover essential features of ThreeFold minting in relation with the Farmerbot. Minting Rules There are certain minting rules that are very important when it comes to farming on the ThreeFold Grid while using the Farmerbot. - The 3Node should wake up within 30 minutes of setting the power target to Up. - If the 3Node does not respect this rule, the 3Node won't mint for the whole minting period. - The 3Node must wake up at least once every 24 hours. - If the 3Node does not respect this rule, the 3Node won't mint for a 24-hour period. Disclaimer Please note that the Farmerbot is an optional feature developed by ThreeFold. Please use at your own risk. While ThreeFold will do its best to fix any issues with the Farmerbot and minting, if minting is affected by the use of the Farmerbot, ThreeFold cannot be held responsible.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farmerbot_intro/farmerbot_intro.md",
    "title": "Farmerbot",
    "url": "/labs/documentation/farmers/farmerbot_intro",
    "content": "The Farmerbot is a service that farmers can run in order to automatically manage the nodes in their farms. The behavior of the farmerbot is customizable through a YAML configuration file. We present here a quick guide to accompany farmers in setting up the Farmerbot. This guide contains the essential information to deploy the Farmerbot on the TFGrid. The other section contains additional information and details on the working of the Farmerbot. For more information on the Farmerbot, you can visit the Farmerbot repository on Github. You can also consult the Farmerbot FAQ if needed. TABLE OF CONTENTS - Quick Guide - Additional Information - Minting and the Farmerbot > Note: The Farmerbot is an optional feature developed by ThreeFold. Please use at your own risk. While ThreeFold will do its best to fix any issues with the Farmerbot and minting, if minting is affected by the use of the Farmerbot, ThreeFold cannot be held responsible.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/farmerbot_intro/farmerbot_information.md",
    "title": "Additional Information",
    "url": "/labs/documentation/farmers/farmerbot_intro/farmerbot_information",
    "content": "Introduction We present some general information concerning the Farmerbot as well as some advice for proper maintenance and troubleshooting. Additional Information We present additional information to complement the Quick Guide. General Considerations The Farmerbot doesn’t have to run physically in the farm since it instructs nodes over RMB to power on and off. The Farmerbot should be running at all time. The Farmerbot uses the nodes in the farm to send WOL packets to the node that needs to wakeup. For this reason, you need at least one node per farm to be powered on at all time. If you do not specify one node to be always on, the Farmerbot will randomly choose a node to stay on for each cycle. If all nodes in a subnet are powered off, there is no way other nodes in other subnets will be able to power them on again. Note that if you run the Farmerbot on your farm, it is logical to set the node running the Farmerbot as always on. In this case, it will always be this node that wakes up the other nodes. Currently, you can run only one Farmerbot per farm. Since you can only deploy one Farmerbot per farm, the Farmerbot can only run on one node at a time. Since you need at least one node to power up a second node, you can't use the Farmerbot with just one node. You need at least two 3Nodes in your farm to correctly use the Farmerbot. The Farmerbot gets its data completely from TFChain. This means that, unlike the previous version, the Farmerbot will not start all the nodes when it restarts. YAML Configuration File Template The quick guide showed a simple form of the YAML configuration file. Here are all the parameters that can be set for the configuration file. Supported Commands and Flags We present the different commands for the Farmerbot. Note that any argument containing spaces needs to be wrapped in quotes (e.g. mnemonic: \"word1 word2 ... word12\"). - : to start (power on) a node Where: - : to start (power on) all nodes in a farm Where: - : to get the current version of farmerbot Minimum specs to run the Farmerbot The Farmerbot can run on any computer/server, it could even run on a laptop, so to speak. As long as it has an internet connection, the Farmerbot will be working fine. The Farmerbot runs fine on a VM with a single vcore and 2GB of RAM. For the storage, you need to have room for Docker and its dependencies. Thus 1 or 2GB of free storage, with the OS already installed, should be sufficient. How to Prepare Your Farm for the Farmerbot with WOL ZOS can utilize 2 NIC's (Network Interface Card) of a node (server, workstation, desktop, ..). The first NIC on the motherboard will always be what we call the ZOS/dmz NIC, the second one is used for public config's (Gateway, public IP's for workloads, ..). So if you don't have public IP's in your farm, only the first NIC of your ZOS node will be used. This subnet is where the farmerbot operates. If you do have public IP's the same applies. Wake On LAN (WOL) is used to be able to boot (start) a ZOS node remotely that was shut down by the farmerbot. It works by sending what is called a 'magic packet' to the NIC MAC address of a ZOS node. If that NIC is setup correctly, aka 'listening' for the packet, the node will start up, post and boot ZOS. The farmerbot will keep a list of MAC addresses for nodes under it's management, so it knows where to send the packet if it's required. WOL Requirements WOL comes with a few requirements. We list them in the sections that follow. Enabling WOL in the BIOS Enable WOL in the BIOS of your ZOS node. A ZOS node must be capable of doing WOL. Have a look at your node hardware / BIOS manual. If so make sure to enable it in the BIOS! A bit of research will quickly tell you how to enable for your hardware. Some older motherboards do not support this, sometimes you can be lucky it does after a BIOS upgrade, but that is brand/model specific. Some examples: ! ! ZOS Nodes and NIC All your ZOS nodes and their first NIC (ZOS/dmz) should be in the same network subnet (also called network segment or broadcast domain). This requires some basic network knowledge. WOL packets can not be send across different subnets by default, it can but this requires specific configuration on the firewall that connects the two subnets. Though cross-subnet WOL is currently not supported by the farmerbot. A 'magic' WOL packet is sent only on networking layer 2 (L2 or the 'data link layer') based on MAC address. So not on L3 based on ip address. This is why all nodes that should be brought up via WOL, need to be in the same subnet. You can check if this is the case like this: if for example one node has the ip 192.168.0.20/24, then all other nodes should have an ip between 192.168.0.1 and 192.168.0.254. You can calculate subnet ranges easely here: https://www.tunnelsup.com/subnet-calculator/ So for the 192.168.0.0/24 example, you can see the range under 'Usable Host Range': ! NIC Firmware and WOL Some NIC's require WOL to be set on the NIC firmware. This is fully handled by ZOS. Every time ZOS boots it will enable WOL on links if they require it. So if a ZOS node then is added to a farmerbot, it will have WOL enabled on its NIC when it's turned off (by the farmerbot). Your farmerbot can be run on any system, including on a node. It doesn't have to be on the same network subnet as the nodes from the farm. The nodes of the farm on the other hand have to be in the same LAN. Don't hesitate to ask your technical questions here, we and the community will help you set things up! How to Move Your Farm to a Different Network Note that the Farmerbot is currently available for Dev Net, QA Net, Test Net and Main Net. Thus, it might not be necessary to move your farm to a different network. To move your farm to a different network, you need to create a new bootstrap image for the new network instead of your current network. You should also wipe your 3Nodes' disks before moving to a different network. To download the Zero-OS bootstrap image, go to the usual bootstrap link https://v3.bootstrap.grid.tf/ and select the network you want. ! Once you have your new bootstrap image for the new network, wipe your disks, insert the new bootstrap image and reboot the 3Node. The differences between power \"state\" and power \"target\" The target is what is set by the Farmerbot or can be set by the farmer manually on TF Chain. Power state can only be set by the node itself, in response to power targets it observes on chain. The differences between uptime, status and power state There are three distinctly named endpoints or fields that exist in the back end systems: Uptime number of seconds the node was up, as of it's last uptime report. This is the same on GraphQL and Grid Proxy. Status this is a field that only exists on the Grid Proxy, which corresponds to whether the node sent an uptime report within the last 40 minutes. Power state this is a field that only exists on GraphQL, and it's the self reported power state of the node. This only goes to \"down\" if the node shut itself down at request of the Farmerbot. The sequence of events for a node managed by the Farmerbot The sequence of events for a node managed by farmerbot should look like this: 1. Node is online. Target, state, and status are all \"Up\". 2. Farmerbot sets node's target to \"Down\". 3. Node sets its state to \"Down\" and then shuts off. 4. Three hours later the status switches to \"Down\" because the node hasn't been updated. 5. At periodic wake up time, Farmerbot sets node's target to \"Up\". 6. Node receives WoL packet and starts booting. 7. After boot is complete, node sets its state to \"Up\" and also submits uptime report. 8. updatedAt is updated with time that uptime report was received and status changes to \"Up\". At that point the cycle is completed and will repeat. The problematic states of a 3node set with the Farmerbot These are problematic states: 1. Target is set to \"Up\" but state and status are \"Down\" for longer than normal boot time (node isn't responding). 2. Target has been set to \"Down\" for longer than ~23.5 hours (farmerbot isn't working properly). 3. Target is \"Down\" but state and status are up (Zos is potentially not responding to power target correctly). 4. State is \"Up\" but status is \"Down\" (node shutdown unexpectedly). Using the ThreeFold Node Status Bot You can use the ThreeFold Node Status Bot to see the nodes' status in relation to the Farmerbot. CPU overprovisioning In the context of the ThreeFold grid, overprovisioning a CPU means that you can allocate more than one deployment to one CPU. In relation to the Farmerbot, you can set a value between 1 and 4 of how much the CPU can be overprovisioned. For example, a value of 2 means that the Farmerbot can allocate up to 2 deployments to one CPU. Seed phrase and HEX secret When setting up the Farmerbot, you will need to enter either the seed phrase or the HEX secret of your farm. For farms created in the TF Connect app, the HEX secret from the app is correct. For farms created in the TF Dashboard, you'll need the seed phrase provided when you created the account. Farmerbot directory tree As a general template, the directory tree of the Farmerbot will look like this: Dedicated Nodes and the Farmerbot Dedicated nodes are managed like any other node. Nodes marked as dedicated can only be rented completely. Whenever a user wants to rent a dedicated node the user sends a find_node job to the farmerbot. The farmerbot will find such a node, power it on if it is down and reserve the full node (for 30 minutes). The user can then proceed with creating a rent contract for that node. The farmerbot will get that information and keep that node powered on. It will no longer return that node as a possible node in future find_node jobs. Whenever the rent contract is canceled the farmerbot will notice this and shutdown the node if the resource usage allows it. Periodic wakeup The minimum period between two nodes to be waken up is currently 5 minutes. This means that every 5 minutes a new node wakes up during the periodic wakeup. Once all nodes are awaken, they all shut down at the same time, except the node that stays awaken to wake up the other during the next periodic wake. Time period between random wakeups and power target update The time period between a random wakeup and the moment the power target is set to down is between 30 minutes and one hour. Whenever a random wakeup is initiated, the Farmerbot will wait 30 minutes for the node to be up. Once the node is up, the Farmerbot will keep that node up for 30 minutes for the two following reasons: The node can send uptime report If the node was put online for a given user deployment, this time priod gives ample time for the user to deploy their workload. This ensures an optimal user experience and reliablity in 3Nodes' reports. Note that each node managed by the Farmerbot will randomly wakeup on average 10 times a month. Upgrade to the new Farmerbot If you are still running the old version of the Farmerbot (written in V), you can easily upgrade to the new Farmerbot (written in Go). You simply need to properly stop the old Farmerbot and then follow the new Farmerbot guide. Here are the steps to properly stop the old Farmerbot. Go to the diretory with the old Farmerbot docker files and fully stop the old Farmerbot: You should also make sure that there are no containers left from the previous runs. First, list all containers: Then delete the remaining containers: Once the old Farmerbot is properly stopped and deleted, follow the new Farmerbot guide. Set the Farmerbot without the mnemonics of a ThreeFold Dashboard account If you've lost the mnemonics associated with an account created on the ThreeFold Dashboard, it is still possible to set the Farmerbot with this account, but it's easier to simply create a new account and a new farm. Hopefully, the process is simple. - Create a new account on the Dashboard. This will generate a new twin. - Create a new farm and create new bootstrap images of your new farm. - Reboot your nodes with the new bootstrap images. This will automatically migrate your nodes with their current node IDs to the new farm. If you are using the Farmerbot, at this point, you will be able to set it with the mnemonics associated with the new farm. Maintenance See the power state and power target of 3Nodes With GraphQL You can use GraphQL to see the power state and power target of 3Nodes. To find all nodes within one farm, use the following line with the proper farm ID (here we set farm 1 as an example): To find a specific node, write the following with the proper nodeID (here we set node 655 as an example): With Grid Proxy You can also see the power state and power target of a 3Node with Grid proxy. Use the following URL while adjusting the proper node ID (here we set node 1 as an example): Then, in the response, you will see the following: If the state and target are not defined, the string will be empty. Change manually the power target of a 3Node You can use the Polkadot Extrinsics for this. Go to the Polkadot.js.org website's endpoint based on the network of your 3Node: Main net Test net Dev net QA net Make sure that Developer -> Extrinsics is selected Select your account Select tfgridModule Select changepowertarget(nodeId,powerTarget) Select the node you want to change the power target Select the power target (Up or Down) Click Submit Transaction at the bottom of the page Properly reboot the node if power target \"Down\" doesn't work Set the power target to \"Down\" manually Reboot the node and wait for it to set its power state to \"Down\" Once power target and state are both set to \"Down\", you can manually power off the node and reboot it Add a 3Node to a running Farmerbot If the Farmerbot is running and you want to add a new 3Node to your farm, you can proceed as follows. - Boot the new 3Node - Once the node is registered to the grid, a new node ID will be generated - If you set the section in the YAML configuration file - Add the new node ID to the configuration file - Restart the Farmerbot with the systemd command (in this example, the service is called ) Update the Farmerbot with a new release There are only a few steps needed to update the Farmerbot to a new release. - Download the latest ThreeFold tfgrid-sdk-go release and extract the farmerbot for your specific setup (here we use ). On the line , make sure to replace with the latest Farmerbot release. - Make a copy of the old version in case you need it in the future: - Move the new Farmerbot to the local bin - Restart the bot - Remove the tar file Troubleshooting Can't Find the Logs If you can't find the logs of the Farmerbot, make sure that you ran the bot before! Once the Farmerbot runs, it prints logs in a file called in the directory where it is running. You can try a search for any files under the home directory with the extension in case it's been moved: If you've deleted the log file while the bot is running, the bot won't recreated it. In this case, you will need to restart the bot, e.g. . The bot will then automatically create a log file. Questions and Feedback If you have questions concerning the Farmerbot, feel free to ask for help on the ThreeFold Forum or on the ThreeFold Farmer chat.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/networking_overview.md",
    "title": "Networking Overview",
    "url": "/labs/documentation/farmers/advanced_networking_toc/networking_overview",
    "content": "Introduction In this section, we provide advanced networking tips for farms with public IPs and in data centers (DC). The information available in this section is a combination of documentation from ThreeFold and tips and advice from community members who experienced first-hand the creation of ThreeFold farms that make use of public IPs block in data centers, personal data centers and home farms. A special thank you to those who contributed to improving the TFGrid and its knowledge base documentation. Possible Configurations For farmers who have public IPs, extra considerations are needed in setting up the network of the farm. We will go through the main considerations in this section. First, we must acknowledge that by the open-source and design of ThreeFold farming, a farm can range from a simple single 3Node setup, to a multi-rack farm hosted in a typical data center, and everything in-between, from the farmer experiencing with public IP blocks, to the entrepreneur who builds their own data center at home. There are thus many types of farms and each will have varying configurations. The simplest way to set up a farm has been extensively discussed in the first steps of creating a farm. But what are the other more complex configurations possible? Let's go through some of those: - Network link - DC provides a network link into the farmer's rack - Router and switch - The farmer provider their own router and switch - DC provides a router and/or switch in the rack - Gateway IP and public IP - Gateway IP provided is in the same range as the public IPs - Gateway IP is in a different range than the public IPs - Segmenting - Farmer segments the OOB (\"Zos\"/private) interfaces and the public interfaces into - separate VLANs, OR; - uses separate switches altogether - No segmenting is actually necessary, farmer connects all interfaces to one switch Overall Requirements There are overall requirements for any 3Node farm using IP address blocks in a data centere or at home: - There must be at least one interface that provide DHCP to each node - Public IPs must be routable from at least one interface Note that redundancy can help in avoiding single point of failure (SPOF). Notes and Warnings Management Interfaces You should make sure to never expose management interfaces to the public internet. Data Center Cable Management It's important to have a good cable management, especially if you are in a data center. Proper cable management will improve the cooling streams of your farm. There shouldn't be any cable in front of the fans. This way, your servers will last longer. If you want to patch a rack, you have to have all lenght of patch cables from 30cm to 3m. Also, try to keep the cables as short as possible. Arrange the cables in bundles of eight and lead them to the sides of the rack as much as possible for optimal airflow. Static IP Uplink If your DC uplink is established by simple static IP (which is the case in most DCs), there is a simple setup possible. Note that if you have to use PPPoE or pptp/L2TP (like a consumer internet connection at most homes), this would not work. If your WAN is established by static IP, you can simply attach the WAN uplink provided by the DC to one of the switches (and not to the WAN-side of your own router). Then, the WAN-side of the router needs to be attached to the switch too. By doing so, your nodes will be able to connect directly to the DC gateway, in the same way that the router is connecting its WAN-side to the gateway, without the public IP traffic being routed/bridged through the router (bypassing). With a network configured like this, it is absolutely not important on which ports you connect which NIC of your nodes. You can just randomly plug them anywhere. But there is one restriction: the DC uplink must use a static IP. Dynamic IP would also not work because you would then have two DHCP servers in the same physical network (the one from the DC and your own router). Testing the Setup Manual and automatic validation of the network of a farm are possible. More information on automatic validation will be added in the future. You can test the network of your farm manually by deploying a workload on your 3Nodes with either a gateway or a public IP reserved. Questions and Feedback If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Farmer Chat on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/network_setup.md",
    "title": "Network Setup",
    "url": "/labs/documentation/farmers/advanced_networking_toc/network_setup",
    "content": "Introduction 0-OS nodes participating in the Threefold grid, need connectivity of course. They need to be able to communicate over the Internet with each-other in order to do various things: - download its OS modules - perform OS module upgrades - register itself to the grid, and send regular updates about it's status - query the grid for tasks to execute - build and run the Overlay Network - download flists and the effective files to cache The nodes themselves can have connectivity in a few different ways: - Only have RFC1918 private addresses, connected to the Internet through NAT, NO IPv6 Mostly, these are single-NIC (Network card) machines that can host some workloads through the Overlay Network, but can't expose services directly. These are HIDDEN nodes, and are mostly booted with an USB stick from bootstrap.grid.tf . - Dual-stacked: having RFC1918 private IPv4 and public IPv6 , where the IPv6 addresses are received from a home router, but firewalled for outgoing traffic only. These nodes are effectively also HIDDEN - Nodes with 2 NICs, one that has effectively a NIC connected to a segment that has real public addresses (IPv4 and/or IPv6) and one NIC that is used for booting and local management. (OOB) (like in the drawing for farmer setup) For Farmers, we need to have Nodes to be reachable over IPv6, so that the nodes can: - expose services to be proxied into containers/vms - act as aggregating nodes for Overlay Networks for HIDDEN Nodes Some Nodes in Farms should also have a publicly reachable IPv4, to make sure that clients that only have IPv4 can effectively reach exposed services. But we need to stress the importance of IPv6 availability when you're running a multi-node farm in a datacentre: as the grid is boldly claiming to be a new Internet, we should make sure we adhere to the new protocols that are future-proof. Hence: IPv6 is the base, and IPv4 is just there to accomodate the transition. Nowadays, RIPE can't even hand out consecutive /22 IPv4 blocks any more for new LIRs, so you'll be bound to market to get IPv4, mostly at rates of 10-15 Euro per IP. Things tend to get costly that way. So anyway, IPv6 is not an afterthought in 0-OS, we're starting with it. Network Setup for Farmers This is a quick manual to what is needed for connecting a node with zero-OS V2.0 Step 1. Testing for IPv6 Availability in Your Location As descibed above the network in which the node is instaleld has to be IPv6 enabled. This is not an afterthought as we are building a new internet it has to ba based on the new and forward looking IP addressing scheme. This is something you have to investigate, negotiate with you connectivity provider. Many (but not all home connectivity products and certainly most datacenters can provide you with IPv6. There are many sources of infromation on how to test and check whether your connection is IPv6 enabled, here is a starting point Step 2. Choosing the Setup to Connect Your Nodes Once you have established that you have IPv6 enabled on the network you are about to deploy, you have to make sure that there is an IPv6 DHCP facility available. Zero-OS does not work with static IPv6 addresses (at this point in time). So you have choose and create one of the following setups: 2.1 Home Setup Use your (home) ISP router Ipv6 DHCP capabilities to provide (private) IPv6 addresses. The principle will work the same as for IPv4 home connections, everything happens enabled by Network Adress Translation (just like anything else that uses internet connectivity). This should be relatively straightforward if you have established that your conenction has IPv6 enabled. 2.2 Data Center/Advanced Setup In this situation there are many options on how to setup your node. This requires you as the expert to make a few decisions on how to connect what what the best setup is that you can support for the operaitonal time of your farm. The same basics principles apply: - You have to have a block of (public) IPv6 routed to your router, or you have to have your router setup to provide Network Address Translation (NAT) - You have to have a DHCP server in your network that manages and controls IPV6 ip adress leases. Depending on your specific setup you have this DHCP server manage a public IPv6 range which makes all nodes directly connected to the public internet or you have this DHCP server manage a private block of IPv6 addresses which makes all your nodes connect to the internet through NAT. As a farmer you are in charge of selecting and creating the appropriate network setup for your farm. General Notes The above setup will allows your node(s) to appear in explorer on the TFGrid and will allow you to earn farming tokens. At stated in the introduction ThreeFold is creating next generation internet capacity and therefore has IPv6 as it's base building block. Connecting to the current (dominant) IPv4 network happens for IT workloads through so called webgateways. As the word sais these are gateways that provide connectivity between the currenct leading IPv4 adressing scheme and IPv6. We have started a forum where people share their experiences and configurations. This will be work in progress and forever growing. IMPORTANT: You as a farmer do not need access to IPV4 to be able to rent capacity for IT workloads that need to be visible on IPV4, this is something that can happen elsewhere on the TFGrid.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/network_considerations.md",
    "title": "Network Considerations",
    "url": "/labs/documentation/farmers/advanced_networking_toc/network_considerations",
    "content": "Introduction Running ZOS on a node is just a matter of booting it with a USB stick, or with a dhcp/bootp/tftp server with the right configuration so that the node can start the OS. Once it starts booting, the OS detects the NICs, and starts the network configuration. A Node can only continue it's boot process till the end when it effectively has received an IP address and a route to the Internet. Without that, the Node will retry indefinitely to obtain Internet access and not finish it's startup. So a Node needs to be connected to a __wired__ network, providing a dhcp server and a default gateway to the Internet, be it NATed or plainly on the public network, where any route to the Internet, be it IPv4 or IPv6 or both is sufficient. For a node to have that ability to host user networks, we strongly advise to have a working IPv6 setup, as that is the primary IP stack we're using for the User Network's Mesh to function. Running ZOS (v2) at Home Running a ZOS Node at home is plain simple. Connect it to your router, plug it in the network, insert the preconfigured USB stick containing the bootloader and the , power it on. Running ZOS (v2) in a Multi-Node Farm in a DC Multi-Node Farms, where a farmer wants to host the nodes in a data centre, have basically the same simplicity, but the nodes can boot from a boot server that provides for DHCP, and also delivers the iPXE image to load, without the need for a USB stick in every Node. A boot server is not really necessary, but it helps! That server has a list of the MAC addresses of the nodes, and delivers the bootloader over PXE. The farmer is responsible to set-up the network, and configure the boot server. Necessities The Farmer needs to: - Obtain an IPv6 prefix allocation from the provider. A will do, that is publicly reachable, but a is advisable if the farmer wants to provide IPv6 transit for User Networks - If IPv6 is not an option, obtain an IPv4 subnet from the provider. At least one IPv4 address per node is needed, where all IP addresses are publicly reachable. - Have the Nodes connected on that public network with a switch so that all Nodes are publicly reachable. - In case of multiple NICS, also make sure his farm is properly registered in BCDB, so that the Node's public IP Addresses are registered. - Properly list the MAC addresses of the Nodes, and configure the DHCP server to provide for an IP address, and in case of multiple NICs also provide for private IP addresses over DHCP per Node. - Make sure that after first boot, the Nodes are reachable. IPv6 IPv6, although already a real protocol since '98, has seen reluctant adoption over the time it exists. That mostly because ISPs and Carriers were reluctant to deploy it, and not seeing the need since the advent of NAT and private IP space, giving the false impression of security. But this month (10/2019), RIPE sent a mail to all it's LIRs that the last consecutive /22 in IPv4 has been allocated. Needless to say, but that makes the transition to IPv6 in 2019 of utmost importance and necessity. Hence, ZOS starts with IPv6, and IPv4 is merely an afterthought ;-) So in a nutshell: we greatly encourage Farmers to have IPv6 on the Node's network. Routing/Firewalling Basically, the Nodes are self-protecting, in the sense that they provide no means at all to be accessed through listening processes at all. No service is active on the node itself, and User Networks function solely on an overlay. That also means that there is no need for a Farm admin to protect the Nodes from exterior access, albeit some DDoS protection might be a good idea. In the first phase we will still allow the Host OS (ZOS) to reply on ICMP ping requests, but that 'feature' might as well be blocked in the future, as once a Node is able to register itself, there is no real need to ever want to try to reach it. Multi-NIC Nodes Nodes that Farmers deploy are typically multi-NIC Nodes, where one (typically a 1GBit NIC) can be used for getting a proper DHCP server running from where the Nodes can boot, and one other NIC (1Gbit or even 10GBit), that then is used for transfers of User Data, so that there is a clean separation, and possible injections bogus data is not possible. That means that there would be two networks, either by different physical switches, or by port-based VLANs in the switch (if there is only one). - Management NICs The Management NIC will be used by ZOS to boot, and register itself to the GRID. Also, all communications from the Node to the Grid happens from there. - Public NICs Farmers and the TFGrid A Node, being part of the Grid, has no concept of 'Farmer'. The only relationship for a Node with a Farmer is the fact that that is registered 'somewhere (TM)', and that a such workloads on a Node will be remunerated with Tokens. For the rest, a Node is a wholly stand-alone thing that participates in the Grid. Where the underlay part of the wireguard interfaces get instantiated in the Public container (namespace), and once created these wireguard interfaces get sent into the User Network (Network Resource), where a user can then configure the interface a he sees fit. The router of the farmer fulfills 2 roles: - NAT everything in the OOB network to the outside, so that nodes can start and register themselves, as well get tasks to execute from the BCDB. - Route the assigned IPv4 subnet and IPv6 public prefix on the public segment, to which the public container is connected. As such, in case that the farmer wants to provide IPv4 public access for grid proxies, the node will need at least one (1) IPv4 address. It's free to the farmer to assign IPv4 addresses to only a part of the Nodes. On the other hand, it is quite important to have a proper IPv6 setup, because things will work out better. It's the Farmer's task to set up the Router and the switches. In a simpler setup (small number of nodes for instance), the farmer could setup a single switch and make 2 port-based VLANs to separate OOB and Public, or even wit single-nic nodes, just put them directly on the public segment, but then he will have to provide a DHCP server on the Public network.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/gateway_domain.md",
    "title": "Gateway Domain",
    "url": "/labs/documentation/farmers/advanced_networking_toc/gateway_domain",
    "content": "Gateway Domain Introduction We present how to set up a gateway domain to a node. Overview Farmers who offer gateway nodes can optionally attach a domain to their gateway. The node can then issue subdomains to workloads. If configured properly the node can also obtain a wildcard certificate from Let's Encrypt and then gateway subdomains terminating their TLS at the gateway will use this certificate. How to Proceed To set up a gateway domain, you need first to set up the DNS records and then set the public configuration on your node. If you do it the other way around (public config first then DNS records), the node will eventually retry obtaining the TLS certificate. Note that this could take up to a day or so. Rebooting the node should also help to accelerate the process. Considering this, it is advised to set the DNS records first. DNS Records Set up the following DNS records with the DNS registrar: Some DNS providers only allow NS records that start with the letters \"ns\". In this case the second form using the \"ns\" subdomains is fine—it will fall under the CNAME wildcard and ultimately resolve the the gateway's IP address. Public Config Gateway nodes are those that have a public config with at least a public IPv4 address specified. Adding a domain is optional, and can be done via the same process as documented here. How to Test Once your gateway domain is set up, you can test it. Note that only a subset of well-known gateways are available for use via the ThreeFold Dashboard. For this reason, to test your gateway domain, you can use different clients that interact with the grid, such as Terraform. We provide below a template example to test the gateway domain with Terraform.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/advanced_networking_toc.md",
    "title": "Advanced Networking",
    "url": "/labs/documentation/farmers/advanced_networking_toc",
    "content": "Welcome to the Advanced Networking section of the ThreeFold Manual. In this section, we provide advanced networking tips for farms with public IPs and in data centers (DC). We also cover the differences between IPv4 and IPv6 networking. TABLE OF CONTENTS - Networking Overview - Network Considerations - Network Setup - Gateway Domain - Web Gateway > Note: This documentation does not constitute a complete set of knowledge on setting farms with public IP addresses in a data center. Please make sure to do your own research and communicate with your data center and your Internet service provider for any additional information.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/web_gateway/web_gateway_hetzner.md",
    "title": "Web Gateway - Hetzner",
    "url": "/labs/documentation/farmers/advanced_networking_toc/web_gateway/web_gateway_hetzner",
    "content": "Web Gateway on Hetzner Cloud Overview This guide explains how to deploy a ThreeFold Zero-OS (ZOS) gateway inside a Hetzner Cloud VM. While this setup isn't recommended for general workloads or ThreeFold VMs, it's useful for gateway deployments due to Hetzner's reliable infrastructure and good bandwidth availability. Prerequisites - Hetzner Cloud account with completed KYC and payment method - Created Hetzner project - SSH key (optional but recommended) - Basic Linux command line knowledge Hardware Requirements - Minimum 4GB RAM - 100GB SSD storage - Public IPv4 address Step 1: Create Hetzner Cloud VM 1. Log into Hetzner Cloud Console 2. Create a new server with these specifications: - Location: Choose your preferred datacenter - OS Image: Any (will be overwritten) - Server Type: CPX21 (4GB RAM) or higher - Storage: - Primary disk: 80GB (default) - Additional volume: 100GB - Networking: - Enable Public IPv4 - IPv6 optional - File system: Any (will be overwritten) Step 2: Boot into Rescue Mode 1. Select the server in Hetzner Console 2. Click \"Rescue\" tab 3. Enable rescue mode and power cycle 4. Connect via SSH: Step 3: Prepare Boot Image 1. Clone the ThreeFold IPXE fork: 2. Install required package: 3. Build IPXE: Step 4: Generate Boot Script 1. Visit https://bootstrap.grid.tf 2. Enter Expert Mode 3. Configure: - Farm ID: Your farm ID - Network: mainnet - Extra kernel arguments: - Kernel: - Format: IPXE Boot Script 4. Generate IPXE boot script 5. Copy the generated URL and preprend Step 5: Create Boot Image 1. Download the boot script using the generated URL from above: 2. Create USB boot image: Step 6: Write Boot Image to Disk 1. Wipe the disks on the server (e.g. with ) 2. Write the boot image: 3. Reboot You can then go to the Hetzner console and see the Z-OS image loading. On this page, you can see the gateway IP address: Next Step Then you can follow the steps in the manual to properly set your public configuration and DNS. - Set Up the Public Config - Set Up a Gateway Domain",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/web_gateway/web_gateway_digital_ocean.md",
    "title": "Web Gateway - Digital Ocean",
    "url": "/labs/documentation/farmers/advanced_networking_toc/web_gateway/web_gateway_digital_ocean",
    "content": "Overview This guide demonstrates how to deploy a Zero-OS (ZOS) gateway node inside a DigitalOcean virtual machine. While this setup isn't ideal for running general workloads, it's suitable for creating gateway nodes to expose services running on bare metal Zero-OS nodes. Prerequisites - Digital Ocean account - SSH key pair - Domain name for gateway configuration - Minimum 4GB RAM droplet size - Additional block storage volume (100GB recommended) Step 1: Prepare Custom Image 1. Log into DigitalOcean dashboard 2. Navigate to Create > Droplets 3. Select Region and Datacenter 4. Make sure you have a volume 5. Click \"Custom Image\" (for THCP) 6. Click \"Upload Image\" 7. Select \"Import via URL\" and use the Ubuntu Cloud image URL: 8. Set distribution type as \"Ubuntu\" 9. Choose same region as before for step above 10 . Click \"Upload Image\" Then we go back to create the droplet now thatqw can select our custom image. Step 2: Create Droplet 1. Click \"Create Droplet\" 2. Select your region 3. Under \"Choose an image\", select \"Custom Images\" 4. Select your uploaded Ubuntu image 5. Choose droplet size: - Regular SSD (not Premium) - Minimum 4GB RAM 6. Add block storage: - 100GB volume - Select \"Manually Format & Mount\" 7. Add/select your SSH key 8. Create droplet Step 3: Prepare the server 1. SSH into your droplet: 1. Wipe the volume on the server (e.g. with ) Step 4: Generate Boot Script 1. Visit https://bootstrap.grid.tf 2. Enter Expert Mode 3. Configure: - Farm ID: Your farm ID - Network: mainnet - Extra kernel arguments: - Kernel: - Format: IPXE Boot Script 4. Generate IPXE boot script 5. Copy the generated URL and preprend Step 5: Set IPXE loader 2. Download Zero-OS bootstrap: 3. Extract the iPXE loader: Step 6: Configure GRUB 1. Edit the custom GRUB configuration: 2. Add the following entry: 3. Configure GRUB settings file: 4. Set the following parameters: 3. Configure GRUB default file: 4. Set the following parameters: 5. Update GRUB: Step 7: Configure Public Network - On Digital Ocean droplet page, click \"Access\" in the left sidebar and then \"Launch Recovery Console\" - Select Zos to see the Z-OS screen - On this page, you can see the gateway IP address: To see the node public IPV4 address and web gateway address, go to the Digital Ocean droplet page and click on the sidebar item \"Network\". Next Step Then you can follow the steps in the manual to properly set your public configuration and DNS. - Set Up the Public Config - Set Up a Gateway Domain",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/advanced_networking_toc/web_gateway/web_gateway.md",
    "title": "Web Gateway",
    "url": "/labs/documentation/farmers/advanced_networking_toc/web_gateway",
    "content": "Web Gateway ThreeFold Web Gateways solve a simple problem for users: if the workload doesn't have public IPv4 access, it's not reachable from the public internet. As a farmer, you can provide gateway services using your public IPv4 addresses, allowing users to deploy workloads on any 3Node while still making them publicly accessible. Web gateways are 3Nodes with public IPv4 addresses that act as reverse proxies, making any workload on any 3Node accessible from the regular internet - regardless of the workload's network setup. Key Benefits - Public Internet Access: Makes any workload accessible from the regular internet - Cost Efficiency: Only gateways need expensive public IPv4 addresses - Network Flexibility: Deploy workloads on any 3Node regardless of network setup - Global Availability: Farmers worldwide provide gateway services - Simple Setup: No complex networking configuration required",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/6_boot_3node.md",
    "title": "6. Boot the 3Node",
    "url": "/labs/documentation/farmers/3node_building/boot_3node",
    "content": "Introduction We explain how to boot the 3Node with the Zero-OS bootstrap image with a USB key. We also include optional advanced booting methods using OPNSense and pfSense. One of the great features of Zero-OS is that it can be completely run within the cache of your 3Node. Indeed, the booting device that contains your farm ID will connect to the ThreeFold Grid and download everything needed to run smoothly. There are many benefits in terms of security and protection of data that comes with this. 1. Booting the 3Node with Zero-OS To boot Zero-OS, insert your Zero-OS bootstrap image USB key, power on your computer and choose the right booting sequence and parameters (BIOS or UEFI) in your BIOS/UEFI settings. Then, restart the 3Node. Zero-OS should boot automatically. Note that you need an ethernet cable connected to your router or switch. You cannot farm on the ThreeFold Grid with Wifi. The first time you boot a 3Node, it will be written: “This node is not registered (farmer : NameOfFarm). This is normal. The Grid will create a node ID and you will be able to see it on screen. This can take a couple of minutes. If time passes (an hour and more) and the node does not get registered, in many cases, wiping the disks all over again and trying another reboot usually resolves this issue. Once you have your node ID, you can also go on the ThreeFold Dashboard to see your 3Node and verify that your 3Node is online. 2. Check the 3Node Status Online You can use the ThreeFold Node Finder to verify that your 3Node is online. ThreeFold Main Net Dashboard ThreeFold Test Net Dashboard ThreeFold Dev Net Dashboard ThreeFold QA Net Dashboard Check Node Health It is also possible to check the node health via the Node Finder. Read this section for more information. 3. Receive the Farming Rewards The farming reward will be sent once per month at the address you gave when you set up your farm. You can review this process here. That's it. You've now completed the necessary steps to build a DIY 3Node and to connect it to the Grid. Advanced Booting Methods (Optional) PXE Booting with OPNsense > This documentation comes from the amazing Network Booting Guide by @Fnelson on the ThreeFold Forum. Network booting ditches your standard boot USB with a local server. This TFTP server delivers your boot files to your 3 nodes. This can be useful in bigger home farms, but is all but mandatory in a data center setup. Network boot setup is quite easy and is centered about configuring a TFTP server. There are essentially 2 options for this, a small dedicated server such as a raspberry pi, or piggybacking on your pfsense or opnsense router. I would recommend the latter as it eliminates another piece of equipment and is probably more reliable. Setting Up Your Router to Allow Network Booting These steps are for OPNsense, PFsense may differ. These set are required regardless of where you have your TFTP server. > Services>DHCPv4>LAN>Network Booting Check “Enable Network Booting” Enter the IP address of your TFTP server under “Set next-server IP”. This may be the router’s IP or whatever device you are booting from. Enter “pxelinux.0” under Set default bios filename. Ignore the TFTP Server settings. TFTP server setup on a debian machine such as Ubuntu or Raspberry Pi > apt-get update > > apt-get install tftpd-hpa > > cd /srv/tftp/ > > wget http://ftp.nl.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/netboot.tar.gz > > wget http://ftp.nl.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/pxelinux.0 > > wget https://bootstrap.grid.tf/krn/prod/YOUR_FARM_ID --no-check-certificate > > mv YOUR_FARM_ID ipxe-prod.lkrn > > tar -xvzf netboot.tar.gz > > rm version.info netboot.tar.gz > > rm pxelinux.cfg/default > > chmod 777 /srv/tftp/pxelinux.cfg (optional if next step fails) > > echo 'default ipxe-prod.lkrn' >> pxelinux.cfg/default TFTP Server on a OPNsense router > Note: When using PFsense instead of OPNsense, steps are probably similar, but the directory or other small things may differ. The first step is to download the TFTP server plugin. Go to system>firmware>Status and check for updates, follow prompts to install. Then click the Plugins tab and search for tftp, install os-tftp. Once that is installed go to Services>TFTP (you may need to refresh page). Check the Enable box and input your router ip (normally 192.168.1.1). Click save. Turn on ssh for your router. In OPNsense it is System>Settings>Administration. Then check the Enable, root login, and password login. Hop over to Putty and connect to your router, normally 192.168.1.1. Login as root and input your password. Hit 8 to enter the shell. In OPNsense the tftp directory is /usr/local/tftp > cd /usr/local > > mkdir tftp > > cd ./tftp > > fetch http://ftp.nl.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/netboot.tar.gz > > fetch http://ftp.nl.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/pxelinux.0 > > fetch https://bootstrap.grid.tf/krn/prod/YOUR_FARM_ID > > mv YOUR_FARM_ID ipxe-prod.lkrn > > tar -xvzf netboot.tar.gz > > rm version.info netboot.tar.gz > > rm pxelinux.cfg/default > > echo 'default ipxe-prod.lkrn' >> pxelinux.cfg/default You can get out of shell by entering exit or just closing the window. 3Node Setup Set the server to BIOS boot and put PXE or network boot as the first choice. At least on Dell machines, make sure you have the network cable in plug 1 or it won’t boot. PXE Booting with pfSense > This documentation comes from the amazing Network Booting Guide by @TheCaptain on the ThreeFold Forum. These are the steps required to enable PXE booting on pfSense. This guide assumes you’ll be using the router as your PXE server; pfSense allows boot file uploads directly from its web GUI. Log into your pfSense instance Go to System>Package Manager Search and add ‘tftpd’ package under ‘Available Packages’ tab Go to Services>TFTP Server Under ‘Settings’ tab check enable and enter the router IP in TFTP Server Bind IP field Switch to ‘Files’ tab under Services>TFTP Server and upload your ‘ipxe-prod.efi’ file acquired from https://v3.bootstrap.grid.tf/ (second option labeled ‘EFI Kernel’) Go to Services>DHCP Server Under ‘Other Options’ section click Display Advance next to ‘TFTP’ and enter router IP Click Display Advance next to ‘Network Booting’ Check enable, enter router IP in Next Server field * Enter ipxe-prod.efi in Default BIOS file name field That's it! You’ll want to ensure your clients are configured with boot priority set as IPv4 in first spot. You might need to disable secure boot and enable legacy boot within BIOS. Booting Issues Multiple nodes can run with the same node ID This is a known issue and will be resolved once the TPM effort gets finalized.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/5_set_bios_uefi.md",
    "title": "5. Set the BIOS/UEFI",
    "url": "/labs/documentation/farmers/3node_building/set_bios_uefi",
    "content": "Introduction In this section, we explain how to properly set the BIOS/UEFI of your 3Node. If you do not want to read the whole page, make sure to read this section, which covers the basics. Note that the BIOS mode is usually needed for older hardware while the UEFI mode is usually needed for newer hardware, when it comes to booting properly Zero-OS on your DIY 3Node. If it doubt, start with UEFI and if it doesn't work as expected, try with BIOS. Before diving into the BIOS/UEFI settings, we will present some general considerations on Z-OS and DHCP. Z-OS and DHCP The operating system running on the 3Nodes is called Zero-OS (Z-OS). When it comes to setting the proper network for your 3Node farm, you must use DHCP since Z-OS is going to request an IP from the DHCP server if there's one present, and it won't get network connectivity if there's no DHCP. The Z-OS philosophy is to minimize configuration wherever possible, so there's nowhere to supply a static config when setting your 3Node network. Instead, the farmer is expected to provide DHCP. While it is possible to set fixed IP addresses with the DHCP for the 3Nodes, it is recommended to avoid this and just set the DHCP normally without fixed IP addresses. By setting DHCP in BIOS/UEFI, an IP address is automatically assigned by your router to your 3Node every time you boot it. Regular Computer and 3Node Network Differences For a regular computer (not a 3Node), if you want to use a static IP in a network with DHCP, you'd first turn off DHCP and then set the static IP to an IP address outside the DHCP range. That being said, with Z-OS, there's no option to turn off DHCP and there's nowhere to set a static IP, besides public config and remote management. In brief, the farmer must provide DHCP, either on a private or a public range, for the 3Node to boot. Static IP Addresses In the ThreeFold ecosystem, there are only two situations where you would work with static IP addresses: to set a public config to a 3Node or a farm, and to remotely manage your 3Nodes. Static IP and Public Config You can set a static IP for the public config of a 3Node or a farm. In this case, the 3Node takes information from TF Chain and uses it to set a static configuration on a NIC (or on a virtual NIC in the case of single NIC systems). Static IP and Remote Management You can set a static IP address to remotely manage a 3Node. The Essential Features of BIOS/UEFI for a 3Node There are certain things that you should make sure are set properly on your 3Node. As a general advice, you can Load Defaults (Settings) on your BIOS/UEFI, then make sure the options below are set properly. Choose the correct combination of BIOS/UEFI and bootstrap image on https://bootstrap.grid.tf/ Newer system will use UEFI Older system will use BIOS Hint: If your 3Node boot stops at Initializing Network Devices, try the other method (BIOS or UEFI) Set Multi-Processor and Hyperthreading at Enabled Sometimes, it will be written Virtual Cores, or Logical Cores. Set Virtualization at Enabled On Intel, it is denoted as CPU virtualization and on ASUS, it is denoted as SVM. Make sure virtualization is enabled and look for the precise terms in your specific BIOS/UEFI. Set AC Recovery at Last Power State This will make sure your 3Node restarts after losing power momentarily. It can have different names depending on the hardware, e.g. , check the hardware docs if needed. Select the proper Boot Sequence for the 3Node to boot Zero-OS from your bootstrap image e.g., if you have a USB key as a bootstrap image, select it in Boot Sequence Set Server Lookup Method (or the equivalent) at DNS. Only use Static IP if you know what you are doing. Your router will assign a dynamic IP address to your 3Node when it connects to Internet. Set Client Address Method (or the equivalent) at DHCP. Only use Static IP if you know what you are doing. Your router will assign a dynamic IP address to your 3Node when it connects to Internet. Secure Boot should be left at disabled Enable it if you know what you are doing. Otherwise, it should be set at disabled. Set Network Stack and PXE at Enabled. Note: Network Stack is a prerequisite for PXE. Note: In some cases, farmers had to disable Network State for the 3Node to properly boot, but in general enabling it is needed. Setting the Remote Management of a Server with a Static IP Address (Optional) Note from the list above that by enabling the DHCP and DNS in BIOS, dynamic IP addresses will be assigned to 3Nodes. This way, you do not need any specific port configuration when booting a 3Node. As long as the 3Node is connected to the Internet via an ethernet cable (WiFi is not supported), Zero-OS will be able to boot. By setting DHCP in BIOS, an IP address is automatically assigned to your 3Node every time you boot it. This section concerns 3Node servers with remote management functions and interfaces. You can set up a node through static routing at the router without DHCP by assigning the MAC address of the NIC to a IP address within your private subnet. This will give a static IP address to your 3Node. With a static IP address, you can then configure remote management on servers. For Dell, iDRAC is used, and for HP, ILO is used. Update the BIOS/UEFI firmware (Optional) Updating the BIOS firmware is not always necessary, but to do so can help prevent future errors and troubleshootings. Making sure the Date and Time are set correctly can also help the booting process. Note: updating the BIOS/UEFI firmware is optional, but recommended. Check the BIOS/UEFI version on Windows Hit Start, type in cmd in the search box and click on Command Prompt. Write the line > wmic bios get smbiosbiosversion This will give you the BIOS or UEFI firmware of your PC. Check the BIOS/UEFI version on Linux Simply type the following command > sudo dmidecode | less or this line: > sudo dmidecode -s bios-version Update the BIOS firmware 1. On the manufacturer's website, download the latest BIOS/UEFI firmware 2. Put the file on a USB flash drive (+unzip if necessary) 3. Restart your hardware and enter the BIOS/UEFI settings 4. Navigate the menus to update the BIOS/UEFI Additional Information BIOS/UEFI and Zero-OS Bootstrap Image Combinations To properly boot the Zero-OS image, you can either use an image made for a BIOS system or a UEFI system, this depends on your system. BIOS is older technology. It means Basic Input/Output System. UEFI is newer technology. It means Unified Extensible Firmware Interface*. BIOS/UEFI is, in a way, the link between the hardware and the software of your computer. In general, setting a 3Node is similar whether it is with a BIOS or UEFI system. The important is to choose the correct combination of boot media and boot mode (BIOS/UEFI). The bootstrap images are available here. The choices are: 1. EFI IMG - UEFI 2. EFI FILE - UEFI 3. iPXE - Boot from network 4. ISO - BIOS 5. USB - BIOS 6. LKRN - Boot from network Choices 1 and 2 are for UEFI (newer models). Choices 4 and 5 are for BIOS (newer models). Choices 3 and 6 are mainly for network boot. Refer to this previous section for more information on creating a Zero-OS bootstrap image. For information on how to boot Zero-OS with iPXE, read this section.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/4_wipe_all_disks.md",
    "title": "4. Wipe All the Disks",
    "url": "/labs/documentation/farmers/3node_building/wipe_all_disks",
    "content": "Introduction In this section, we explain how to wipe all the disks of your 3Node. Main Steps It only takes a few steps to wipe all the disks of a 3Node. 1. Create a Linux bootstrap image 2. Boot Linux in Try Mode 3. Wipe All the Disks ThreeFold runs its own OS, which is Zero-OS. You thus need to start with completely wiped disks. Note that ALL disks must be wiped. Otherwise, Zero-OS won't boot. An easy method is to download a Linux distribution and wipe the disks by running simple commands on the command-line interface. We will show how to do this with Ubuntu 24.04. LTS. This distribution is easy to use and it is thus a good introduction to Linux, in case you haven't yet explored this great operating system. 1. Create a Linux Bootstrap Image Download the Ubuntu 24.04 ISO file and burn the ISO image on a USB key. Make sure you have enough space on your USB key. You can also use other Linux Distro such as GRML, if you want a lighter ISO image. The process is the same as in section Burning the Bootstrap Image, but with the Linux ISO instead of the Zero-OS bootstrap image. BalenaEtcher is recommended as it formats your USB in the process, and it is available for MAC, Windows and Linux. 2. Boot Linux in Try Mode When you boot the Linux ISO image, make sure to choose Try Mode. Otherwise, it will install Linux on your computer. You do not want this. If you are using GRML, simply boot the USB key with the GRML bootstrap image, select GRML then press to enter the shell mode. Once this is done, the next steps are similar to the Ubuntu method: you will use and commands to identify and wipe the disks. 3. Use wipefs to Wipe All the Disks We will now use to remove all the data on the disks. > Important: Make sure that you have no important data on your disks, or make sure that you have copies of your disks before proceeding. Once Linux is booted, open the terminal. First, you can check the available disks by writing the command: The types of disk you can see are: - - SATA type - e.g. - Note: It can be an SSD disk or a USB key - - NVMe type - e.g. SATA Disks To wipe one specific SATA disk at a time, use the following command by replacing with the specific disk (e.g. ): To wipe all SATA disks (except the Linux distro USB disk you are currently using to run Ubuntu in Try Mode), take note of the Linux distro USB disk (e.g. ) and replace with it in the following line: NVMe Disks To wipe one specific NVMe disk at a time, use the following command by replacing with the specific disk (e.g. ) : To wipe all NVMe disks, use the following line:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/3node_building.md",
    "title": "Build a 3Node",
    "url": "/labs/documentation/farmers/3node_building",
    "content": "This section of the ThreeFold Farmers book presents the necessary and basic steps to build a DIY 3Node. For advanced farming information, such as GPU farming and room parameters, refer to the section Farming Optimization. TABLE OF CONTENTS - 1. Create a Farm - 2. Create a Zero-OS Bootstrap Image - 3. Set the Hardware - 4. Wipe All the Disks - 5. Set the BIOS/UEFI - 6. Boot the 3Node",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/3_set_hardware.md",
    "title": "3. Set the Hardware",
    "url": "/labs/documentation/farmers/3node_building/set_hardware",
    "content": "Introduction In this section, we cover the essential farming requirements when it comes to ThreeFold 3Node hardware. The essential information are available in the section 3Node Requirements Summary. Hardware Requirements You need a theoretical minimum of 500 GB of SSD and 2 GB of RAM on a mini pc, desktop or server. In short, for peak optimization, aim for 100 GB of SSD and 8GB of RAM per thread. (Thread is equivalent to virtual core or logical core.) If you are building an HDD-only node, read this section too. Also, TFDAO might implement a farming parameter based on passmark. From the ongoing discussion on the Forum, you should aim at a CPU mark of 1000 and above per core. > 3Node optimal farming hardware ratio -> 100 GB of SSD + 8 GB of RAM per Virtual Core Note that you can run Zero-OS on a Virtual Machine (VM), but you won't farm any TFT from this process. To farm TFT, Zero-OS needs to be on bare metal. Also, note that ThreeFold runs its own OS, which is Zero-OS. You thus need to start with completely wiped disks. You cannot farm TFT with Windows, Linux or MAC OS installed on your disks. If you need to use such OS temporarily, boot it in Try mode with a removable media (USB key). Note: Once you have the necessary hardware, you need to create a farm, create a Zero-OS bootstrap image, wipe your disks and set the BIOS/UEFI . Then you can boot your 3Node. If you are planning in building a farm in data center, read this section. 3Node Requirements Summary Any computer with the following specifications can be used as a DIY 3Node. - Any 64-bit hardware with an Intel or AMD processor chip. - Servers, desktops and mini computers type hardware are compatible. - A minimum of 500 GB of SSD and a bare minimum of 2 GB of RAM is required. - A ratio of 100GB of SSD and 8GB of RAM per thread is recommended. - A wired ethernet connection is highly recommended to maximize reliability and the ability to farm TFT. - A passmark of 1000 per core is recommended and will probably be a minimum requirement in the future. A passmark of 1000 per core is recommend and will be a minimum requirement in the future. This is not yet an official requirement. A 3Node with less than 1000 passmark per core of CPU would not be penalized if it is registered before the DAO settles the Passmark Question. > Note: It is also possible to build an HDD-only node. Read more about this here. Bandwidth Requirements A 3Node connects to the ThreeFold Grid and transfers information, whether it is in the form of compute, storage or network units (CU, SU, NU respectively). The more resources your 3Nodes offer to the Grid, the more bandwidth will be needed to transfer the additional information. In this section, we cover general guidelines to make sure you have enough bandwidth on the ThreeFold Grid when utilization will be happening. Note that the TFDAO will need to discuss and settle on clearer guidelines in the near future. For now, we propose those general guidelines. Being aware of these numbers as you build and scale your ThreeFold farm will set you in the proper direction. > The strict minimum for one Titan is 1 mbps of bandwidth. If you want to expand your ThreeFold farm, you should check the following to make sure your bandwidth will be sufficient when there will be Grid utilization. Bandwidth per 3Node Equation > min Bandwidth per 3Node (mbps) = 10 max((Total SSD TB / 1 TB),(Total Threads / 8 Threads),(Total GB / 64 GB)) + 10 (Total HDD TB / 2) This equation means that for each TB of HDD you need 5 mbps of bandwidth, and for each TB of SSD, 8 Threads and 64GB of RAM (whichever is higher), you need 10 mbps of bandwidth. This means a proper bandwidth for a Titan would be 10 mbps. As stated, 1 mbps is the strict minimum for one Titan. Link to Share Farming Setup If you want ideas and suggestions when it comes to building DIY 3Nodes, a good place to start is by checking what other farmers have built. This post on the Forum is a great start. The following section also contains great DIY 3Node ideas. Powering the 3Node Surge Protector A surge protector is highly recommended for your farm and your 3Nodes. This ensures your 3Nodes will not overcharge if a power surge happens. Whole-house surge protectors are also an option. Power Distribution Unit (PDU) A PDU (power distribution unit) is useful in big server settings in order to manage your wattage and keep track of your power consumption. It can also be used to power on and off nodes from a distance. In this case, a PDU with outlet switching capabilities allows remote power control of connected devices. To power on/off a computer remotely, first plug the computer's power cable into a switched outlet on the PDU. Then, connect the PDU to your network. Depending on the PDU's features, you can control the outlet remotely through various methods like a web interface, command-line interface, or dedicated software. By switching the designated outlet on or off via the chosen interface, you effectively power on or shut down the connected computer as if you were physically pressing the power button. A smart Wi-Fi plug can also be considered. Uninterrupted Power Supply (UPS) A UPS (uninterrupted power supply) is great for a 3Node if your power goes on and off frequently for short periods of time. This ensures your 3Node does not need to constantly reboot. If your electricity provider is very reliable, a UPS might not be needed, as the small downtime resulting from rare power outages with not exceed the DIY downtime limit. (95% uptime, 5% downtime = 36 hours per month.) Of course, for greater Grid utilization experience, considering adding a UPS to your ThreeFold farm can be highly beneficial. Note: Make sure to have AC Recovery Power set properly so your 3Node goes back online if power shutdowns momentarily. UPS are generally used in data center to make sure people have enough time to do a \"graceful\" shutdown of the units when power goes off. In the case of 3Nodes, they do not need graceful shutdowns as Zero-OS cannot lose data while functioning. The only way to power down a 3Node is simply to turn it off directly on the machine. Generator A generator will be needed for very large installation with or without an unsteady main power supply. Connecting the 3Node to the Internet As a general consideration, to connect a 3Node to the Internet, you must use an Ethernet cable and set DHCP as a network management protocol. Note that WiFi is not supported with ThreeFold farming. The general route from the 3Node to the Internet is the following: > 3Node -> Switch (optional) -> Router -> Modem Note that most home routers come with a built-in switch to provide multiple Ethernet ports. Using a stand-alone switch is optional, but can come quite handy when farmers have many 3Nodes. Z-OS and Switches Switches can be managed or unmanaged. Managed switches come with managed features made available to the user (typically more of such features on premium models). Z-OS can work with both types of switches. As long as there's a router reachable on the other end offering DHCP and a route to the public internet, it's not important what's in between. Generally speaking, switches are more like cables, just part of the pipes that connect devices in a network. We present a general overview of the two types of switches. Unmanaged Switches Unmanaged are the most common type and if someone just says \"switch\" this is probably what they mean. These switches just forward traffic along to its destination in a plug and play manner with no configuration. When a switch is connected to a router, you can think of the additional free ports on the switch as essentially just extra ports on the router. It's a way to expand the available ports and sometimes also avoid running multiple long cables. My nodes are far from my router, so I run a single long ethernet cable to a switch next to the nodes and then use multiple shorter cables to connect from the switch to the nodes. Managed Switches Managed switches have more capabilities than unmanaged switches and they are not very common in home settings (at least not as standalone units). Some of our farmers do use managed switches. These switches offer much more control and also require configuration. They can enable advanced features like virtual LANs to segment the network. Using Onboard Storage (3Node Servers) If your 3Node is based on a server, you can either use PCIe slots and PCIe-NVME adapter to install SSD NVME disk, or you can use the onboard storage. Usually, servers use RAID technology for onboard storage. RAID is a technology that has brought resilience and security to the IT industry. But it has some limitations that ThreeFold did not want to get stuck with. ThreeFold developed a different and more efficient way to store data reliably. This Quantum Safe Storage overcomes some of the shortfalls of RAID and is able to work over multiple nodes geographically spread on the TF Grid. This means that there is no RAID controller in between data storage and the TF Grid. For your 3Nodes, you want to bypass RAID in order for Zero-OS to have bare metals on the system. To use onboard storage on a server without RAID, you can 1. Re-flash the RAID card 2. Turn on HBA/non-RAID mode 3. Install a different card. For HP servers, you simply turn on the HBA mode (Host Bus Adapter). For Dell servers, you can either cross, or re-flash, the RAID controller with an “IT-mode-Firmware” (see this video) or get a DELL H310-controller (which has the non-RAID option). Otherwise, you can install a NVME SSD with a PCIe adaptor, and turn off the RAID controller. Once the disks are wiped, you can shutdown your 3Node and remove the Linux Bootstrap Image (USB key). Usually, there will be a message telling you when to do so. Upgrading a DIY 3Node It is sometimes necessary, and often useful, to upgrade your hardware. Type of upgrades possible - Add TBs of SSD/HDD - Add RAM - Change CPU - Change BIOS battery - Change fans For some DIY 3Node, no upgrades are required and this constitutes a good start if you want to explore DIY building without going into too much additional steps. For in-depth videos on how to upgrade mini-pc and rack servers, watch these great DIY videos.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/2_bootstrap_image.md",
    "title": "2. Create a Zero-OS Bootstrap Image",
    "url": "/labs/documentation/farmers/3node_building/bootstrap_image",
    "content": "Introduction We will now learn how to create a Zero-OS bootstrap image in order to boot a DIY 3Node. If you are building an HDD-only node, read this section too. Download the Zero-OS Bootstrap Image Let's download the Zero-OS bootstrap image via the Zero-OS Boot Generator: https://v3.bootstrap.grid.tf ! On the Boot Generator page, write your farm ID and choose mode to deploy on mainnet. ! Choose a bootstrap image format to download. If your system is new, choose an image format for a bootable kernel. You can use either or . - - Burn this image with BalenaEtcher. See below for more info. - - Format the USB to one partition and save the bootstrap image as . ! For older systems, choose an image format for a bootable kernel. - For BIOS CD/DVD, choose ISO. - For BIOS USB, choose USB. ! Next, we cover in details how to burn the bootstrap image. Burn the Zero-OS Bootstrap Image We show how to burn the Zero-OS bootstrap image. A quick and modern way is to burn the bootstrap image on a USB key. CD/DVD BIOS For the BIOS ISO image, download the file and burn it on a DVD. USB Key BIOS+UEFI There are many ways to burn the bootstrap image on a USB key. The easiest way that works for all operating systems is to use BalenaEtcher. We also provide other methods. BalenaEtcher (MAC, Linux, Windows) For MAC, Linux and Windows, you can use BalenaEtcher to flash the image on a USB key. This program also formats the USB in the process. This will work for the option EFI IMG for UEFI boot, and with the option USB for BIOS boot. Simply follow the steps presented to you and make sure you select the bootstrap image file you downloaded previously. > Note: There are alternatives to BalenaEtcher (e.g. usbimager for Windows, MAC and Linux, and Rufus for Windows). General Steps with BalenaEtcher: 1. Download BalenaEtcher 2. Open BalenaEtcher 3. Select Flash from file 4. Find and select the bootstrap image (with your correct farm ID) 5. Select Target (your USB key) 6. Select Flash That's it. Now you have a bootstrap image on Zero-OS as a bootable removable media device. CLI (Linux) For the BIOS USB and the UEFI EFI IMG images, you can do the following on Linux: Simply replace by the proper disk for your USB key. To see your disks, write in the command line. Make sure you select the proper disk! If you USB key is not new, make sure to format it before burning the Zero-OS image. Additional Information (Optional) We cover some additional information. Note that the following information is not needed for a basic farm setup. Expert Mode You can use the expert mode to generate specific Zero-OS bootstrap images. Along the basic options of the normal bootstrap mode, the expert mode allows farmers to add extra kernel arguments and decide which kernel to use from a vast list of Zero-OS kernels. Use a Specific Kernel You can use the expert mode to choose a specific kernel. Simply set the information you normally use and then select the proper kernel you need in the Kernel drop-down list. ! Disable GPU You can use the expert mode to disable GPU on your 3Node. ! In the expert mode of the Zero-OS Bootstrap generator, fill in the following information: - Farmer ID - Your current farm ID - Network - The network of your farm - Extra kernel arguments - - Kernel - Leave the default kernel - Format - Choose a bootstrap image format - Click on Generate - Click on Download Bootstrap Image URL In both normal and expert mode, you can use the generated URL to quickly download a Zero-OS bootstrap image based on your farm specific setup. Using URLs can be a very quick and efficient way to create new bootstrap images once your familiar with the Zero-OS bootstrap URL template and some potential varations. Note that the arguments and the kernel are optional. The following content will provide some examples. Zeros-OS Bootstrapping On the main page, once you've written your farm ID and selected a network, you can copy the generated URL of any given image format. For example, the following URL is a download link to an EFI IMG of the Zero-OS bootstrap image of farm 1 on the main TFGrid v3 network: Zeros-OS Expert Bootstrap You can use the generated sublink at the Generate step of the expert mode to get a quick URL to download your bootstrap image. - After setting the parameters and arguments, click on Generate - Add the Target content to the following URL - For example, the following URL sets an ipxe script of the Zero-OS bootstrap of farm 1 on the main TFGrid v3 network, with the disable-gpu function enabled as an extra kernel argument and a specific kernel: -",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/farmers/3node_building/1_create_farm.md",
    "title": "1. Create a Farm",
    "url": "/labs/documentation/farmers/3node_building/create_farm",
    "content": "Introduction We cover the basic steps to create a farm with the ThreeFold Connect app. We also show how to connect the farm to the ThreeFold Dashboard. Create a ThreeFold Connect App Account Follow the steps in the TF Connect App section to create an account. Create a Farm Open the TF Connect app, go to Farming and click on the plus button to create a farm. Choose a farm name and select a wallet then click . ! Import the Farm on the Dashboard (Optional) To import the farm on the Dashboard, go to the farming section of the TF Connect App, click on the farm then copy the . ! Use this secret to import a wallet on the ThreeFold Dashboard. Consult the ThreeFold Dashboard section for more information on the dashboard. Farming Rewards Distribution Farming rewards will be sent to your farming wallet around the 8th of each month. This can vary depending on the situation. The minting is done automatically by code and verified by humans as a double check.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/developers.md",
    "title": "Developers",
    "url": "/labs/documentation/developers",
    "content": "ThreeFold Developers This section covers all practical tutorials on how to develop and build on the ThreeFold Grid. For complementary information on the technology developed by ThreeFold, refer to the Technology section. TABLE OF CONTENTS - Javascript Client - Go Client - TFCMD - TFROBOT - ThreeFold Chain - Grid Proxy - Flist - Internals - Grid Deployment",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfrobot/tfrobot_installation.md",
    "title": "Installation",
    "url": "/labs/documentation/developers/tfrobot/tfrobot_installation",
    "content": "Introduction This section covers the basics on how to install TFROBOT (). TFROBOT is available as binaries. Make sure to download the latest release and to stay up to date with new releases. Mycelium Network Note that you can use the Mycelium network to connect to your deployments. To do so, make sure that the Mycelium network is properly set up for the deployments. You can consult the different examples that include the Mycelium network to understand this further. Installation To install TFROBOT, simply download and extract the TFROBOT binaries to your path. - Create a new directory for - Download latest release from releases - - Extract the binaries - - Move to any directory:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfrobot/tfrobot_deploy.md",
    "title": "Deployment",
    "url": "/labs/documentation/developers/tfrobot/tfrobot_deploy",
    "content": "Introduction We present how to deploy workloads on the ThreeFold Grid using TFROBOT. Prerequisites To deploy workloads on the TFGrid with TFROBOT, you first need to install TFROBOT on your machine and create a configuration file. Deploy Workloads Once you've installed TFROBOT and created a configuration file, you can deploy on the TFGrid with the following command. Make sure to indicate the path to your configuration file. Delete Workloads To delete the contracts, you can use the following line. Make sure to indicate the path to your configuration file. Logs To ensure a complete log history, append to the command being executed. Using TFCMD with TFROBOT Get Contracts The TFCMD tool works well with TFROBOT, as it can be used to query the TFGrid, for example you can see the contracts created by TFROBOT by running the TFCMD command, taking into consideration that you are using the same mnemonics and are on the same network: For more information on TFCMD, read the documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfrobot/tfrobot_configurations.md",
    "title": "Supported Configurations",
    "url": "/labs/documentation/developers/tfrobot/tfrobot_configurations",
    "content": "Introduction When deploying with TFROBOT, you can set different configurations allowing for personalized deployments. Config File | Field | Description| Supported Values| | :---: | :---: | :---: | | node_group | description of all resources needed for each node_group | list of structs of type node_group | | vms | description of resources needed for deploying groups of vms belong to node_group | list of structs of type vms | | ssh_keys | map of ssh keys with key=name and value=the actual ssh key | map of string to string | | mnemonic | mnemonic of the user | should be valid mnemonic | | network | valid network of ThreeFold Grid networks | main, test, qa, dev | | max_retries | times of retries of failed node groups | positive integer | Node Group | Field | Description| Supported Values| | :---: | :---: | :---: | | name | name of node_group | node group name should be unique | | nodes_count | number of nodes in node group| nonzero positive integer | | free_cpu | number of cpu of node | nonzero positive integer max = 32 | | free_mru | free memory in the node in GB | min = 0.25, max = 256 | | free_ssd | free ssd storage in the node in GB | positive integer value | | free_hdd | free hdd storage in the node in GB | positive integer value | | dedicated | are nodes dedicated | or | | public_ip4 | should the nodes have free ip v4 | or | | public_ip6 | should the nodes have free ip v6 | or | | certified | should the nodes be certified(if false the nodes could be certified or DIY) | or | | region | region could be the name of the continents the nodes are located in | africa, americas, antarctic, antarctic ocean, asia, europe, oceania, polar | Vms Groups | Field | Description| Supported Values| | :---: | :---: | :---: | | name | name of vm group | string value with no special characters | | vms_count | number of vms in vm group| nonzero positive integer | | node_group | name of node_group the vm belongs to | should be defined in node_groups | | cpu | number of cpu for vm | nonzero positive integer max = 32 | | mem | free memory in the vm in GB | min = 0.25, max 256 | | planetary | should the vm have yggdrasil ip | or | | public_ip4 | should the vm have free ip v4 | or | | public_ip6 | should the vm have free ip v6 | or | | mycelium_ip | should the vm have mycelium ip | or | | flist | should be a link to valid flist | valid flist url with or extension | | entry_point | entry point of the flist | path to the entry point in the flist | | ssh_key | key of ssh key defined in the ssh_keys map | should be valid ssh_key defined in the ssh_keys map | | env_vars | map of env vars | map of type string to string | | ssd | list of disks | should be of type disk| | root_size | root size in GB | 0 for default root size, max 10TB | Disk | Field | Description| Supported Values| | :---: | :---: | :---: | | size | disk size in GB| positive integer min = 15 | | mount_point | disk mount point | path to mountpoint |",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfrobot/tfrobot_config.md",
    "title": "Configuration File",
    "url": "/labs/documentation/developers/tfrobot/tfrobot_config",
    "content": "Introduction To use TFROBOT, the user needs to create a YAML or a JSON configuration file that will contain the mass deployment information, such as the groups information, number of VMs to deploy how, the compute, storage and network resources needed, as well as the user's credentials, such as the SSH public key, the network (main, test, dev, qa) and the TFChain mnemonics. Examples We present here a configuration file example that deploys 3 nodes with 2 vcores, 16GB of RAM, 150GB of SSD, 50GB of HDD and a Mycelium address. The same deployment is shown with a YAML file and with a JSON file. Parsing is based on file extension, TFROBOT will use JSON format if the file has a JSON extension and YAML format otherwise. You can use this example for guidance, and make sure to replace placeholders and adapt the groups based on your actual project details. To the minimum, should be replaced by the user SSH public key and should be replaced by the user mnemonics. Note that if no IPs are specified as true (IPv4 or IPv6), an Yggdrasil IP address will automatically be assigned to the VM, as at least one IP should be set to allow an SSH connection to the VM. YAML Example JSON Example Create a Configuration File You can start with the example above and adjust for your specific deployment needs. - Create directory - Create configuration file and adjust with the provided example above Once you've set your configuration file, all that's left is to deploy on the TFGrid. Read the next section for more information on how to deploy with TFROBOT.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfrobot/tfrobot_commands_flags.md",
    "title": "Commands and Flags",
    "url": "/labs/documentation/developers/tfrobot/tfrobot_commands_flags",
    "content": "Introduction We present the various commands, subcommands and flags available with TFROBOT. Commands You can run the command at any time to access the help section. This will also display the available commands. | Command | Description | | ---------- | ---------------------------------------------------------- | | completion | Generate the autocompletion script for the specified shell | | help | Help about any command | | version | Get latest build tag | Use for more information about a command. Subcommands You can use subcommands to deploy and cancel workloads on the TFGrid. - deploy: used to mass deploy groups of vms with specific configurations - cancel: used to cancel all vms deployed using specific configurations - load: used to load all vms deployed using specific configurations Flags You can use different flags to configure your deployment. | Flag | Usage | | :---: | :---: | | -c | used to specify path to configuration file | | -o | used to specify path to output file to store the output info in | | -d | allow debug logs to appear in the output logs | | -h | help | > Note: Make sure to use every flag once. If the flag is repeated, it will ignore all values and take the last value of the flag.`",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfrobot/tfrobot.md",
    "title": "TFROBOT",
    "url": "/labs/documentation/developers/tfrobot",
    "content": "TFROBOT () is a command line interface tool that offers simultaneous mass deployment of groups of VMs on the ThreeFold Grid, with support of multiple retries for failed deployments, and customizable configurations, where you can define node groups, VMs groups and other configurations through a YAML or a JSON file. Consult the ThreeFoldTech TFROBOT repository for the latest updates and read the basics to get up to speed if needed. TABLE OF CONTENTS - Installation - Configuration File - Deployment - Commands and Flags - Supported Configurations",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_zdbs.md",
    "title": "Deploy ZDB",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_zdbs",
    "content": "Introduction In this section, we explore how to use ZDBs related commands using to interact with the TFGrid. Deploy Required Flags - project_name: project name for the ZDBs deployment also used for canceling the deployment. must be unique. - size: HDD of zdb in GB. Optional Flags - node: node id zdbs should be deployed on. - farm: farm id zdbs should be deployed on, if set choose available node from farm that fits zdbs deployment specs (default 1). note: node and farm flags cannot be set both. - count: count of zdbs to be deployed (default 1). - names: a slice of names for the number of ZDBs. - password: password for ZDBs deployed - description: description for your ZDBs, it's optional. - mode: the enumeration of the modes 0-db can operate in (default user). - public: if zdb gets a public ip6 (default false). Example: - Deploying ZDBs Get is the name of the deployment specified in while deploying using tfcmd. Example: Cancel is the name of the deployment specified in while deploying using tfcmd. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_vm.md",
    "title": "Deploy a VM",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_vm",
    "content": "Introduction In this section, we explore how to deploy a virtual machine (VM) on the ThreeFold Grid using . Deploy You can deploy a VM with using the following template accompanied by required and optional flags: Flags When you use , there are two required flags ( and ), while the other remaining flags are optional. Using such optional flags can be used to deploy a VM with a GPU for example or to set an IPv6 address and much more. Required Flags - name: name for the VM deployment also used for canceling the deployment. The name must be unique. - ssh: path to public ssh key to set in the VM. Optional Flags - node: node ID the VM should be deployed on. - farm: farm ID the VM should be deployed on, if set choose available node from farm that fits vm specs (default ). Note: node and farm flags cannot both be set. - cpu: number of cpu units (default ). - disk: size of disk in GB mounted on . If not set, no disk workload is made. - entrypoint: entrypoint for the VM FList (default ). Note: setting this without the flist option will fail. - flist: FList used in the VM (default ). Note: setting this without the entrypoint option will fail. - ipv4: assign public ipv4 for the VM (default ). - ipv6: assign public ipv6 for the VM (default ). - memory: memory size in GB (default ). - rootfs: root filesystem size in GB (default ). - ygg: assign yggdrasil ip for the VM (default ). - mycelium: assign Mycelium ip for the VM (default ). - gpus: assign a list of gpus' IDs to the VM. Note: setting this without the node option will fail. Examples We present simple examples on how to deploy a virtual machine with or without a GPU using . Deploy a VM without GPU Deploy a VM with GPU Get To get the VM, use the following template: Make sure to replace with the name of the VM specified using . Get Example In the following example, the name of the deployment to get is . Cancel To cancel your VM deployment, use the following template: Make sure to replace with the name of the deployment specified using . Cancel Example In the following example, the name of the deployment to cancel is .",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_kubernetes.md",
    "title": "Deploy Kubernetes",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_kubernetes",
    "content": "Introduction In this section, we explain how to deploy Kubernetes workloads on the TFGrid using . Deploy Required Flags - name: name for the master node deployment also used for canceling the cluster deployment. must be unique. - ssh: path to public ssh key to set in the master node. Optional Flags - master-node: node id master should be deployed on. - master-farm: farm id master should be deployed on, if set choose available node from farm that fits master specs (default 1). note: master-node and master-farm flags cannot be set both. - workers-nodes: array of nodes ids workers should be deployed on and the remaining unassigned workers will be randomly assigned to nodes that meet the specifications. - workers-farm: farm id workers should be deployed on, if set choose available node from farm that fits master specs (default 1). note: workers-nodes and workers-farm flags cannot be set both. - ipv4: assign public ipv4 for master node (default false). - ipv6: assign public ipv6 for master node (default false). - ygg: assign yggdrasil ip for master node (default true). - mycelium: assign mycelium ip for master node (default true). - master-cpu: number of cpu units for master node (default 1). - master-memory: master node memory size in GB (default 1). - master-disk: master node disk size in GB (default 2). - workers-number: number of workers nodes (default 0). - workers-ipv4: assign public ipv4 for each worker node (default false) - workers-ipv6: assign public ipv6 for each worker node (default false) - workers-ygg: assign yggdrasil ip for each worker node (default true) - workers-mycelium: assign mycelium ip for each worker node (default true) - workers-cpu: number of cpu units for each worker node (default 1). - workers-memory: memory size for each worker node in GB (default 1). - workers-disk: disk size in GB for each worker node (default 2). Example: Get kubernetes is the name used when deploying kubernetes cluster using tfcmd. Example: Cancel deployment-name is the name of the deployment specified in while deploying using tfcmd. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_gateway_fqdn.md",
    "title": "Gateway FQDN",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_gateway_fqdn",
    "content": "Introduction We explain how to use gateway fully qualified domain names on the TFGrid using . Deploy Required Flags - name: name for the gateway deployment also used for canceling the deployment. must be unique. - node: node id to deploy gateway on. - backends: list of backends the gateway will forward requests to. - fqdn: FQDN pointing to the specified node. Optional Flags -tls: add TLS passthrough option (default false). Example: Get gateway is the name used when deploying gateway-fqdn using tfcmd. Example: Cancel deployment-name is the name of the deployment specified in while deploying using tfcmd. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_basics.md",
    "title": "Getting Started",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_basics",
    "content": "Introduction This section covers the basics on how to set up and use TFCMD (). TFCMD is available as binaries. Make sure to download the latest release and to stay up to date with new releases. Mycelium Network Note that you can use the Mycelium network to connect to your deployments. A Mycelium IP is assigned by default to TFCMD deployments. You can consult the different examples to understand this further. Installation An easy way to use TFCMD is to download and extract the TFCMD binaries to your path. - Download latest release from releases - - Extract the binaries - - Move to any directory: Login Before interacting with Threefold Grid with you should login with your mnemonics and specify the grid network: This validates your mnemonics and store your mnemonics and network to your default configuration dir. Check UserConfigDir() for your default configuration directory. Commands You can run the command at any time to access the help section. This will also display the available commands. | Command | Description | | ---------- | ---------------------------------------------------------- | | cancel | Cancel resources on Threefold grid | | completion | Generate the autocompletion script for the specified shell | | deploy | Deploy resources to Threefold grid | | get | Get a deployed resource from Threefold grid | | help | Help about any command | | login | Login with mnemonics to a grid network | | version | Get latest build tag | Using TFCMD Once you've logged in, you can use commands to deploy workloads on the TFGrid. Read the next sections for more information on different types of workloads available with TFCMD.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd.md",
    "title": "TFCMD",
    "url": "/labs/documentation/developers/tfcmd",
    "content": "TFCMD () is a command line interface to interact and develop on Threefold Grid using command line. Consult the ThreeFoldTech TFCMD repository for the latest updates. Make sure to read the basics. TABLE OF CONTENTS - Getting Started - Deploy a VM - Deploy Kubernetes - Deploy ZDB - Gateway FQDN - Gateway Name - Contracts",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_gateway_name/tfcmd_gateway_name.md",
    "title": "Gateway Name",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_gateway_name",
    "content": "Introduction We explain how to use gateway names on the TFGrid using . Deploy Required Flags - name: name for the gateway deployment also used for canceling the deployment. must be unique. - backends: list of backends the gateway will forward requests to. Optional Flags - node: node id gateway should be deployed on. - farm: farm id gateway should be deployed on, if set choose available node from farm that fits vm specs (default 1). note: node and farm flags cannot be set both. -tls: add TLS passthrough option (default false). Example: Get gateway is the name used when deploying gateway-name using tfcmd. Example: Cancel deployment-name is the name of the deployment specified in while deploying using tfcmd. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfcmd/tfcmd_gateway_name/tfcmd_contracts.md",
    "title": "Contracts",
    "url": "/labs/documentation/developers/tfcmd/tfcmd_gateway_name/tfcmd_contracts",
    "content": "Introduction We explain how to handle contracts on the TFGrid with . Get Get Contracts Get all contracts Example: Get Contract Get specific contract Example: Cancel Cancel specified contracts or all contracts. Example: Optional Flags - all: cancel all twin's contracts. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfchain/tfchain_solution_provider.md",
    "title": "Solution Provider",
    "url": "/labs/documentation/developers/tfchain/tfchain_solution_provider",
    "content": "Introduction > Note: While the solution provider program is still active, the plan is to discontinue the program in the near future. We will update the manual as we get more information. We currently do not accept new solution providers. A \"solution\" is something running on the grid, created by a community member. This can be brought forward to the council, who can vote on it to recognize it as a solution. On contract creation, a recognized solution can be referenced, in which case part of the payment goes toward the address coupled to the solution. On chain a solution looks as follows: - Description (should be some text, limited in length. Limit should be rather low, if a longer one is desired a link can be inserted. 160 characters should be enough imo). - Up to 5 payout addresses, each with a payout percentage. This is the percentage of the payout received by the associated address. The amount is deducted from the payout to the treasury and specified as percentage of the total contract cost. As such, the sum of these percentages can never exceed 50%. If this value is not 50%, the remainder is payed to the treasure. Example: 10% payout percentage to addr 1, 5% payout to addr 2. This means 15% goes to the 2 listed addresses combined and 35% goes to the treasury (instead of usual 50). Rest remains as is. If the cost would be 10TFT, 1TFT goes to the address1, 0.5TFT goes to address 2, 3.5TFT goes to the treasury, instead of the default 5TFT to the treasury - A unique code. This code is used to link a solution to the contract (numeric ID). This means contracts need to carry an optional solution code. If the code is not specified (default), the 50% goes entirely to the treasury (as is always the case today). A solution can be created by calling the extrinsic -\\> with parameters: - description - link (to website) - list of providers Provider: - who (account id) - take (amount of take this account should get) specified as an integer of max 50. example: 25 A forum post should be created with the details of the created solution provider, the dao can vote to approve this or not. If the solution provider get's approved, it can be referenced on contract creation. Note that a solution can be deleted. In this case, existing contracts should fall back to the default behavior (i.e. if code not found -> default). Changes to Contract Creation When creating a contract, a can be passed. An error will be returned if an invalid or non-approved solution provider id is passed. Creating a Provider Creating a provider is as easy as going to the polkadotJS UI (Currently only on devnet) Select module -\\> Fill in all the details, you can specify up to 5 target accounts which can have a take of the TFT generated from being a provider. Up to a total maximum of 50%. should be specified as a integer, example (). Once this object is created, a forum post should be created here: https://forum.threefold.io/ ! Council needs to approve a provider before it can be used First propose the solution to be approved: ! After submission it should like like this: ! Now another member of the council needs to vote: ! After enough votes are reached, it can be closed: ! If the close was executed without error the solution should be approved and ready to be used Query the solution: -\\> -\\> ! Now the solution provider can be referenced on contract creation: !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfchain/tfchain_external_service_contract.md",
    "title": "External Service Contract",
    "url": "/labs/documentation/developers/tfchain/tfchain_external_service_contract",
    "content": "Introduction It is now possible to create a generic contract between two TFChain users (without restriction of account type) for some external service and bill for it. The initial scenario is when two parties, a service provider and a consumer of the service, want to use TFChain to automatically handle the billing/payment process for an agreement (in TFT) they want to make for a service which is external from the grid. This is actually a more direct and generic feature if we compare to the initial rewarding model where a service provider (or solution provider) is receiving TFT from a rewards distribution process, linked to a node contract and based on a cloud capacity consumption, which follows specific billing rules. The initial requirements are: - Both service and consumer need to have their respective twin created on TFChain - Consumer account needs to be funded (lack of funds will simply result in the contract cancelation while billed) In the following steps we detail the sequence of extrinsics that need to be called in TFChain Polkadot portal for setting up and executing such contract. Make sure to use right links depending on the targeted network. Step 1: Create contract / Get unique ID Create service contract The contract creation can be initiated by both service or consumer. In TFChain Polkadot portal, the one who iniciates the contract should go to -> -> -> , using the account he pretends to use in the contract, and select the corresponding service and consumer accounts before submiting the transaction. ! Once executed the service contract is between the two parties and a unique ID is generated. Last service contract ID To get the last generated service contract ID go to -> -> -> . ! Parse service contract To get the corresponding contract details, go to -> -> -> and provide the contract ID. You should see the following details: ! Check if the contract fields are correct, especially the twin ID of both service and consumer, to be sure you get the right contract ID, referenced as . Wrong contract ID ? If twin IDs are wrong on service contract fields it means the contract does not correspond to the last created contract. In this case parse the last contracts on stack by decreasing and try to identify the right one; or the contract was simply not created so you should repeat the creation process and evaluate the error log. Step 2: Fill contract Once created, the service contract must be filled with its relative fees: - is the constant \"per hour\" price (in TFT) for the service. - is the maximum \"per hour\" amount (in TFT) that can be billed extra. To provide these values (only service can set fees), go to -> -> -> specifying . ! Some metadata (the description of the service for example) must be filled in a similar way ( -> -> -> ). In this case service or consumer can set metadata. ! The agreement will be automatically considered when both metadata and fees are set ( not empty and greater than zero). Note that whenever this condition is not reached both extrinsics can still be called to modify agreement. You can check the contract status at each step of flow by parsing it as shown here. Step 3: Both parties approve contract Now having the agreement ready the contract can be submited for approval. To approve the agreement, go to -> -> -> specifying . ! To reject the agreement, go to -> -> -> specifying . ! The contract needs to be explicitly by both service and consumer to be ready for billing. Before reaching this state, if one of the parties decides to call the rejection extrinsic, it will instantly lead to the cancelation of the contract (and its permanent removal). Step 4: Bill for the service Once the contract is accepted by both it can be billed. Send bill to consumer Only the service can bill the consumer going to -> -> -> specifying and billing informations such as and some . ! Billing frequency ⚠️ Important: because a service should not charge the user if it doesn't work, it is required that bills be send in less than 1 hour intervals. Any bigger interval will result in a bounded 1 hour bill (in other words, extra time will not be billed). It is the service responsability to bill on right frequency! Amount due calculation When the bill is received, the chain calculates the bill amount based on the agreement values as follows: ~~~ amount = baseFee * T / 3600 + variableAmount ~~~ where is the elapsed time, in seconds and bounded by 3600 (see above), since last effective billing operation occured. Protection against draining Note that if is too high (i.e ) the billing extrinsic will fail. The value in the contract is interpreted as being \"per hour\" and acts as a protection mechanism to avoid consumer draining. Indeed, as it is technically possible for the service to send a bill every second, there would be no gain for that (unless overloading the chain uselessly). So it is also the service responsability to set a suitable according to the billing frequency! Billing considerations Then, if all goes well and no error is dispatched after submitting the transaction, the consumer pays for the due amount calculated from the bill (see calculation detail above). In practice the amount is transferred from the consumer twin account to the service twin account. Be aware that if the consumer is out of funds the billing will fail AND the contract will automatically be canceled. Step 5: Cancel the contract At every moment of the flow since the contract is created it can be canceled (and definitively removed). Only the service or the consumer can do it going to -> -> -> specifying . !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfchain/tfchain.md",
    "title": "ThreeFold Chain",
    "url": "/labs/documentation/developers/tfchain",
    "content": "Introduction ThreeFold Chain (TFChain) is the base layer for everything that interacts with the grid. Nodes, farms, users are registered on the chain. It plays the central role in achieving decentralised consensus between a user and Node to deploy a certain workload. A contract can be created on the chain that is essentially an agreement between a node and user. Twins A twin is the central Identity object that is used for every entity that lives on the grid. A twin optionally has an IPV6 planetary network address which can be used for communication between twins no matter of the location they are in. A twin is coupled to a private/public keypair on chain. This keypair can hold TFT on TF Chain. Farms A farm must be created before a Node can be booted. Every farms needs to have an unique name and is linked to the Twin that creates the farm. Once a farm is created, a unique ID is generated. This ID can be used to provide to the boot image of a Node. Nodes When a node is booted for the first time, it registers itself on the chain and a unique identity is generated for this Node. Node Contract A node contract is a contract between a user and a Node to deploy a certain workload. The contract is specified as following: We don't save the raw workload definition on the chain but only a hash of the definition. After the contract is created, the user must send the raw deployment to the specified node in the contract. He can find where to send this data by looking up the Node's twin and contacting that twin over the planetary network. Rent Contract A rent contract is also a contract between a user and a Node, but instead of being able to reserve a part of the node's capacity, the full capacity is rented. Once a rent contract is created on a Node by a user, only this user can deploy node contracts on this specific node. A discount of 50% is given if a the user wishes to rent the full capacity of a node by creating a rent contract. All node contracts deployed on a node where a user has a rent contract are free of use expect for the public ip's which can be added on a node contract. Name Contract A name contract is a contract that specifies a unique name to be used on the grid's webgateways. Once a name contract is created, this name can be used as and entrypoint for an application on the grid. Contract billing Every contract is billed every 1 hour on the chain, the amount that is due is deducted from the user's wallet every 24 hours or when the user cancels his contract. The total amount acrued in those 24 hours gets send to following destinations: - 10% goes to ThreeFold - 5% goes to staking pool wallet (to be implemented in a later phase) - 50% goes to certified sales channel - 35% TFT gets burned See pricing for more information on how the cost for a contract is calculated. Contract locking To not overload the chain with transfer events and others we choose to lock the amount due for a contract every hour and after 24 hours unlock the amount and deduct it in one go. This lock is saved on a user's account, if the user has multiple contracts the locked amount will be stacked. Contract grace period When the owner of a contract runs out funds on his wallet to pay for his deployment, the contract goes in to a Grace Period state. The deployment, whatever that might be, will be unaccessible during this period to the user. When the wallet is funded with TFT again, the contract goes back to a normal operating state. If the grace period runs out (by default 2 weeks) the user's deployment and data will be deleted from the node. DAO See DAO for more information on the DAO on TF Chain. Farming Policies See the Farming Policies section for more information on the farming policies on TF Chain. Node Connection price A connection price is set to every new Node that boots on the Grid. This connection price influences the amount of TFT farmed in a period. The connection price set on a node is permanent. The DAO can propose the increase or decrease of the connection price. At the time of writing the connection price is set to $ 0.08. When the DAO proposes a connection price and the vote is passed, new nodes will attach to the new connection price. Node Certifiers Node certifiers are entities who are allowed to set a node's certification level to . The DAO can propose to add or remove entities that can certify nodes. This is usefull for allowing approved resellers of Threefold nodes to mark nodes as Certified. A certified node farms 25% more tokens than a node.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfchain/introduction.md",
    "title": "Introduction",
    "url": "/labs/documentation/developers/tfchain/introduction",
    "content": "Introduction We provide an introduction to Networkd, the network manager of 0-OS. Boot and initial setup At boot, be it from an usb stick or PXE, ZOS starts up the kernel, with a few necessary parameters like farm ID and/or possible network parameters, but basically once the kernel has started, zinit among other things, starts the network initializer. In short, that process loops over the available network interfaces and tries to obtain an IP address that also provides for a default gateway. That means: it tries to get Internet connectivity. Without it, ZOS stops there, as not being able to register itself, nor start other processes, there wouldn't be any use for it to be started anyway. Once it has obtained Internet connectivity, ZOS can then proceed to make itself known to the Grid, and acknowledge it's existence. It will then regularly poll the Grid for tasks. Once initialized, with the network daemon running (a process that will handle all things related to networking), ZOS will set up some basic services so that workloads can themselves use that network. Networkd functionality The network daemon is in itself responsible for a few tasks, and working together with the provision daemon it mainly sets up the local infrastructure to get the user network resources, together with the wireguard configurations for the user's mesh network. The Wireguard mesh is an overlay network. That means that traffic of that network is encrypted and encapsulated in a new traffic frame that the gets transferred over the underlay network, here in essence the network that has been set up during boot of the node. For users or workloads that run on top of the mesh, the mesh network looks and behaves like any other directly connected workload, and as such that workload can reach other workloads or services in that mesh with the added advantage that that traffic is encrypted, protecting services and communications over that mesh from too curious eyes. That also means that workloads between nodes in a local network of a farmer is even protected from the farmer himself, in essence protecting the user from the farmer in case that farmer could become too curious. As the nodes do not have any way to be accessed, be it over the underlaying network or even the local console of the node, a user can be sure that his workload cannot be snooped upon. Techie talk - boot and initial setup For ZOS to work at all (the network is the computer), it needs an internet connection. That is: it needs to be able to communicate with the BCDB over the internet. So ZOS starts with that: with the process, that tries go get the node to receive an IP address. That process will have set-up a bridge (), connected to an interface that is on an Internet-capable network. That bridge will have an IP address that has Internet access. Also, that bridge is there for future public interfaces into workloads. Once ZOS can reach the Internet, the rest of the system can be started, where ultimately, the daemon is started. - networkd initial setup starts with recensing the available Network interfaces, and registers them to the BCDB (grid database), so that farmers can specify non-standard configs like for multi-nic machines. Once that is done, registers itself to the zbus, so it can receive tasks to execute from the provsioning daemon (). These tasks are mostly setting up network resources for users, where a network resource is a subnet in the user's wireguard mesh. - multi-nic setups When someone is a farmer, exploiting nodes somewhere in a datacentre, where the nodes have multiple NICs, it is advisable (though not necessary) to differentiate OOB traffic (like initial boot setup) from user traffic (as well the overlay network as the outgoing NAT for nodes for IPv4) to be on a different NIC. With these parameters, a user will have to make sure their switches are properly configured, more in docs later. - registering and configurations Once a node has booted and properly initialized, registering and configuring the node to be able to accept workloads and their associated network configs, is a two-step process. First, the node registers it's live network setup to the BCDB. That is : all NICs with their associated IP addresses and routes are registered so a farm admin can in a second phase configure eventual separate NICs to handle different kinds of workloads. In that secondary phase, a farm admin can then set-up the NICs and their associated IP's manually, so that workloads can start using them. Wireguard explanations - wireguard as pointopoint links and what that means Wireguard is a special type of VPN, where every instance is as well server for multiple peers as client towards multiple peers. That way you can create fanning-out connections als receive connections from multiple peers, creating effectively a mesh of connections Like this : ! - wireguard port management Every wireguard point (a network resource point) needs a destination/port combo when it's publicly reachable. The destination is a public ip, but the port is the differentiator. So we need to make sure every network wireguard listening port is unique in the node where it runs, and can be reapplied in case of a node's reboot. ZOS registers the ports already in use to the BCDB, so a user can the pick a port that is not yet used. - wireguard and hidden nodes Hidden nodes are nodes that are in essence hidden behind a firewall, and unreachable from the Internet to an internal network, be it as an IPv4 NATed host or an IPv6 host that is firewalled in any way, where it's impossible to have connection initiations form the Internet to the node. As such, these nodes can only partake in a network as client-only towards publicly reachable peers, and can only initiate the connections themselves. (ref previous drawing). To make sure connectivity stays up, the clients (all) have a keepalive towards all their peers so that communications towards network resources in hidden nodes can be established. Caveats - hidden nodes Hidden nodes live (mostly) behind firewalls that keep state about connections and these states have a lifetime. We try at best to keep these communications going, but depending of the firewall your mileage may vary (YMMV ;-)) - local underlay network reachability When multiple nodes live in a same hidden network, at the moment we don't try to have the nodes establish connectivity between themselves, so all nodes in that hidden network can only reach each other through the intermediary of a node that is publicly reachable. So to get some performance, a farmer will have to have real routable nodes available in the vicinity. So for now, a farmer is better off to have his nodes really reachable over a public network. - IPv6 and IPv4 considerations While the mesh can work over IPv4 __and__ IPv6 at the same time, the peers can only be reached through one protocol at the same time. That is a peer is IPv4 __or__ IPv6, not both. Hence if a peer is reachable over IPv4, the client towards that peer needs to reach it over IPv4 too and thus needs an IPv4 address. We advise strongly to have all nodes properly set-up on a routable unfirewalled IPv6 network, so that these problems have no reason to exist.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/tfchain/farming_policies.md",
    "title": "Farming Policies",
    "url": "/labs/documentation/developers/tfchain/farming_policies",
    "content": "Introduction A farming policy defines how farming rewards are handed out for nodes. Every node has a farming policy attached. A farming policy is either linked to a farm, in which case new nodes are given the farming policy of the farm they are in once they register themselves. Alternatively a farming policy can be a \"default\". These are not attached to a farm, but instead they are used for nodes registered in farms which don't have a farming policy. Multiple defaults can exist at the same time, and the most fitting should be chosen. Farming Policy Fields A farming policy has the following fields: - id (used to link policies) - name - Default. This indicates if the policy can be used by any new node (if the parent farm does not have a dedicated attached policy). Essentially, a policy serves as a base which can be overriden per farm by linking a non default policy to said farm. - Reward tft per CU, SU and NU, IPV4 - Minimal uptime needed in integer format (example 995) - Policy end (After this block number the policy can not be linked to new farms any more) - If this policy is immutable or not. Immutable policies can never be changed again Additionally, we also use the following fields, though those are only useful for farming policies: - Node needs to be certified - Farm needs to be certified (with certification level, which will be changed to an enum). In case a farming policy is not attached to a farm, new nodes will pick the most appropriate farming policy from the default ones. To decide which one to pick, they should be considered in order with most restrictive first until one matches. That means: - First check for the policy with highest farming certification (in the current case gold) and certified nodes - Then check for a policy with highest farming certification (in the current case gold) and non certified nodes - Check for policy without farming certification but certified nodes - Last check for a policy without any kind of certification Important here is that certification of a node only happens after it comes live for the first time. As such, when a node gets certified, farming certification needs to be re evaluated, but only if the currently attached farming policy on the node is a policy (as specifically linked policies have priority over default ones). When evaluating again, we first consider if we are eligible for the farming policy linked to the farm, if any. Limits on linked policy When a council member attaches a policy to a farm, limits can be set. These limits define how much a policy can be used for nodes, before it becomes unusable and gets removed. The limits currently are: - Farming Policy ID: the ID of the farming policy which we want to limit to a farm. - CU. Every time a node is added in the farm, it's CU is calculated and deducted from this amount. If the amount drops below 0, the maximum amount of CU that can be attached to this policy is reached. - SU. Every time a node is added in the farm, it's SU is calculated and deducted from this amount. If the amount drops below 0, the maximum amount of SU that can be attached to this policy is reached. - End date. After this date the policy is not effective anymore and can't be used. It is removed from the farm and a default policy is used. - Certification. If set, only certified nodes can get this policy. Non certified nodes get a default policy. Once a limit is reached, the farming policy is removed from the farm, so new nodes will get one of the default policies until a new policy is attached to the farm. Creating a Policy A council member can create a Farming Policy (DAO) in the following way: 1: Open PolkadotJS apps on the corresponding network and go to 2: Now select the account to propose from (should be an account that's a council member). 3: Select as action -> 5: Set a (amount of farmers to vote) 6: Select an actions -> and fill in all the fields. 7: Create a forum post with the details of the farming policy and fill in the link of that post in the field 8: Give it some good . 9: Duration is optional (by default it's 7 days). A proposal cannot be closed before the duration is \"expired\". If you wish to set a duration, the duration should be expressed in number of blocks from . For example, 2 hours is equal to 1200 blocks (blocktime is 6 seconds) in this case, the duration should be filled in as . 10: If all the fields are filled in, click , now Farmers can vote. A proposal can be closed manually once there are enough votes AND the proposal is expired. To close go to extrinsics -> -> -> fill in proposal hash and index (both can be found in chainstate). All (su, cu, nu, ipv4) values should be expressed in units USD. Minimal uptime should be expressed as integer that represents an percentage (example: ). Policy end is optional (0 or some block number in the future). This is used for expiration. For reference: ! Linking a policy to a Farm First identify the policy ID to link to a farm. You can check for farming policies in chainstate -> -> , start with ID 1 and increment with 1 until you find the farming policy which was created when the proposal was expired and closed. 1: Open PolkadotJS apps on the corresponding network and go to 2: Now select the account to propose from (should be an account that's a council member). 3: Select as proposal -> 4: Set a (amount of farmers to vote) 5: Select an actions -> and fill in all the fields (FarmID and Limits). 6: Limits contains a (Required) and cu, su, end, node count (which are all optional). It also contains , if this is set to true only certified nodes can have this policy. 7: Create a forum post with the details of why we want to link that farm to that policy and fill in the link of that post in the field 8: Give it some good . 9: Duration is optional (by default it's 7 days). A proposal cannot be closed before the duration is \"expired\". If you wish to set a duration, the duration should be expressed in number of blocks from . For example, 2 hours is equal to 1200 blocks (blocktime is 6 seconds) in this case, the duration should be filled in as . 10: If all the fields are filled in, click , now Farmers can vote. A proposal can be closed manually once there are enough votes AND the proposal is expired. To close go to extrinsics -> -> -> fill in proposal hash and index (both can be found in chainstate). For reference: !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/setup.md",
    "title": "Setup",
    "url": "/labs/documentation/developers/proxy_readme/setup",
    "content": "Introduction We show how to set up grid proxy. Install Golang To install Golang, you can follow the official guide. Docker Docker is useful for running the TFGridDb in container environment. Read this to install Docker engine. Note: it will be necessary to follow step #2 in the previous article to run docker without sudo. if you want to avoid that. edit the docker commands in the and add sudo. Postgres If you have docker installed you can run postgres on a container with: Then you can either load a dump of the database if you have one: or easier you can fill the database tables with randomly generated data with the script to do that run: Get Mnemonics 1. Install polkadot extension on your browser. 2. Create a new account from the extension. It is important to save the seeds.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/release.md",
    "title": "Release",
    "url": "/labs/documentation/developers/proxy_readme/release",
    "content": "Introduction We show the steps to release a new version of the Grid Proxy. Steps To release a new version of the Grid-Proxy component, follow these steps: Update the field in the file. This field should reflect the new version number of the release. The release process includes generating and pushing a Docker image with the latest GitHub tag. This step is automated through the workflow. Trigger the workflow by pushing the desired tag to the repository. This will initiate the workflow, which will generate the Docker image based on the tag and push it to the appropriate registry. Debugging In the event that the workflow does not run automatically after pushing the tag and making the release, you can manually execute it using the GitHub Actions interface. Follow these steps: Go to the GitHub Actions page for the Grid-Proxy repository. Locate the workflow named gridproxy-release.yml. Trigger the workflow manually by selecting the \"Run workflow\" option.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/proxy_readme.md",
    "title": "Grid Proxy",
    "url": "/labs/documentation/developers/proxy_readme",
    "content": "Welcome to the Grid Proxy section of the TFGrid Manual! In this comprehensive guide, we delve into the intricacies of the ThreeFold Grid Proxy, a fundamental component that empowers the ThreeFold Grid ecosystem. This section is designed to provide users, administrators, and developers with a detailed understanding of the TFGrid Proxy, offering step-by-step instructions for its setup, essential commands, and insights into its various functionalities. The Grid Proxy plays a pivotal role in facilitating secure and efficient communication between nodes within the ThreeFold Grid, contributing to the decentralized and autonomous nature of the network. Whether you are a seasoned ThreeFold enthusiast or a newcomer exploring the decentralized web, this manual aims to be your go-to resource for navigating the ThreeFold Grid Proxy landscape. To assist you on your journey, we have organized the content into distinct chapters below, covering everything from initial setup procedures and database testing to practical commands, contributions, and insights into the ThreeFold Explorer and the Grid Proxy Database functionalities. TABLE OF CONTENTS - Introducing Grid Proxy - Setup - DB Testing - Commands - Contributions - Explorer - Database - Production - Release",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/proxy.md",
    "title": "Introducing Grid Proxy",
    "url": "/labs/documentation/developers/proxy_readme/proxy",
    "content": "About The TFGrid client Proxy acts as an interface to access information about the grid. It supports features such as filtering, limitation, and pagination to query the various entities on the grid like nodes, contracts and farms. Additionally the proxy can contact the required twin ID to retrieve stats about the relevant objects and performing ZOS calls. The proxy is used as the backend of several threefold projects like: - Dashboard How to Use the Project If you don't want to care about setting up your instance you can use one of the live instances. each works against a different TFChain network. - Dev network: https://gridproxy.dev.grid.tf - Swagger: https://gridproxy.dev.grid.tf/swagger/index.html - Qa network: https://gridproxy.qa.grid.tf - Swagger: https://gridproxy.qa.grid.tf/swagger/index.html - Test network: https://gridproxy.test.grid.tf - Swagger: https://gridproxy.test.grid.tf/swagger/index.html - Main network: https://gridproxy.grid.tf - Swagger: https://gridproxy.grid.tf/swagger/index.html Or follow the development guide to run yours. By default, the instance runs against devnet. to configure that you will need to config this while running the server. > Note: You may face some differences between each instance and the others. that is normal because each network is in a different stage of development and works correctly with others parts of the Grid on the same network. Used Technologies & Prerequisites 1. GoLang: Mainly the two parts of the project written in , otherwise you can just download the compiled binaries from github releases 2. Postgresql: Used to load the TFGrid DB 3. Docker: Containerize the running services such as Postgres and Redis. 4. Mnemonics: Secret seeds for adummy identity to use for the relay client. For more about the prerequisites and how to set up and configure them. follow the Setup guide Start for Development To start the services for development or testing make sure first you have all the Prerequisites. - Clone this repo - The has all that you need to deal with Db, Explorer, Tests, and Docs. - For a quick test explorer server. Now you can access the server at - Run the tests - Generate docs. To run in development environment see here how to generate test db or load a db dump then use: Then visit For more illustrations about the commands needed to work on the project, see the section Commands. For more info about the project structure and contributions guidelines check the section Contributions. Setup for Production Get and Install the Binary - You can either build the project: - Or download a release: Check the releases page and edit the next command with the chosen version. Add as a Systemd Service - Create the service file",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/production.md",
    "title": "Production",
    "url": "/labs/documentation/developers/proxy_readme/production",
    "content": "Introduction We show how to run grid proxy in production. Production Run - Download the latest binary here - add the execution permission to the binary and move it to the bin directory - Add a new systemd service - enable the service - start the service - check the status - The command options: - domain: the host domain which will generate ssl certificate to. - email: the mail used to run generate the ssl certificate. - ca: certificate authority server url, e.g. - let's encrypt staging: - let's encrypt production: - postgres -\\*: postgres connection info. To upgrade the machine - just replace the binary with the new one and apply - it you have changes in the you have to run this command first Dockerfile To build & run dockerfile Update helm package - Do - Regenerate the packages - Regenerate index.yaml - Push your changes Install the chart using helm package - Adding the repo to your helm - install a chart",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/explorer.md",
    "title": "Explorer",
    "url": "/labs/documentation/developers/proxy_readme/explorer",
    "content": "Introduction The Grid Explorer is a rest API used to index a various information from the TFChain. Explorer Overview - Due to limitations on indexing information from the blockchain, Complex inter-tables queries and limitations can't be applied directly on the chain. - Here comes the TFGridDB, a shadow database contains all the data on the chain which is being updated each 2 hours. - Then the explorer can apply a raw SQL queries on the database with all limitations and filtration needed. - The used technology to extract the info from the blockchain is Subsquid check the repo. Explorer Endpoints | HTTP Verb | Endpoint | Description | | --------- | --------------------------- | ---------------------------------- | | GET | | Show all contracts on the chain | | GET | | Show all farms on the chain | | GET | | Show all gateway nodes on the grid | | GET | | Get a single gateway node details | | GET | | Get a single node status | | GET | | Show all nodes on the grid | | GET | | Get a single node details | | GET | | Get a single node status | | GET | | Show the grid statistics | | GET | | Show all the twins on the chain | | GET | | Get a single node ZOS statistics | For the available filters on each node. check endpoint on the running instance.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/db_testing.md",
    "title": "DB Testing",
    "url": "/labs/documentation/developers/proxy_readme/db_testing",
    "content": "Introduction We show how to use a database for testing. Run postgresql container Create the DB you can either Generate a db with relevant schema to test things locally quickly, or load a previously taken DB dump file: Method 1: Generate a db with relevant schema using the db helper tool: Method 2: Fill the DB from a Production db dump file, for example if you have file, you can run:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/database.md",
    "title": "Database",
    "url": "/labs/documentation/developers/proxy_readme/database",
    "content": "Introduction The grid proxy has access to a postgres database containing information about the tfgrid, specifically information about grid nodes, farms, twins, and contracts.\\ The database is filled/updated by this indexer. The grid proxy mainly retrieves information from the db with a few modifications for efficient retrieval (e.g. adding indices, caching node gpus, etc..). Max Open Connections The postgres database can handle 100 open connections concurrently (that is the default value set by postgres), this number can be increased, depending on the infrastructure, by modifying it in the postgres.conf file where the db is deployed, or by executing the following query , but this requires a db restart to take effect.\\ The explorer creates a connection pool to the postgres db, with a max open pool connections set to a specific number (currently 80).\\ It's important to distinguish between the database max connections, and the max pool open connections, because if the pool did not have any constraints, it would try to open as many connections as it wanted, without any notion of the maximum connections the database accepts. It's the database responsibility then to accept or deny the connection.\\ This is why the max number of open pool connections is set to 80: It's below the max connections the database could handle (100), and it gives room for other actors outside of the explorer to open connections with the database.\\",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/contributions.md",
    "title": "Contributions",
    "url": "/labs/documentation/developers/proxy_readme/contributions",
    "content": "Introduction We propose a quick guide to learn how to contribute. Project structure The main structure of the code base is as follows: - : helm chart - : includes the project Golang entrypoints - : project documentation - : contains the explorer API logic and the cert manager implementation, this where most of the feature work will be done - : contains client implementation and shared libs - : integration tests - : DB tools to prepare the Postgres DB for testing and development - : ZOS root endpoint that will be mounted in the docker image Internal - : contains the explorer server logic: - : the db connection and operations - : defines the generic action mount that will be be used as http handler - : logic to ensure certificates are available and up to date includes the logic for all the API operations. Pkg - : client implementation - : defines all the API objects Writing tests Adding a new endpoint should be accompanied with a corresponding test. Ideally every change or bug fix should include a test to ensure the new behavior/fix is working as intended. Since these are integration tests, you need to first make sure that your local db is already seeded with the ncessary data. See tools doc for more information about how to prepare your db. Testing tools offer two clients that are the basic of most tests: - : this client connects to the local db - : this client connects to the running local instance You need to start an instance of the server before running the tests. Check here for how to start.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/proxy_readme/commands.md",
    "title": "Commands",
    "url": "/labs/documentation/developers/proxy_readme/commands",
    "content": "Introduction The Makefile makes it easier to do mostly all the frequently commands needed to work on the project. Work on Docs we are using swaggo/swag to generate swagger docs based on the annotation inside the code. - install swag executable binary - now if you check the binary directory inside go directory you will find the executable file. - to run swag you can either use the full path or export go binary to - use swag to format code comments. - update the docs - to parse external types from vendor - for a full generate docs command To start the GridProxy server After preparing the postgres database you can the main file in which responsible for starting all the needed server/clients. The server options | Option | Description | | ------------------ | ----------------------------------------------------------------------------------------------------------------------- | | -address | Server ip address (default ) | | -ca | certificate authority used to generate certificate (default ) | | -cert-cache-dir | path to store generated certs in (default ) | | -domain | domain on which the server will be served | | -email | email address to generate certificate with | | -log-level | log level (default ) | | -no-cert | start the server without certificate | | -postgres-db | postgres database | | -postgres-host | postgres host | | -postgres-password | postgres password | | -postgres-port | postgres port (default 5432) | | -postgres-user | postgres username | | -tfchain-url | tF chain url (default ) | | -relay-url | RMB relay url (default) | | -mnemonics | Dummy user mnemonics for relay calls | | -v | shows the package version | For a full server setup: Run tests There is two types of tests in the project - Unit Tests - Found in - Run with - Integration Tests - Found in - Run with: - Or to run a specific test you can append the previous command with You can found the TestName in the files. To run all the tests use",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/internals.md",
    "title": "Internals",
    "url": "/labs/documentation/developers/internals",
    "content": "We present in this section of the developers book a partial list of system components. Content will be added progressively. TABLE OF CONTENTS - Reliable Message Bus (RMB) - Introduction to RMB - Coding Guides - RMB Specs - RMB Peer - RMB Relay - ZOS - Manual - Workload Types - Internal Modules - Capacity - Performance Monitor Package - API",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/zos.md",
    "title": "ZOS",
    "url": "/labs/documentation/developers/internals/zos",
    "content": "TABLE OF CONTENTS - Manual - Workload Types - Internal Modules - Identity - Node ID Generation - Node Upgrade - Node - Storage - Network - Introduction - Definitions - Mesh - Setup - Flist - Container - VM - Provision - Capacity - Performance Monitor Package - Public IPs Validation Task - CPUBenchmark - IPerf - Health Check - API",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/workload_types.md",
    "title": "Workload Types",
    "url": "/labs/documentation/developers/internals/zos/workload_types",
    "content": "Introduction Each workload has a type which is associated with some data. We present here the different types of workload associated with Zero-OS. Virtual Machine type Private network can span multiple nodes at the same time. Which means workloads () that live (on different node) but part of the same virtual network can still reach each other over this network. If one (or more) nodes are you can also add your personal laptop to the nodes and be able to reach your over network. In the simplest form a network workload consists of: - network range - sub-range available on this node - private key - list of peers - each peer has public key - sub-range Full network definition can be found here type The IP workload type reserves an IP from the available contract IPs list. Which means on contract creation the user must specify number of public IPs it needs to use. The contract then will allocate this number of IPs from the farm and will kept on the contract. When the user then add the IP workload to the deployment associated with this contract, each IP workload will pick and link to one IP from the contract. In minimal form, workload does not require any data. But in reality it has 2 flags to pick which kind of public IP do you want - (): pick one from the contract public Ipv4 - (): pick an IPv6 over SLAAC. Ipv6 are not reserved with a contract. They are basically free if the farm infrastructure allows Ipv6 over SLAAC. Full workload definition can be found here type A is a local disk that can be attached directly to a container or a virtual machine. only require as input as defined here this workload type is only utilized via the workload. type is a unified container/virtual machine type. This can be used to start a virtual machine on a node give the following: - , this what provide the base image or container image. - the content is what changes the mode. An built from a docker image or has files, or executable binaries will run in a container mode. will inject it's own to run the workload and kick start the defined - private network to join (with assigned IP) - optional public or - optional disks. But at least one disk is required in case running in mode, which is used to hold the root image. For more details on all parameters needed to run a please refer to data Building your Please refer to this document here about how to build an compatible type Zlogs is a utility workload that allows you to stream logs to a remote location. The workload needs to know what to stream logs of and also the location to stream the logs to. uses internally the so it supports any streaming url that is supported by this utility. workload runs inside the same private network as the instance. Which means zlogs can stream logs to other that is running inside the same private network (possibly on different nodes). For example, you can run which is a web-socket server that can work with web-socket protocol. Check configuration here Storage type is a storage primitives that gives you a persisted key value store over RESP protocol. Please check docs Please check here for workload data. type short for is a FUSE filesystem which aim to be able to support unlimited local storage with remote backend for offload and backup which cannot be broke even by a quantum computer. Please read about it here To create a workload you need to provide the workload type as here Gateway type This create a proxy with the given name to the given backends. The of the proxy must be owned by a name contract on the grid. The idea is that a user can reserve a name (i.e ). Later he can deploy a gateway work load with name on any gateway node that points to specified backends. The name then is prefix by the gateway name. For example if the gateway domain is then your full QFDN is goint to be called Full name-proxy workload data is defined here type This create a proxy with the given fqdn to the given backends. In this case the user then must configure his dns server (i.e name.com) to point to the correct node public IP. Full name-proxy workload data is defined here",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/manual.md",
    "title": "Manual",
    "url": "/labs/documentation/developers/internals/zos/manual",
    "content": "Introduction This document explain the usage of . usually pronounced (zero OS), got it's name from the idea of zero configuration. Since after the initial configuration which only include which to join and what (, , or ) the owner of the node does not has to do anything more, and the node work fully autonomous. The farmer himself cannot control the node, or access it by any mean. The only way you can interact with a node is via it's public API. Farm? Network? What are these? Well, is built to allow people to run around the world this simply is enabled by allowing 3rd party data-centers to run on their hardware. Then a user can then find any nearby (is what we call a cluster of nodes that belong to the same ) and then they can choose to deploy capacity on that node/farm. A can consist of one or more nodes. So what is .Well, to allow developers to build and itself and make it available during the early stages of development for testers and other enthusiastic people to try it out. To allow this we created 3 - : This is used mainly by developers to test their work. This is still available for users to deploy their capacity on (for really really cheap prices), but at the same time there is no grantee that it's stable or that data loss or corruption will happen. Also the entire network can be reset with no heads up. - : Once new features are developed and well tested on network they are released to environment. This also available for users to use with a slightly higher price than network. But it's much more stable. In theory this network is stable, there should be no resets of the network, issues on this network usually are not fatal, but partial data loss can still occurs. - : Well, as the name indicates this is the most stable network (also full price) once new features are fully tested on network they are released on . Interaction provide a simple that can be used to: - Query node runtime information - Network information - Free ports - Get public configuration - System version - Other (check client for details) - Deployment management (more on that later) - Create - Update - Delete Note that API is available over protocol. which means is a simple messaging protocol that enables peer to peer communication over network. Please check for more information. Simply put, allows 2 entities two communicate securely knowing only their an id is linked to a public key on the blockchain. Hence messages are verifiable via a signature. To be able to contact the node directly you need to run - - (correctly configured) Once you have those running you can now contact the node over . For a reference implementation (function names and parameters) please refer to RMB documentation Here is a rough example of how low level creation of a deployment is done. then create an instance of the node client define your deployment object compute hash create the contract on and get the then you can link the deployment to the contract, then send to the node. Once the node receives the deployment. It will then fetch the contract (using the contract id) from the node recompute the deployment hash and compare with the one set on the contract. If matches, the node proceeds to process the deployment. Deployment A deployment is a set of workloads that are contextually related. Workloads in the same deployment can reference to other workloads in the same deployment. But can't be referenced from another deployment. Well, except the network workload which can be referenced from a different deployment as long it belongs to the same user. Workloads has unique IDs (per deployment) that are set by the user, hence he can create multiple workloads then reference to them with the given IDs () For example, a deployment can define - A private network with id - A disk with id - A public IP with id - A container that uses: - The container can mount the disk like . - The container can get assign the public IP to itself like by referencing the IP with id . - etc. Workload Each workload has a type which is associated with some data. So minimal definition of a workload contains: - : unique per deployment (id) - : workload type - : workload data that is proper for the selected type. Types - Virtual machine related - - - - - - Storage related - - - Gateway related - - API Node is always connected to the RMB network with the node . Means the node is always reachable over RMB with the node as an address. The node client should have a complete list of all available functions. documentations of the API can be found here Raid Controller Configuration 0-OS goal is to expose raw capacity. So it is best to always try to give it access to the most raw access to the disks. In case of raid controllers, the best is to try to set it up in JBOD mode if available.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/capacity.md",
    "title": "Capacity",
    "url": "/labs/documentation/developers/internals/zos/capacity",
    "content": "Introduction This document describes how ZOS does the following tasks: - Reserved system resources - Memory - Storage - Calculation of free usable capacity for user workloads System reserved capacity ZOS always reserve some amount of the available physical resources to its own operation. The system tries to be as protective as possible of it's critical services to make sure that the node is always reachable and usable even if it's under heavy load ZOS make sure it reserves Memory and Storage (but not CPU) as per the following: Reserved Memory ZOS reserve 10% of the available system memory for basic services AND operation overhead. The operation overhead can happen as a side effect of running user workloads. For example, a user network while in theory does not consume any memory, in matter of fact it also consume some memory (kernel buffers, etc...). Same for a VM. A user VM can be assigned say 5G but the process that running the VM can/will take few extra megabytes to operate. This is why we decided to play on the safe side, and reserve 10% of total system memory to the system overhead, with a MIN reserved memory of 2GB Reserved Storage While ZOS does not require installation, but it needs to download and store many things to operate correctly. This include the following: - Node identity. Information about the node id and keys - The system binaries, those what include all zos to join the grid and operate as expected - Workload flists. Those are the flists of the user workloads. Those are downloaded on demand so they don't always exist. - State information. Tracking information maintained by ZOS to track the state of workloads, owner-ship, and more. This is why the system on first start allocates and reserve a part of the available SSD storage and is called . Initially is (was 100G in older version) but because the nature of the cache we can't fix it at The required space to be reserved by the system can dramatically change based on the amount of workloads running on the system. For example if many users are running many different VMs, the system will need to download (and cache) different VM images, hence requiring more cache. This is why the system periodically checks the reserved storage and then dynamically expand or shrink to a more suitable value in increments of 5G. The expansion happens around the 20% of current cache size, and shrinking if went below 20%. User Capacity All workloads requires some sort of a resource(s) to run and that is actually what the user hae to pay for. Any workload can consume resources in one of the following criteria: - CU (compute unit in vCPU) - MU (memory unit in bytes) - NU (network unit in bytes) - SU (ssd storage in bytes) - HU (hdd storage in bytes) A workloads, based on the type can consume one or more of those resource types. Some workloads will have a well known \"size\" on creation, others might be dynamic and won't be know until later. For example, a disk workload SU consumption will be know ahead. Unlike the NU used by a network which will only be known after usage over a certain period of time. A single deployment can has multiple workloads each requires a certain amount of one or more capacity types (listed above). ZOS then for each workloads type compute the amount of resources needed per workload, and then check if it can provide this amount of capacity. > This means that a deployment that define 2 VMs can partially succeed to deploy one of the VMs but not the other one if the amount of resources it requested are higher than what the node can provide Memory How the system decide if there are enough memory to run a certain workload that demands MU resources goes as follows: - compute the \"theoretically used\" memory by all user workloads excluding . This is basically the sum of all consumed MU units of all active workloads (as defined by their corresponding deployments, not as per actually used in the system). - The theoretically used memory is topped with the system reserved memory. - The the system checks actually used memory on the system this is done simply by doing - The system now can simply an accurate used memory by doing - Then - Then simply checks that memory is enough to hold requested workload memory! Storage Storage is much simpler to allocate than memory. It's completely left to the storage subsystem to find out if it can fit the requested storage on the available physical disks or not, if not possible the workloads is marked as error. Storage tries to find the requested space based on type (SU or HU), then find the optimal way to fit that on the available disks, or spin up a new one if needed.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/api.md",
    "title": "API",
    "url": "/labs/documentation/developers/internals/zos/api",
    "content": "Introduction This document should list all the actions available on the node public API. which is available over RMB The node is always reachable over the node twin id as per the node object on tfchain. Once node twin is known, a client can be initiated and used to talk to the node. Deployments Deploy | command |body| return| |---|---|---| | | Deployment|-| Deployment need to have valid signature, the contract must exist on chain with the correct contract hash as the deployment. Update | command |body| return| |---|---|---| | | Deployment|-| The update call, will update (modify) an already existing deployment with new definition. The deployment must already exist on the node, the contract must have the new hash as the provided deployment, plus valid versions. > TODO: need more details over the deployment update calls how to handle the version Get | command |body| return| |---|---|---| | | |Deployment| Changes | command |body| return| |---|---|---| | | | | Where: - workload The list will contain all deployment workloads (changes) means a workload can (will) appear multiple times in this list for each time a workload state will change. This means a workload will first appear in state, then next time it will show the state change (with time) to the next state which can be success or failure, and so on. This will happen for each workload in the deployment. Delete > > You probably never need to call this command yourself, the node will delete the deployment once the contract is cancelled on the chain. | command |body| return| |---|---|---| | | |-| Statistics | command |body| return| |---|---|---| | | - || Where: > Note that, capacity equal the full workload reserved capacity PLUS the system reserved capacity so , while is only the amount of resourced reserved by itself Storage List separate pools with capacity | command |body| return| |---|---|---| | | - || List all node pools with their types, size and used space where Network List Wireguard Ports | command |body| return| |---|---|---| | | - || List all ports on the node that can't be used for network wireguard. A user then need to find a free port that is not in this list to use for his network Supports IPV6 | command |body| return| |---|---|---| | | - || List Public Interfaces | command |body| return| |---|---|---| | | - | | list of node IPs this is a public information. Mainly to show the node yggdrasil IP and the interface. List Public IPs | command |body| return| |---|---|---| | | - | | List all user deployed public IPs that are served by this node. Get Public Config | command |body| return| |---|---|---| | | - | | Where returns the node public config or error if not set. If a node has public config it means it can act like an access node to user private networks Admin The next set of commands are ONLY possible to be called by the only. List Physical Interfaces | command |body| return| |---|---|---| | | - | | Where Lists ALL node physical interfaces. Those interfaces then can be used as an input to Get Public Exit NIC | command |body| return| |---|---|---| | | - | | Where returns the interface used by public traffic (for user workloads) Set Public Exit NIC | command |body| return| |---|---|---| | | |- | name must be one of (free) names returned by System Version | command |body| return| |---|---|---| | | - | | DMI | command |body| return| |---|---|---| | | - | DMI | Hypervisor | command |body| return| |---|---|---| | | - | | GPUs List Gpus | command |body| return| |---|---|---| | | - | | Where Lists all available node GPUs if exist",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/performance/publicips.md",
    "title": "Public IPs Validation Task",
    "url": "/labs/documentation/developers/internals/zos/performance/publicips",
    "content": "Introduction The goal of the task is to make sure public IPs assigned to a farm are valid and can be assigned to deployments. Configuration - Name: - Schedule: 4 times a day - Jitter: 10 min Task Details - The task depends on ensuring the proper test network setup is correct and will fail if it wasn't setup properly. The network setup consists of a test Namespace and a MacVLAN as part of it. All steps are done inside the test Namespace. - Decide if the node should run the task or another one in the farm based on the node ID. The node with the least ID and with power target as up should run it. The other will log why they shouldn't run the task and return with no errors. This is done to ensure only one node runs the task to avoid problems like assigning the same IP. - Get public IPs set on the farm. - Remove all IPs and routes added to the test MacVLAN to ensure any remaining from previous task run are removed. - Skip IPs that are assigned to a contract. - Set the MacVLAN link up. - Iterate over all public IPs and add them with the provided gateway to the MacVLAN. - Validate the IP by querying an external source that return the public IP for the node. - If the public IP returned matches the IP added in the link, then the IP is valid. Otherwise, it is invalid. - Remove all IPs and routes between each IP to make them available for other deployments. - After iterating over all public IPs, set the link down. Result The task only returns a single map of String (IP) to IPReport. The report consists of the IP state (valid, invalid or skipped) and the reason for the state. Result Sample",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/performance/performance.md",
    "title": "Performance Monitor Package",
    "url": "/labs/documentation/developers/internals/zos/performance",
    "content": "Overview The package is a performance monitor in nodes. it schedules tasks, cache their results and allows retrieval of these results through calls. Flow 1. The monitor is started by the service in zos. 2. Tasks are registered with a schedule in the new monitor. 3. A bus handler is opened to allow result retrieval. Node Initialization Check To ensure that the node always has a test result available, a check is performed on node startup for all the registered tasks, if a task doesn't have any stored result, it will run immediately without waiting for the next scheduled time. Scheduling - Tasks are scheduled using a 6 fields cron format. this format provides flexibility to define time, allowing running tasks periodically or at specific time. - Each task has a jitter which is the maximum number of seconds the task could sleep before it runs, this happens to prevent all tests ending up running at exactly the same time. So, for example, if a task is scheduled to run at and its jitter is , it is expected to run anywhere between and . RMB Commands - : - Payload: a payload type that contains the name of the test Possible values: - - - - Return: a single task result. - Possible Error: if no result is stored for the given task. - : - Return: all stored results The rmb direct client can be used to call these commands. check the example Caching Results are stored in a Redis server running on the node. The key in redis is the name of the task prefixed with the word . The value is an instance of struct contains: - Name of the task - Timestamp when the task was run - A brief description about what the task do - The actual returned result from the task Notes: - Storing results by a key ensures each new result overrides the old one, so there is always a single result for each task. - Storing results prefixed with eases retrieving all the results stored by this module. Registered Tests - Public IP Validation - CPUBenchmark - IPerf - Health Check Test Suite Go to this link for a test suite covering the test cases for the performance testing.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/performance/iperf.md",
    "title": "IPerf",
    "url": "/labs/documentation/developers/internals/zos/performance/iperf",
    "content": "Overview The package is designed to facilitate network performance testing using the tool. with both UDP and TCP over IPv4 and IPv6. Configuration - Name: - Schedule: 4 times a day - Jitter: 20 min Details - The package using the iperf binary to examine network performance under different conditions. - It randomly fetch PublicConfig data for randomly public nodes on the chain + all public node from free farm. These nodes serve as the targets for the iperf tests. - For each node, it run the test with 4 times. through (UDP/TCP) using both node IPs (v4/v6) - result will be a slice of all public node report (4 for each) each one will include: Result Sample",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/performance/healthcheck.md",
    "title": "Health Check",
    "url": "/labs/documentation/developers/internals/zos/performance/healthcheck",
    "content": "Overview Health check task executes some checks over ZOS components to determine if the node is in a usable state or not and set flags for the Power Daemon to stop uptime reports if the node is unusable. Configuration - Name: - Schedule: Every 20 mins. Details - Check if the node cache disk is usable or not by trying to write some data to it. If it failed, it set the Readonly flag. Result Sample",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/performance/cpubench.md",
    "title": "CPUBenchmark",
    "url": "/labs/documentation/developers/internals/zos/performance/cpubench",
    "content": "Overview The task is designed to measure the performance of the CPU. it utilizes the cpu-benchmark-simple tool and includes a zos stub to gather the number of workloads running on the node. Configuration - Name: - Schedule: 4 times a day - Jitter: 0 Details - The benchmark simply runs a computation task, calculates the time spent in the computation and reports it in . - The computation is performed in both single-threaded and multi-threaded scenarios. - Lower time = better performance: for a single threaded benchmark, a lower execution time indicates better performance. Result Sample Result Explanation The best way to know what's a good or bad value is by testing and comparing different hardware. Here are some examples: 1x Intel(R) Xeon(R) W-2145 CPU @ 3.70GHz (Q3'2017) 1x Intel(R) Pentium(R) CPU G4400 @ 3.30GHz (Q3'2015) 1x Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz (Q2'2012) 2x Intel(R) Xeon(R) CPU E5-2630 v3 @ 2.40GHz (Q1'2012) 2x Intel(R) Xeon(R) CPU L5640 @ 2.27GHz (Q1'2010) As you can see, the more recent the CPU is, the faster it is, but for a same launch period, you can see Xeon way better than regular/desktop CPU. You have to take in account the amount of threads and the time per threads.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/internal_modules.md",
    "title": "Internal Modules",
    "url": "/labs/documentation/developers/internals/zos/internal_modules",
    "content": "Introduction This document explains in a nutshell the internals of ZOS. This includes the boot process, architecture, the internal modules (and their responsibilities), and the inter-process communication. Booting ZOS is a linux based operating system in the sense that we use the main-stream linux kernel with no modifications (but heavily customized). The base image of ZOS includes linux, busybox, zinit and other required tools that are needed during the boot process. The base image is also shipped with a bootstrap utility that is self-updating on boot which kick starts everything. For more details about the ZOS base image please check 0-initramfs. uses zinit as its or process. acts as a process manager and it takes care of starting all required services in the right order. Using simple configuration that is available under . The base image has a zinit config to start the basic services that are required for booting. These include (mainly) but are not limited to: - internet: A very basic service that tries to connect zos to the internet as fast (and as simple) as possible (over ethernet) using dhcp. This is needed so the system can continue the boot process. Once this one succeeds, it exits and leaves node network management to the more sophisticated ZOS module which is yet to be downloaded and started by bootstrap. - redis: This is required by all zos modules for its IPC (inter process communication). - bootstrap: The bootstrap process which takes care of downloading all required zos binaries and modules. This one requires the service to actually succeed. Bootstrap is a utility that resides on the base image. It takes care of downloading and configuring all zos main services by doing the following: - It checks if there is a more recent version of itself available. If it exists, the process first updates itself before proceeding. - It checks zos boot parameters (for example, which network you are booting into) as set by https://bootstrap.grid.tf/. - Once the network is known, let's call it . This can either be , , or . The proper release is downloaded as follows: - All flists are downloaded from one of the hub , , or repos. Based on the network, only one of those repos is used to download all the support tools and binaries. Those are not included in the base image because they can be updated, added, or removed. - The flist is downloaded (note that $\\{network\\} is replaced with the actual value). This flist includes all zos services from this repository. More information about the zos modules are explained later. - Once all binaries are downloaded, finishes by asking zinit to start monitoring the newly installed services. The bootstrap exits and will never be started again as long as zos is running. - If zos is restarted the entire bootstrap process happens again including downloading the binaries because ZOS is completely stateless (except for some cached runtime data that is preserved across reboots on a cache disk). Zinit As mentioned earlier, is the process manager of zos. Bootstrap makes sure it registers all zos services for zinit to monitor. This means that zinit will take care that those services are always running, and restart them if they have crashed for any reason. Architecture For to be able to run workloads of different types it has split its functionality into smaller modules. Where each module is responsible for providing a single functionality. For example which manages machine storages, hence it can provide low level storage capacity to other services that need it. As an example, imagine that you want to start a . For a to be able to run it will require a image or the image of the VM itself this is normally provided via an (managed by ), then you would need an actual persistent storage (managed by ), a virtual nic (managed by ), another service that can put everything together in a form of a VM (). Then finally a service that orchestrates all of this and translates the user request to an actual workload , you get the picture. IPC All modules running in zos needs to be able to interact with each other. As it shows from the previous example. For example, daemon need to be able to ask daemon to prepare a virtual disk. A new protocol and library was developed to enable this with those extra features: - Modules do not need to know where other modules live, there are no ports, and/or urls that have to be known by all services. - A single module can run multiple versions of an API. - Ease of development. - Auto generated clients. For more details about the message bus please check zbus uses redis as a message bus, hence redis is started in the early stages of zos booting. allows auto generation of which are generated clients against a certain module interface. Hence a module X can interact with a module Y by importing the generated clients and then start making function calls. ZOS Processes (modules) Modules of zos are completely internal. There is no way for an external user to talk to them directly. The idea is the node exposes a public API over rmb, while internally this API can talk to internal modules over . Capacity In this document, you can find detail description of how ZOS does capacity planning.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/vmd/readme.md",
    "title": "VMD Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/vmd/readme",
    "content": "ZBus Storage module is available on zbus over the following channel | module | object | version | |--------|--------|---------| | vmd|vmd| 0.0.1| Home Directory contd keeps some data in the following locations | directory | path| |----|---| | root| | Introduction The vmd module, manages all virtual machines processes, it provide the interface to, create, inspect, and delete virtual machines. It also monitor the vms to make sure they are re-spawned if crashed. Internally it uses to start the Vm processes. It also provide the interface to configure VM logs streamers. zinit unit must run after containerd is running, and the node boot process is complete. Since it doesn't keep state, no dependency on is needed Interface",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/storage/readme.md",
    "title": "Storage Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/storage/readme",
    "content": "Introduction This module is responsible to manage everything related with storage. ZBus Storage module is available on zbus over the following channel | module | object | version | |--------|--------|---------| | storage|storage| 0.0.1| Overview On start, storaged holds ownership of all node disks, and it separate it into 2 different sets: - SSD Storage: For each ssd disk available, a storage pool of type SSD is created - HDD Storage: For each HDD disk available, a storage pool of type HDD is created Then can provide the following storage primitives: - : (with quota). The btrfs subvolume can be used by used by to support read-write operations on flists. Hence it can be used as rootfs for containers and VMs. This storage primitive is only supported on pools. - On boot, storaged will always create a permanent subvolume with id (of 100G) which will be used by the system to persist state and to hold cache of downloaded files. - : Virtual disk that can be attached to virtual machines. this is only possible on pools. - : that is a full disk that gets allocated and used by a single service. Note that a single 0-db instance can serve multiple zdb namespaces for multiple users. This is only possible for on pools. You already can tell that ZOS can work fine with no HDD (it will not be able to server zdb workloads though), but not without SSD. Hence a zos with no SSD will never register on the grid. List of sub-modules - disks - 0-db - booting On Node Booting When the module boots: - Make sure to mount all available pools - Scan available disks that are not used by any pool and create new pools on those disks. (all pools now are created with policy) - Try to find and mount a cache sub-volume under /var/cache. - If no cache sub-volume is available a new one is created and then mounted. zinit unit The zinit unit file of the module specify the command line, test command, and the order where the services need to be booted. Storage module is a dependency for almost all other system modules, hence it has high boot presidency (calculated on boot) by zinit based on the configuration. The storage module is only considered running, if (and only if) the /var/cache is ready Interface",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/provision/readme.md",
    "title": "Provision Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/provision/readme",
    "content": "ZBus This module is autonomous module and is not reachable over . Introduction This module is responsible to provision/decommission workload on the node. It accepts new deployment over and tries to bring them to reality by running a series of provisioning workflows based on the workload . knows about all available daemons and it contacts them over to ask for the needed services. The pull everything together and update the deployment with the workload state. If node was restarted, tries to bring all active workloads back to original state. Supported workload 0-OS currently support 8 type of workloads: - network - (virtual machine) - (disk): usable only by a - (v4 and/or v6): usable only by a - - - -",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/node/readme.md",
    "title": "Node Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/node/readme",
    "content": "Introduction This module is responsible of registering the node on the grid, and handling of grid events. The node daemon broadcast the intended events on zbus for other modules that are interested in those events. The node also provide zbus interfaces to query some of the node information. Zbus Node module is available on zbus over the following channel | module | object | version | |--------|--------|---------| |host |host| 0.0.1 |system |system| 0.0.1 |events |events| 0.0.1 Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/network/setup_farm_network.md",
    "title": "Setup",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/network/setup_farm_network",
    "content": "Introduction We present ZOSv2 network considerations. Running ZOS on a node is just a matter of booting it with a USB stick, or with a dhcp/bootp/tftp server with the right configuration so that the node can start the OS. Once it starts booting, the OS detects the NICs, and starts the network configuration. A Node can only continue it's boot process till the end when it effectively has received an IP address and a route to the Internet. Without that, the Node will retry indefinitely to obtain Internet access and not finish it's startup. So a Node needs to be connected to a __wired__ network, providing a dhcp server and a default gateway to the Internet, be it NATed or plainly on the public network, where any route to the Internet, be it IPv4 or IPv6 or both is sufficient. For a node to have that ability to host user networks, we strongly advise to have a working IPv6 setup, as that is the primary IP stack we're using for the User Network's Mesh to function. Running ZOS (v2) at home Running a ZOS Node at home is plain simple. Connect it to your router, plug it in the network, insert the preconfigured USB stick containing the bootloader and the , power it on. You will then see it appear in the Cockpit (), under your farm. Running ZOS (v2) in a multi-node farm in a DC Multi-Node Farms, where a farmer wants to host the nodes in a data centre, have basically the same simplicity, but the nodes can boot from a boot server that provides for DHCP, and also delivers the iPXE image to load, without the need for a USB stick in every Node. A boot server is not really necessary, but it helps ;-). That server has a list of the MAC addresses of the nodes, and delivers the bootloader over PXE. The farmer is responsible to set-up the network, and configure the boot server. Necessities The Farmer needs to: - Obtain an IPv6 prefix allocation from the provider. A will do, that is publicly reachable, but a is advisable if the farmer wants to provide IPv6 transit for User Networks - If IPv6 is not an option, obtain an IPv4 subnet from the provider. At least one IPv4 address per node is needed, where all IP addresses are publicly reachable. - Have the Nodes connected on that public network with a switch so that all Nodes are publicly reachable. - In case of multiple NICS, also make sure his farm is properly registered in BCDB, so that the Node's public IP Addresses are registered. - Properly list the MAC addresses of the Nodes, and configure the DHCP server to provide for an IP address, and in case of multiple NICs also provide for private IP addresses over DHCP per Node. - Make sure that after first boot, the Nodes are reachable. IPv6 IPv6, although already a real protocol since '98, has seen reluctant adoption over the time it exists. That mostly because ISPs and Carriers were reluctant to deploy it, and not seeing the need since the advent of NAT and private IP space, giving the false impression of security. But this month (10/2019), RIPE sent a mail to all it's LIRs that the last consecutive /22 in IPv4 has been allocated. Needless to say, but that makes the transition to IPv6 in 2019 of utmost importance and necessity. Hence, ZOS starts with IPv6, and IPv4 is merely an afterthought ;-) So in a nutshell: we greatly encourage Farmers to have IPv6 on the Node's network. Routing/firewalling Basically, the Nodes are self-protecting, in the sense that they provide no means at all to be accessed through listening processes at all. No service is active on the node itself, and User Networks function solely on an overlay. That also means that there is no need for a Farm admin to protect the Nodes from exterior access, albeit some DDoS protection might be a good idea. In the first phase we will still allow the Host OS (ZOS) to reply on ICMP ping requests, but that 'feature' might as well be blocked in the future, as once a Node is able to register itself, there is no real need to ever want to try to reach it. Multi-NIC Nodes Nodes that Farmers deploy are typically multi-NIC Nodes, where one (typically a 1GBit NIC) can be used for getting a proper DHCP server running from where the Nodes can boot, and one other NIC (1Gbit or even 10GBit), that then is used for transfers of User Data, so that there is a clean separation, and possible injections bogus data is not possible. That means that there would be two networks, either by different physical switches, or by port-based VLANs in the switch (if there is only one). - Management NICs The Management NIC will be used by ZOS to boot, and register itself to the GRID. Also, all communications from the Node to the Grid happens from there. - Public NICs Farmers and the grid A Node, being part of the Grid, has no concept of 'Farmer'. The only relationship for a Node with a Farmer is the fact that that is registered 'somewhere (TM)', and that a such workloads on a Node will be remunerated with Tokens. For the rest, a Node is a wholly stand-alone thing that participates in the Grid. Where the underlay part of the wireguard interfaces get instantiated in the Public container (namespace), and once created these wireguard interfaces get sent into the User Network (Network Resource), where a user can then configure the interface a he sees fit. The router of the farmer fulfills 2 roles: - NAT everything in the OOB network to the outside, so that nodes can start and register themselves, as well get tasks to execute from the BCDB. - Route the assigned IPv4 subnet and IPv6 public prefix on the public segment, to which the public container is connected. As such, in case that the farmer wants to provide IPv4 public access for grid proxies, the node will need at least one (1) IPv4 address. It's free to the farmer to assign IPv4 addresses to only a part of the Nodes. On the other hand, it is quite important to have a proper IPv6 setup, because things will work out better. It's the Farmer's task to set up the Router and the switches. In a simpler setup (small number of nodes for instance), the farmer could setup a single switch and make 2 port-based VLANs to separate OOB and Public, or even wit single-nic nodes, just put them directly on the public segment, but then he will have to provide a DHCP server on the Public network.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/network/readme.md",
    "title": "Network Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/network/readme",
    "content": "Introduction Zero-OS Networking is a module that provides a set of tools to manage the network of a Zero-OS node. TABLE OF CONTENTS - Introduction to networkd - Vocabulary Definitions - Wireguard Mesh Details - Farm Network Setup",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/network/mesh.md",
    "title": "Zero-Mesh",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/network/mesh",
    "content": "Zero-Mesh What It Is When a user wants to deploy a workload, whatever that may be, that workload needs connectivity. If there is just one service to be run, things can be simple, but in general there are more than one services that need to interact to provide a full stack. Sometimes these services can live on one node, but mostly these service will be deployed over multiple nodes, in different containers. The Mesh is created for that, where containers can communicate over an encrypted path, and that network can be specified in terms of IP addresses by the user. Overlay Network Zero-Mesh is an overlay network. That requires that nodes need a proper working network with existing access to the Internet in the first place, being full-blown public access, or behind a firewall/home router that provides for Private IP NAT to the internet. Right now Zero-Mesh has support for both, where nodes behind a firewall are HIDDEN nodes, and nodes that are directly connected, be it over IPv6 or IPv4 as 'normal' nodes. Hidden nodes can thus only be participating as client nodes for a specific user Mesh, and all publicly reachable nodes can act as aggregators for hidden clients in that user Mesh. Also, a Mesh is static: once it is configured, and thus during the lifetime of the network, there is one node containing the aggregator for Mesh clients that live on hidden nodes. So if then an aggregator node has died or is not reachable any more, the mesh needs to be reapplied, with __some__ publicly reachable node as aggregator node. The Exit labeled NR in that graph is the point where Network Resources in Hidden Nodes connect to. These Exit NRs are then the transfer nodes between Hidden NRs. ZOS networkd The networkd daemon receives tasks from the provisioning daemon, so that it can create the necessary resources for a Mesh participator in the User Network (A network Resource - NR). A network is defined as a whole by the User, using the tools in the 3bot to generate a proper configuration that can be used by the network daemon. What networkd takes care of, is the establishment of the mesh itself, in accordance with the configuration a farmer has given to his nodes. What is configured on top of the Mesh is user defined, and applied as such by the networkd. Internet reachability per Network Resource Every node that participates in a User mesh, will also provide for Internet access for every network resource. that means that every NR has the same Internet access as the node itself. Which also means, in terms of security, that a firewall in the node takes care of blocking all types of entry to the NR, effectively being an Internet access diode, for outgoing and related traffic only. In a later phase a user will be able to define some network resource as __sole__ outgoing Internet Access point, but for now that is not yet defined. Interworkings So How is that set up ? Every node participating in a User Network, sets up a Network Resource. Basically, it's a Linux Network Namespace (sort of a network virtual machine), that contains a wireguard interface that has a list of other Network resources it needs to route encrypted packets toward. As a User Network has a range typically a (like ), that is user defined. The User then picks a subnet from that range (like e.g. ) to assign that to every new NR he wants to participate in that Network. Workloads that are then provisioned are started in a newly created Container, and that container gets a User assigned IP __in__ that subnet of the Network Resource. The Network resource itself then handles the routing and firewalling for the containers that are connected to it. Also, the Network Resource takes care of internet connectivity, so that the container can reach out to other services on the Internet. Also in a later phase, a User will be able to add IPv6 prefixes to his Network Resources, so that containers are reachable over IPv6. Fully-routed IPv6 will then be available, where an Exit NR will be the entrypoint towards that network. Network Resource Internals Each NR is basically a router for the User Network, but to allow NRs to access the Internet through the Node's local connection, there are some other internal routers to be added. Internally it looks like this : During startup of the Node, the ndmz is put in place, following the configuration if it has a single internet connection , or that with a dual-nic setup, a separate nic is used for internet access. The ndmz network has the carrier-grade nat allocation assigned, so we don'tinterfere with RFC1918 private IPv4 address space, so users can use any of them (and not any of , of course)",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/network/introduction.md",
    "title": "Introduction to Networkd",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/network/introduction",
    "content": "Introduction We provide an introduction to Networkd, the network manager of 0-OS. Boot and initial setup At boot, be it from an usb stick or PXE, ZOS starts up the kernel, with a few necessary parameters like farm ID and/or possible network parameters, but basically once the kernel has started, zinit among other things, starts the network initializer. In short, that process loops over the available network interfaces and tries to obtain an IP address that also provides for a default gateway. That means: it tries to get Internet connectivity. Without it, ZOS stops there, as not being able to register itself, nor start other processes, there wouldn't be any use for it to be started anyway. Once it has obtained Internet connectivity, ZOS can then proceed to make itself known to the Grid, and acknowledge it's existence. It will then regularly poll the Grid for tasks. Once initialized, with the network daemon running (a process that will handle all things related to networking), ZOS will set up some basic services so that workloads can themselves use that network. Networkd functionality The network daemon is in itself responsible for a few tasks, and working together with the provision daemon it mainly sets up the local infrastructure to get the user network resources, together with the wireguard configurations for the user's mesh network. The Wireguard mesh is an overlay network. That means that traffic of that network is encrypted and encapsulated in a new traffic frame that the gets transferred over the underlay network, here in essence the network that has been set up during boot of the node. For users or workloads that run on top of the mesh, the mesh network looks and behaves like any other directly connected workload, and as such that workload can reach other workloads or services in that mesh with the added advantage that that traffic is encrypted, protecting services and communications over that mesh from too curious eyes. That also means that workloads between nodes in a local network of a farmer is even protected from the farmer himself, in essence protecting the user from the farmer in case that farmer could become too curious. As the nodes do not have any way to be accessed, be it over the underlaying network or even the local console of the node, a user can be sure that his workload cannot be snooped upon. Techie talk - boot and initial setup For ZOS to work at all (the network is the computer), it needs an internet connection. That is: it needs to be able to communicate with the BCDB over the internet. So ZOS starts with that: with the process, that tries go get the node to receive an IP address. That process will have set-up a bridge (), connected to an interface that is on an Internet-capable network. That bridge will have an IP address that has Internet access. Also, that bridge is there for future public interfaces into workloads. Once ZOS can reach the Internet, the rest of the system can be started, where ultimately, the daemon is started. - networkd initial setup starts with recensing the available Network interfaces, and registers them to the BCDB (grid database), so that farmers can specify non-standard configs like for multi-nic machines. Once that is done, registers itself to the zbus, so it can receive tasks to execute from the provsioning daemon (). These tasks are mostly setting up network resources for users, where a network resource is a subnet in the user's wireguard mesh. - multi-nic setups When someone is a farmer, exploiting nodes somewhere in a datacentre, where the nodes have multiple NICs, it is advisable (though not necessary) to differentiate OOB traffic (like initial boot setup) from user traffic (as well the overlay network as the outgoing NAT for nodes for IPv4) to be on a different NIC. With these parameters, a user will have to make sure their switches are properly configured, more in docs later. - registering and configurations Once a node has booted and properly initialized, registering and configuring the node to be able to accept workloads and their associated network configs, is a two-step process. First, the node registers it's live network setup to the BCDB. That is : all NICs with their associated IP addresses and routes are registered so a farm admin can in a second phase configure eventual separate NICs to handle different kinds of workloads. In that secondary phase, a farm admin can then set-up the NICs and their associated IP's manually, so that workloads can start using them. Wireguard explanations - wireguard as pointopoint links and what that means Wireguard is a special type of VPN, where every instance is as well server for multiple peers as client towards multiple peers. That way you can create fanning-out connections als receive connections from multiple peers, creating effectively a mesh of connections. - wireguard port management Every wireguard point (a network resource point) needs a destination/port combo when it's publicly reachable. The destination is a public ip, but the port is the differentiator. So we need to make sure every network wireguard listening port is unique in the node where it runs, and can be reapplied in case of a node's reboot. ZOS registers the ports already in use to the BCDB, so a user can the pick a port that is not yet used. - wireguard and hidden nodes Hidden nodes are nodes that are in essence hidden behind a firewall, and unreachable from the Internet to an internal network, be it as an IPv4 NATed host or an IPv6 host that is firewalled in any way, where it's impossible to have connection initiations form the Internet to the node. As such, these nodes can only partake in a network as client-only towards publicly reachable peers, and can only initiate the connections themselves. (ref previous drawing). To make sure connectivity stays up, the clients (all) have a keepalive towards all their peers so that communications towards network resources in hidden nodes can be established. Caveats - hidden nodes Hidden nodes live (mostly) behind firewalls that keep state about connections and these states have a lifetime. We try at best to keep these communications going, but depending of the firewall your mileage may vary (YMMV ;-)) - local underlay network reachability When multiple nodes live in a same hidden network, at the moment we don't try to have the nodes establish connectivity between themselves, so all nodes in that hidden network can only reach each other through the intermediary of a node that is publicly reachable. So to get some performance, a farmer will have to have real routable nodes available in the vicinity. So for now, a farmer is better off to have his nodes really reachable over a public network. - IPv6 and IPv4 considerations While the mesh can work over IPv4 __and__ IPv6 at the same time, the peers can only be reached through one protocol at the same time. That is a peer is IPv4 __or__ IPv6, not both. Hence if a peer is reachable over IPv4, the client towards that peer needs to reach it over IPv4 too and thus needs an IPv4 address. We advise strongly to have all nodes properly set-up on a routable unfirewalled IPv6 network, so that these problems have no reason to exist.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/network/definitions.md",
    "title": "Definitions",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/network/definitions",
    "content": "Introduction We present definitions of words used through the documentation. Node TL;DR: Computer. A Node is a computer with CPU, Memory, Disks (or SSD's, NVMe) connected to _A_ network that has Internet access. (i.e. it can reach www.google.com, just like you on your phone, at home) That Node will, once it has received an IP address (IPv4 or IPv6), register itself when it's new, or confirm it's identity and it's online-ness (for lack of a better word). TNo : Tenant Network Object TL;DR: The Network Description. We named it so, because it is a data structure that describes the __whole__ network a user can request (or setup). That network is a virtualized overlay network. Basically that means that transfer of data in that network always is encrypted, protected from prying eyes, and __resources in that network can only communicate with each other__ unless there is a special rule that allows access. Be it by allowing access through firewall rules, and/or through a proxy (a service that forwards requests on behalf of, and ships replies back to the client). NR: Network Resource TL;DR: the Node-local part of a TNo. The main building block of a TNo; i.e. each service of a user in a Node lives in an NR. Each Node hosts User services, whatever type of service that is. Every service in that specific node will always be solely part of the Tenant's Network. (read that twice). So: A Network Resource is the thing that interconnects all other network resources of the TN (Tenant Network), and provides routing/firewalling for these interconnects, including the default route to the BBI (Big Bad Internet), aka ExitPoint. All User services that run in a Node are in some way or another connected to the Network Resource (NR), which will provide ip packet forwarding and firewalling to all other network resources (including the Exitpoint) of the TN (Tenant Network) of the user. (read that three times, and the last time, read it slowly and out loud)",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/identity/upgrade.md",
    "title": "Node Upgrade",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/identity/upgrade",
    "content": "Introduction We provide information concerning node upgrade with ZOS. We also explain the philosophy behind ZOS. Philosophy 0-OS is meant to be a black box no one can access. While this provide some nice security features it also makes it harder to manage. Specially when it comes to update/upgrade. Hence, zos only trust few sources for upgrade packages. When the node boots up it checks the sources for the latest release and make sure all the local binaries are up-to-date before continuing the booting. The flist source must be rock-solid secured, that's another topic for different documentation. The run mode defines which flist the node is going to use to boot. Run mode can be specified by passing to the kernel boot params. Currently we have those different run modes. - dev: ephemeral network only setup to develop and test new features. Can be created and reset at anytime - test: Mostly stable features that need to be tested at scale, allow preview and test of new features. Always the latest and greatest. This network can be reset sometimes, but should be relatively stable. - prod: Released of stable version. Used to run the real grid with real money. Cannot be reset ever. Only stable and battle tested feature reach this level. Booting a new node The base image for zos contains a very small subset of tools, plus the boot program. Standing alone, the image is not really useful. On boot and after initial start of the system, the boot program kicks in and it does the following: - Detect the boot flist that the node must use to fully start. The default is hard-coded into zos, but this can be overridden by the kernel param. The kernel param can get deprecated without a warning, since it's a development flag. - The bootstrap, will then mount this flist using 0-fs, this of course requires a working connection to the internet. Hence bootstrap is configured to wait for the service. - The flist information (name, and version) is saved under and . - The bootstrap makes sure to copy all files in the flist to the proper locations under the system rootfs, this include config files. - Then zinit is asked to monitor new installed services, zinit takes care of those services and make sure they are properly working at all times. - Bootstrap, umounts the flist, cleans up before it exits. - Boot process continues. Runtime upgrade of a node Once the node is up and running, identityd takes over and it does the following: - It loads the boot info files and - If the file does not exist, will assume the node is booted with other means than an flist (for example overlay). In that case, identityd will log this, and disable live upgrade of the node. - If the file exists, the flist will be monitored on the for changes. Any change in the version will initiate a life upgrade routine. - Once the flist change is detected, identityd will mount the flist, make sure identityd is running the latest version. If not, identityd will update itself first before continuing. - services that will need update will be gracefully stopped. - will then make sure to update all services from the flist, and config files. and restart the services properly. - services are started again after all binaries has been copied Technical 0-OS is designed to provide maximum uptime for its workload, rebooting a node should never be required to upgrade any of its component (except when we push a kernel upgrade). Flist layout The files in the upgrade flist needs to be located in the filesystem tree at the same destination they would need to be in 0-OS. This allow the upgrade code to stays simple and only does a copy from the flist to the root filesystem of the node. Booting a new node, or updating a node uses the same flist. Hence, a boot flist must container all required services for node operation. Example: 0-OS filesystem:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/identity/identity.md",
    "title": "Node ID Generation",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/identity",
    "content": "Introduction We explain the node ID generation process. ZBus Identity module is available on zbus over the following channel | module | object | version | |--------|--------|---------| | identity|manager| 0.0.1| Home Directory identity keeps some data in the following locations | directory | path| |----|---| | root| | Introduction Identity manager is responsible for maintaining the node identity (public key). The manager make sure the node has one valid ID during the entire lifetime of the node. It also provide service to sign, encrypt and decrypt data using the node identity. On first boot, the identity manager will generate an ID and then persist this ID for life. Since the identity daemon is the only one that can access the node private key, it provides an interface to sign, verify and encrypt data. This methods are available for other modules on the local node to use. On Node Booting - Check if node already has a seed generated - If yes, load the node identity - If not, generate a new ID - Start the zbus daemon. ID generation At this time of development the ID generated by identityd is the base58 encoded public key of a ed25519 key pair. The key pair itself is generated from a random seed of 32 bytes. It is this seed that is actually saved on the node. And during boot the key pair is re-generated from this seed if it exists. Cryptography The signing and encryption capabilities of the identity module rely on this ed25519 key pair. For signing, it directly used the key pair. For public key encryption, the ed25519 key pair is converted to its cure25519 equivalent and then use use to encrypt the data. zinit unit The zinit unit file of the module specify the command line, test command, and the order where the services need to be booted. require to make sure the seed is persisted over reboots, to make sure node has the same ID during the full life time of the node. The identityd daemon is only considered running if the seed file exists. Interface For an up to date interface please check code here",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/flist/readme.md",
    "title": "Flist Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/flist/readme",
    "content": "Zbus Flist module is available on zbus over the following channel: | module | object | version | |--------|--------|---------| |flist |flist| 0.0.1 Home Directory flist keeps some data in the following locations: | directory | path| |----|---| | root| | Introduction This module is responsible to \"mount an flist\" in the filesystem of the node. The mounted directory contains all the files required by containers or (in the future) VMs. The flist module interface is very simple. It does not expose any way to choose where to mount the flist or have any reference to containers or VM. The only functionality is to mount a given flist and receive the location where it is mounted. It is up to the above layer to do something useful with this information. The flist module itself doesn't contain the logic to understand the flist format or to run the fuse filesystem. It is just a wrapper that manages 0-fs processes. Its only job is to download the flist, prepare the isolation of all the data and then start 0-fs with the proper arguments. Public interface zinit unit The zinit unit file of the module specifies the command line, test command, and the order in which the services need to be booted. Flist module depends on the storage and network pkg. This is because it needs connectivity to download flist and data and it needs storage to be able to cache the data once downloaded. Flist doesn't do anything special on the system except creating a bunch of directories it will use during its lifetime.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/zos/internal_modules/container/readme.md",
    "title": "Container Module",
    "url": "/labs/documentation/developers/internals/zos/internal_modules/container/readme",
    "content": "ZBus Storage module is available on zbus over the following channel | module | object | version | |--------|--------|---------| | container|container| 0.0.1| Home Directory contd keeps some data in the following locations | directory | path| |----|---| | root| | Introduction The container module, is a proxy to containerd. The proxy provides integration with zbus. The implementation is the moment is straight forward, which includes preparing the OCI spec for the container, the tenant containerd namespace, setting up proper capabilities, and finally creating the container instance on . The module is fully stateless, all container information is queried during runtime from . zinit unit must run after containerd is running, and the node boot process is complete. Since it doesn't keep state, no dependency on is needed Interface",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/rmb_toc/rmb_toc.md",
    "title": "Reliable Message Bus (RMB)",
    "url": "/labs/documentation/developers/internals/rmb_toc",
    "content": "Reliable message bus is a secure communication panel that allows bots to communicate together in a chat like way. It makes it very easy to host a service or a set of functions to be used by anyone, even if your service is running behind NAT. Out of the box RMB provides the following: - Guarantee authenticity of the messages. - You are always sure that the received message is from whoever is pretending to be. - End to End encryption. - Support for 3rd party hosted relays. - Anyone can host a relay and people can use it safely since there is no way messages can be inspected while using e2e. That's similar to home servers by matrix. TABLE OF CONTENTS - Introduction to RMB - Coding Guides - RMB Specs - RMB Peer - RMB Relay",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/rmb_toc/rmb_specs.md",
    "title": "RMB Specs",
    "url": "/labs/documentation/developers/internals/rmb_toc/rmb_specs",
    "content": "RMB is (reliable message bus) is a set of protocols and tools (client and daemon) that aims to abstract inter-process communication between multiple processes running over multiple nodes. The point behind using RMB is to allow the clients to not know much about the other process, or where it lives (client doesn't know network addresses, or identity). Unlike HTTP(S) or gRPC where the caller must know exact address (or dns-name) and endpoints of the service it's trying to call. Instead RMB requires you to only know about - Twin ID (numeric ID) of the endpoint as defined by - Command (string) is simply the function to call - The request \"body\" which is binary blob that is passed to the command as is - implementation of the command need then to interpret this data as intended (out of scope of rmb) Twins are stored on tfchain. hence identity of twins is granted not to be spoofed, or phished. When a twin is created he needs to define 2 things: - RMB Relay - His Elliptic Curve public key (we use secp256k1 (K-256) elliptic curve) > This data is stored on tfchain forever, and only the twin can change it using his secure-key. Hence phishing is impossible. A twin can decide later to change this encryption key or relay. Once all twins has their data set correctly on the chain. Any 2 twins can communicate with full end-to-end encryption as follows: - A twin establish a WS connection to his relay of choice - A twin create an as defined by the protobuf schema - Twin fill in all envelope information (more about this later) - Twin pushes the envelope to the relay - If the destination twin is also using the same relay, message is directly forwarded to this twin - If federation is needed (twin using different relay), message is forwarded to the proper twin. > NOTE: since a sender twin need to also encrypt the message for the receiver twin, a twin queries the for the twin information. Usually it caches this data locally for reuse, hence clients need to make sure this data is always up-to-date. On the relay, the relay checks federation information set on the envelope and then decide to either to forward it internally to one of it's connected clients, or forward it to the destination relay. Hence relays need to be publicly available. When the relay receive a message that is destined to a connected client, it queue it for delivery. The relay can maintain a queue of messages per twin to a limit. If the twin does not come back online to consume queued messages, the relay will start to drop messages for that specific twin client. Once a twin come online and connect to its peer, the peer will receive all queued messages. the messages are pushed over the web-socket as they are received. the client then can decide how to handle them (a message can be a request or a response). A message type can be inspected as defined by the schema. Overview of the Operation of RMB Relay ! Connections By design, there can be only with that specific ID. Hence only has set on tfchain per twin. This force a twin to always use this defined relay if it wishes to open multiple connections to its relay. In other words, a twin once sets up a relay on its public information can only use that relay for all of its connections. If decided to change the relay address, all connections must use the new relay otherwise messages will get lost as they will be delivered to the wrong relay. In an RPC system, the response of a request must be delivered to the requester. Hence if a twin is maintaining multiple connections to its relay, it need to identify the connection to allow the relay to route back the responses to the right requester. We call this a . The must be unique per twin. The relay can maintain MULTIPLE connections per peer given that each connection has a unique SID (session id). But for each (twin-id, session-id) combo there can be only one connection. if a new connection with the same (twin-id, session-id) is created, the older connection is dropped. The message received always has the session-id as part of the source address. a reply message then must have destination set back to the source as is, this allows the relay to route the message back correctly without the need to maintain an internal state. The process reserved the sid. It connects with No session id, hence you can only run one per (identity). But the same twin (identity) can make other connection with other rmb clients (for example rmb-sdk-go direct client) to establish more connections with unique session ids. Peer Any language or code that can open connection to the relay can work as a peer. A peer need to do the following: - Authenticate with the relay. This is by providing a that is signed by the twin key (more on that later) - Handle received binary mesasge - Send binary messages Each message is an object of type serialized as with protobuf. Type definition can be found under Peer implementation This project already have a peer implementation that works as local peer gateway. By running this peer instance it allows you to run multiple services (and clients) behind that gateway and they appear to the world as a single twin. - The peer gateway (rmb-peer) starts and connects to realy - If requests are received, they are verified, decrypted and pushed to a redis queue that as command specific (from the envelope) - A service can then be waiting on this redis queue for new messages - The service can process the command, and push a response back to a specific redis queue for responses. - The gateway can then pull ready responses from the responses queue, create a valid envelope, encrypt, and sign and send to destination ! Message Types Concerning, message types, to make it easy for apps to work behind an , we use JSON message for communication between the local process and the rmb-peer. the rmb-peer still maintains a fully binary communication with the relay. A request message is defined as follows Output Requests This is created by a client who wants to request make a request to a remote service > this message is pushed to to be picked up by the peer Incoming Response A response message is defined as follows this is what is received as a response by a client in response to his outgoing request. > This response is what is pushed to queue defined by the outgoing request, hence the client need to wait on this queue until the response is received or it times out Incoming Request An incoming request is a modified version of the request that is received by a service running behind RMB peer > this request is received on (always prefixed with ) Services that receive this needs to make sure their responses to have the same value as the incoming request Outgoing Response A response message is defined as follows this is what is sent as a response by a service in response to an incoming request. Your bot (server) need to make sure to set to the same value as the incoming request The > this response is what is pushed to End2End Encryption Relay is totally opaque to the messages. Our implementation of the relay does not poke into messages except for the routing attributes (source, and destinations addresses, and federation information). But since the relay is designed to be hosted by other 3rd parties (hence federation) you should not fully trust the relay or whoever is hosting it. Hence e2e was needed As you already understand e2e is completely up to the peers to implement, and even other implementations of the peers can agree on a completely different encryption algorithm and key sharing algorithm (again, relay does not care). But in our implementation of the e2e (rmb-peer) things goes like this - Each twin has a field on tfchain. when rmb-peer start, it generates an key from the same seed as the user tfchain mnemonics. Note that this will not make the encryption key and the signing key any related, they just are driven from the same seed. - On start, if the key is not already set on the twin object, the key is updated. - If a peer A is trying to send a message to peer B. but peer B does not has his set, peer A will send the message in plain-text format (please check the protobuf envelope type for details) - If peer B has public key set, peer A will prefer e2e encryption and will does the following: - Drive a shared secret point with algorithm, the key is the of that point - - create a 12 bytes random nonce - encrypt data as - create cipher as - fill - on receiving a message peer B does the same in the opposite direction - split data and nonce (nonce is always first 12 bytes) - derive the same shared key - - * Rate Limiting To avoid abuse of the server, and prevent DoS attacks on the relay, a rate limiter is used to limit the number of clients' requests.\\ It was decided that the rate limiter should only watch websocket connections of users, since all other requests/connections with users consume little resources, and since the relay handles the max number of users inherently.\\ The limiter's configurations are passed as a command line argument . represents the number of messages a twin is allowed to send in each time window, represents the total size of messages in bytes a twin is allowed to send in each time window.\\ Currently there are two implementations of the rate limiter: - which imposes no limits on users. - which breaks the timeline into fixed time windows, and allows a twin to send a fixed number of messages, with a fixed total size, in each time window. If a twin exceeded their limits in some time window, their message is dropped, an error message is sent back to the user, the relay dumps a log about this twin, and the user gets to keep their connection with the relay.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/rmb_toc/rmb_intro.md",
    "title": "Introduction to RMB",
    "url": "/labs/documentation/developers/internals/rmb_toc/rmb_intro",
    "content": "Introduction RMB is (reliable message bus) is a set of protocols and a server that aims to abstract inter-process communication between multiple processes running over multiple nodes. The point behind using RMB is to allow the clients to not know much about the other process, or where it lives (client doesn't know network addresses, or identity). Unlike HTTP(S) where the caller must know exact address (or dns-name) and endpoints of the calls. Instead RMB requires you to only know about - Twin ID (numeric ID) of where the service can be found - Command (string) is simply the function to call - The request \"body\" which is binary blob that is passed to the command as is - implementation of the command need then to interpret this data as intended (out of scope of rmb) Twins are stored on tfchain. hence identity of twins is granted not to be spoofed, or phished. When a twin is created he needs to define 2 things: - RMB RELAYS - His Elliptic Curve public key (we use secp256k1 (K-256) elliptic curve) Once all twins has their data set correctly on the chain. Any 2 twins can communicate with full end-to-end encryption as follows: - A twin establish a WS connection to his relays - A twin create an as defined by the protobuf schema - Twin fill end all envelope information (more about this later) - Twin pushes the envelope to one of his relays When received by the relay, it will determine whether to deliver the message to one of its directly connected clients or to a remote relay. the message processed as follows: - If the destination twin is also using the same relay, local route will have priority over others and message is directly forwarded to this twin. - If federation is needed (twin using different relay), message is forwarded to one of the twin's relays. Any new messages that is designated to this twin, is pushed over the websocket to this twin. The twin can NOT maintain multiple connections to same relay hence a small tool (rmb-peer) is provided that runs as a dispatcher for a single twin identity. This rmb-peer tool makes it possible to run multiple services behind this twin and push replies back to their initiators Overview of the Operation of RMB Relay ! Connections The relay can maintain MULTIPLE connections per peer given that each connection has a unique SID (session id). But for each (twin-id, session-id) combo there can be only one connection. if a new connection with the same (twin-id, session-id) is created, the older connection is dropped. The process reserved the sid. It connection with No session id, hence you can only run one per (identity). But the same twin (identity) can make other connection with other rmb clients (for example rmb-sdk-go direct client) to establish more connections with unique session ids. Federations Starting from version 1.1.0, the federation field has been deprecated, and the logic of federation has moved to happen in the relays. Relay is now responsible for determining whether to deliver the message to one of its directly connected clients or to a remote relay. Relay now has an in-memory ranking system to rank its known relays according to their known mean failure rate over a recent configured period of time (time window). The ranking system used to give a hint to the router (when a twin has multiple configured relays on-chain) to try the relays that have a higher chance of working first, minimizing routing messages to services that failed recently (minimizing the latency). The rank of a relay will heal over time because the system will only consider failures in the recent time frame, allowing the router to revisit the relay and distribute the load between all working services. For relays with the same failure rate, the order will be randomized. The ranker time window can be configured when starting the relay by specifying the period in seconds after the option. If the option is omitted, the default value of one hour will be used. Example: Peer Any language or code that can open connection to the relay can work as a peer. A peer need to do the following: - Authenticate with the relay. This is by providing a that is signed by the twin key (more on that later) - Handle received binary mesasge - Send binary messages Each message is an object of type serialized as with protobuf. Type definition can be found under Peer Implementation This project already have a peer implementation that works as local peer gateway. By running this peer instance it allows you to run multiple services (and clients) behind that gateway and they appear to the world as a single twin. - The peer gateway (rmb-peer) starts and connects to his relays - If requests are received, they are verified, decrypted and pushed to a redis queue that as command specific (from the envelope) - A service can then be waiting on this redis queue for new messages - The service can process the command, and push a response back to a specific redis queue for responses. - The gateway can then pull ready responses from the responses queue, create a valid envelope, encrypt, and sign and send to destination ! message types To make it easy for apps to work behind an , we use JSON message for communication between the local process and the rmb-peer. the rmb-peer still maintains a fully binary communication with the relay. A request message is defined as follows Output Requests This is created by a client who wants to request make a request to a remote service > this message is pushed to to be picked up by the peer Incoming Response A response message is defined as follows this is what is received as a response by a client in response to his outgoing request. > this response is what is pushed to queue defined by the outgoing request, hence the client need to wait on this queue until the response is received or it times out Incoming Request An incoming request is a modified version of the request that is received by a service running behind RMB peer > this request is received on (always prefixed with ) Services that receive this needs to make sure their responses to have the same value as the incoming request Outgoing Response A response message is defined as follows this is what is sent as a response by a service in response to an incoming request. Your bot (server) need to make sure to set to the same value as the incoming request > This response is what is pushed to End2End Encryption Relay is totally opaque to the messages. Our implementation of the relay does not poke into messages except for the routing attributes (source, and destinations addresses, and federation information). But since the relay is designed to be hosted by other 3rd parties (hence federation) you should not fully trust the relay or whoever is hosting it. Hence e2e was needed As you already understand e2e is completely up to the peers to implement, and even other implementations of the peers can agree on a completely different encryption algorithm and key sharing algorithm (again, relay does not care). But in our implementation of the e2e (rmb-peer) things goes like this - Each twin has a field on tfchain. when rmb-peer start, it generates an key from the same seed as the user tfchain mnemonics. Note that this will not make the encryption key and the signing key any related, they just are driven from the same seed. - On start, if the key is not already set on the twin object, the key is updated. - If a peer A is trying to send a message to peer B. but peer B does not has his set, peer A will send the message in plain-text format (please check the protobuf envelope type for details) - If peer B has public key set, peer A will prefer e2e encryption and will does the following: - Drive a shared secret point with algorithm, the key is the of that point - - create a 12 bytes random nonce - encrypt data as - create cipher as - fill - on receiving a message peer B does the same in the opposite direction - split data and nonce (nonce is always first 12 bytes) - derive the same shared key - - Rate Limiting To avoid abuse of the server, and prevent DoS attacks on the relay, a rate limiter is used to limit the number of clients' requests.\\ It was decided that the rate limiter should only watch websocket connections of users, since all other requests/connections with users consume little resources, and since the relay handles the max number of users inherently.\\ The limiter's configurations are passed as a command line argument . represents the number of messages a twin is allowed to send in each time window, represents the total size of messages in bytes a twin is allowed to send in each time window.\\ Currently there are two implementations of the rate limiter: - which imposes no limits on users. - which breaks the timeline into fixed time windows, and allows a twin to send a fixed number of messages, with a fixed total size, in each time window. If a twin exceeded their limits in some time window, their message is dropped, an error message is sent back to the user, the relay dumps a log about this twin, and the user gets to keep their connection with the relay. Substrate Connections To make the relay and peer more reliable, the substrate client accepts multiple substrate urls. > To provide multiple urls use the command line argument multiple times. Example: It's important to note the only one substrate client is held at a time, and the other urls are only used in the case of a network failure.\\ This way, if a substrate connection failed, other urls are used to try to connect to substrate.\\ The client uses iterates between urls in a Round Robin fashion, and tries to reconnect. If a specified number of trials is done (currently 2x the number of urls) and none of them was successful, the client fails and returns and error. Redundancy and Failover Starting from version 1.1.0, RMB has integrated redundancy and failover into the system to achieve high availability. This is done by allowing RMB-peer to set more than one relay domain for a twin on-chain and establish connections with several redundant relays at the same time. Enabling failover ensures that communication between twins can continue even if one of the relays fails, as the client will eventually route the message to its destination through another operational relay. Example:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/rmb_toc/rmb_coding_guides.md",
    "title": "Coding Guides",
    "url": "/labs/documentation/developers/internals/rmb_toc/rmb_coding_guides",
    "content": "Introduction We present coding guides for the reliable message bus (RMB). > This document will always be . Read the official docs for updates. Module Structure In Rust there are multiple ways to create a (sub)module in your crate - A single file module. can be imported in or with the keyword - A directory module. Uses mod.rs as the module always. Other sub-modules can be created next to mod.rs and can be made available by using the keyword again in the file. We will agree to use the 2nd way (directory) but with the following restrictions: - will have all and used by the traits. - file next to that can include implementation for the module trait. z Example Following is an example of module. > File names are always in but avoid the as much as possible because they basically look ugly in file tree. For example we prefer the name over because we already can tell from the module name that it's a __animal__. Hence in the identity module for example the name is preferred over because that's already inferred from the module name. The file then can contain The file then can contain A user of the module now can do For common implementation that are usually used in your modules, a can be added in to make it easier to import your type. For example Naming Conventions Following the rust guide lines for name - are short snake case. avoid if otherwise name will not be descriptive. Check note about file names above. - , , names are all - , names are snake case Note, names of functions and variables need to be but __short__ at the same time. Also avoid the until absolutely necessary. A variable with a single name is better if it doesn't cause confusion with other variables in the same context. The name of the variable should never include the . Handling We agreed to use crate in this project. Please read the docs for To unify the practice by default we import both and from > Others can be imported as well if needed. logging is important to trace the errors that cannot be propagated and also for debug messages that can help spotting a problem. We always gonna use crate. as Note only that can __NOT__ be propagated are logged. > NOTE: All log messages start with lowercase. Function Signatures For function inputs (arguments) types are preferred if available over concrete types. This most obvious with types. depending on the function behavior Examples This is bad: It is preferred to use:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/rmb_toc/relay.md",
    "title": "RMB Relay",
    "url": "/labs/documentation/developers/internals/rmb_toc/relay",
    "content": "Introduction We present an example of RMB relay. Note that the extension for this kind of file is . Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/internals/rmb_toc/peer.md",
    "title": "RMB Peer",
    "url": "/labs/documentation/developers/internals/rmb_toc/peer",
    "content": "Introduction We present an example of RMB peer. Note that the extension for this kind of file is . Example",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid_deployment/tfgrid_full_stack.md",
    "title": "ThreeFold Grid Full Stack",
    "url": "/labs/documentation/developers/grid_deployment/tfgrid_full_stack",
    "content": "Introduction ThreeFold is an open-source project and anyone can run the full stack of the TFGrid in a totally decentralized manner. Components of the Stack The TFGrid full stack is composed of: - TFGrid Backend - TFGrid Zero-OS Hub - TFGrid Zero-OS Bootstrap Generator - TFChain Validator Run Your Own Stack The ThreeFold Full Stack documentation is available on the repo here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid_deployment/grid_deployment.md",
    "title": "Grid Deployment",
    "url": "/labs/documentation/developers/grid_deployment",
    "content": "Grid Deployment The ThreeFold Grid whole source code is open-source and we provide all the tools required for a Threefold Grid full stack deployment. This section also provides information on how to deploy the Dashboard locally and how to create a new Dashboard app. TABLE OF CONTENTS - ThreeFold Grid Full Stack - Deploy the Dashboard - Application Case Study: Nextcloud",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid_deployment/deploy_dashboard.md",
    "title": "Deploy the Dashboard",
    "url": "/labs/documentation/developers/grid_deployment/deploy_dashboard",
    "content": "Introduction We show how to deploy the Dashboard (devnet) on a full VM. To do so, we set an SSH tunnel and use the VSCodium Remote Explorer function. We will then be able to use a source-code editor to explore the code and see changes on a local browser. We also show how to provide a public access to the Dashboard by setting a gateway domain to your full VM deployment. Note that this method is not production-ready and should only be used to test the Dashboard. Prerequisites - TFChain account with TFT - Deploy full VM with WireGuard connection - Make sure you can connect via SSH on the terminal In this guide, we use WireGuard, but you can use other connection methods, such as Mycelium. Create an SSH Tunnel - Open a terminal and create an SSH tunnel Simply leave this window open and follow the next steps. If you use an IPv6 address, e.g. with Mycelium, set in the line above instead of . Editor SSH Remote Connection You can connect via SSH through the source-code editor to a VM on the grid. In this example, WireGuard is set. - Add the SSH Remote extension to VSCodium - Add a new SSH remote connection - Set the following (adjust with your own username and host) - Click on Set the VM We set the VM to be able to build the Dashboard. Build the Dashboard We now build the Dashboard. Clone the repository, then install, build and run the Dashboard. Note that here it is called : You can then access the dev net Dashboard on your local browser. To stop running the Dashboard, simply enter ̀ on the terminal window. Dashboard Public Access > Note: This method is not production-ready. Use only for testing purposes. Once you've tested the Dashboard with the SSH tunnel, you can explore how to access it from the public Internet. For this, we will create a gateway domain and bind the host to . On the Full VM page, add a domain to access your deployment from the public Internet. - Under , click on - Go to - Choose a gateway domain under - Set the port 5173 - Click on To run the Dashboard from the added domain, use this instead of the previous line: You can then access the Dashboard from the domain you just created. Set the Network You can set the network by running the configuration script. Simply set the network as the MODE (e.g. main, test, dev): Once you've set the configuration file, you can build and run the Dashboard. Questions and Feedback If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid_deployment/app_case_study_nextcloud.md",
    "title": "Application Case Study: Nextcloud",
    "url": "/labs/documentation/developers/grid_deployment/app_case_study_nextcloud",
    "content": "Introduction In this ThreeFold guide, we explore how to create an application on the Dashboard. To do so, we will use the Nextcloud application as a case study. This application is ideal to study since it uses many of the ThreeFold Grid functionalities, such as gateways and gateway domains. By reading this guide, you should have a proper understanding of the general process of building a new application on the ThreeFold Grid. This might give you inspiration to build your own application and contribute to the ThreeFold Dashboard. Process Overview and Preparation Steps The bulk of the files needed for the Nextcloud application can be found in the ThreeFold tfgrid-sdk-ts repository on GitHub. More specifically, we are interested in the subdirectory called playground. While there are many ways to proceed in the development of a ThreeFold application for the Dashboard, we present here a general method that works efficiently and is well organized. The information provided here is specific to the Nextcloud workload, but it can be applied to other types of workload. Before building the Nextcloud application, we first deployed a Nextcloud instance on the ThreeFold Grid with a full virtual machine. Once this deployment was working well, we built a Nextcloud flist. You can consult the Nextcloud flist code in the ThreeFold tf-images repository. We note that the flist uses a micro VM. There are some differences between a full VM and a micro VM. We propose users to first start deploying with a full VM and then adjust their work when they want to publish a flist with a micro VM, since full VM are easier to work with. You can of course start directly with a micro VM if you want. In sum, once we were comfortable launching Nextcloud on a full VM and also using an flist, we were ready to tackle the building of an application. These steps should be taken into account when building your own application. We proceed this way to ensure that the workload is properly configured. Once we know the flist is working properly, we can focus on the application aspect of the deployment, knowing the deployment itself is working properly. Building an Application In the subsections that follow, we cover all the different files that either need to be updated or created when building an application on the Dashboard. For the most part, the work consists of updating existing files to add the Nextcloud information. As you will see, the bulk of the work is happening with the file named tf_nextcloud.vue, where we set the main application page seen on the Dashboard. Add an Icon We added a Nextcloud icon to be featured on the Dashboard by adding a png file at the following directory packages/playground/public/images/icons/nextcloud.png. Add a Description We added a description to the Nextcloud application by adding a markdown file at the following directory packages/playground/public/info/nextcloud.md. This file contains a short description of Nextcloud for users to quickly understand what the application does. Update deployment_list.ts In the file deployment_list.ts, we set parameters to be shared with the Nextcloud application during deployment. The file is available in the following directory packages/playground/src/constants/deployment_list.ts. In our case, the Nextcloud content is the following: We can see here that the application will receive the SSH public key, the Nextcloud setup, and domain links. The SSH public key will allow users to connect to the VM via SSH. The Nextcloud setup link is linked to the Nextcloud domain is used to set the domain name to the Nextcloud instance. The Nextcloud setup and domain links will be linked to the Actions buttons once the workload is deployed. Update \\/types\\/index.ts In the file index.ts, located in the directory packages/playground/src/types/, we set the ProjectName, SolutionCode, and solutionType for the Nextcloud application. We added the line Nextcloud = \"Nextcloud\", in the array export enum ProjectName. This will provide a name for the Nextcloud application, which will be used in the Deployment table shown on the Dashboard. We added the line nextcloud = \"nc\" in the array export enum SolutionCode. This will be used notably as a prefix for the randomly generated deployment name. For example, when the user deploys a Nextcloud application, the name of the VM could be ncxwbt2. We also added the line nextcloud: \"Nextcloud\". This will be used when setting a contract with the TFGrid. Update \\/router\\/index.ts In the file index.ts, located at the directory packages/playground/src/router/, we add the following lines in the function createApplicationsRoutes(): We can see that this section makes use of the Nextcloud description seen in the section Add a Description. It also sets the path to the nextcloud_view.vue file. Update vm_deployment_table.vue In the file vm_deployment_table.vue, located in the directory packages/playground/src/components/, we added the line ProjectName.Nextcloud in the constant section named IPV4Solutions. The Nextcloud IPv4 address will thus be shown in the deployment table after the user has deployed the Nextcloud application. If, for example, we wanted to display the WireGuard address in the deployment table, we would add ProjectName.Nextcloud in the array named WireguardSolutions. Update delete_deployment.ts In the file delete_deployment.ts, located in the directory packages/playground/src/utils, we added the line ProjectName.Nextcloud, in the function solutionHasGateway(projectName: ProjectName). Update tf_deployment_list.vue In the file tf_deployment_list.vue, located at the directory packages/playground/src/weblets, we added the following code to set Actions buttons that are clickable once the workload is deployed: We note that this section makes use of the NEXTCLOUD_DOMAIN and NEXTCLOUD_AIO_LINK environment variables shown in the section Update deployment_list.ts. At the end of the file, at the section const tabs: Tab[], we also added the line \\{ title: \"Nextcloud\", value: \"Nextcloud\", imgPath: \"images/icons/nextcloud.png\" \\},. We note that this line makes use of the Nextcloud icon we set in the icons directory. Create nextcloud_view.vue We created a file named nextcloud_view.vue. Instead of starting from scratch, we took a file template from an already existing file, in our case it was owncloud_view.vue. We only needed to change a few lines to make it work with the Nextcloud application. The line containing TfDeploymentList title sets the strings used to present the different Nextcloud instances in the deployment table, populated once we deploy a Nextcloud workload on the Dashboard. We also note that this file imports the variables TfDeploymentList and TfNextcloud from the files tf_deployment_list.vue and tf_nextcloud.vue respectively. These variables are then exported in the section export default. We recall that in tf_deployment_list.vue, we set the Actions button, as well as set the application name and icon. The file tf_nextcloud.vue is covered in the next section. Create tf_nextcloud.vue Still in the directory packages/playground/src/weblets, we created a file named tf_nextcloud.vue. Instead of starting from scratch, it can be recommended to start from a template of an application that is close to the current application you are building. In our case, we started with the file owncloud.vue. That being said, since the Nextcloud application uses the gateway as well as gateway domains, some major updates were necessary. This file constitutes the bulk of the work when building an application for the Dashboard. For this reason, we dedicate more attention to this file and explore it section by section. This file is mainly composed of three sections. The first section, template will be used to configure and set the proper deployment configurations. The second section, the first script section will import the necessary modules and variables, set the constants, and set the asynchronous function that will query the TFGrid to deploy the application instance. The third section, the second script section, imports modules and variables and exports them. Template Section We first start to explore the template main section. The section weblet-layout defines the basic layout of the application. This section sets the variable names for the different deployment configurations, such as the CPU, the memory and the disk. These variables will then be set to specific quantities when the users set the application on the Dashboard. The section template #title sets the main title displayed on the Dashboard application page. The section form-validator contains many subsections that will serve to configure the application deployment. The first subsection of form-validator is input-validator. This subsection is used to give a name to the application instance. This subsection provides strict requirements for the Name of the application instance. While the name is automatically generated randomly by the Dashboard, users can also set their own name, to the extent that they follow the name requirements. The following subsection is called SelectSolutionFlavor. In this subsection, we provide templates for the users to choose the deployment parameters. The parameters are CPU, memory and disk. As stated before, the names of those parameters have been set in the section application-layout. The subsection Networks is where we set the TFGrid parameter options. In our case, the user can decide to enable ipv4 and mycelium. The subsections called input-tooltip are used to generated information for the users. The developer can decide to either simply display a message as string, and also to set a clickable hyperlink. The first input-tooltip of the Nextcloud instance provides a hyperlink leading to the TF Manual dedicated nodes documentation. This tooltip also contains a v-switch. This gives a toggle button that can be enabled or disabled. In this case, the user can either enable the option Dedicated or not. The name given to this option is dedicated. We can see further in the document, at line 122, that this option is set as a constant and is false by default (ref(false)). The second input-tooltip is about certified node. As with the previous tool-tip, it is accompanied by a v-switch named certified. Also further in the document, we can see at line 123 that this option is set as a constant and set to false by default (set(false)). The subsection template #footer-actions configures the Deploy button. As we can see here, we set validateBeforeDeploy to ensure that the user selects a proper node and deployment configurations before being able to query the TFGrid to deploy the application instance. By the end of this subsection, we arrive at the end of the weblet-layout subsection and of the template section. First Script Section (Setup) The first part of this section consists of importing modules from the src directory as well as GridClient from @threefold/grid_client and computed, type Ref, and ref from vue. Then we set constants based on the template section. One constant to notice is flist. This constant is given the URL to the Nextcloud flist that we created for the application deployment. For more information on how to create this flist, read the Nextcloud flist case study available on the ThreeFold Manual. In the function finalize, we set the output displayed when the deployment has been successful. It's important to add relevant information for the user here. In the case of Nextcloud, we add the following text to provide guidance to the user: > Successfully deployed a Nextcloud instance. Under Actions, click on the button Nextcloud Setup to set up Nextcloud. After installation, you can access the Nextcloud instance by clicking on the Open Nextcloud button or navigating to your Nextcloud domain. A big part of the first script section is the asynchronous function deploy. As the constant projectName, we set the following: > ProjectName.Nextcloud.toLowerCase() + \"/\" + name.value For our Nextcloud instance, the user can decide to use a gateway or not as well as a custom or gateway domain. The constant domain sets this. 148 consists of setting the proper domain whether the user chose a custom or a gateway domain: > const domain = selectionDetails.value!.domain!.enabledCustomDomain ? selectionDetails.value!.domain!.customDomain : subdomain + \".\" + selectionDetails.value!.domain!.selectedDomain?.publicConfig.domain; The constant has_gateway is set to true only if both customDomain and ipv4.value are set to false: > const has_gateway = !(selectionDetails.value!.domain!.enabledCustomDomain && ipv4.value); The constant aio_link is composed of the domain variable set earlier followed by . This will ensure that the Action button to open the Nextcloud AIO page is properly set. > const aio_link = domain + \"/aio\"; Once the above-mentioned constants are set, the asynchronous function deploy will deploy the application instance on the TFGrid. This can be seen in the section try. This section references to all the necessary parameters to deploy the application instance as defined by the user on the TFGrid. For example, the subsection envs contains all the necessary environment variables for the deployment, such as the SSH public key (SSH_KEY), as well as the domain and Nextcloudt setup URLs (NEXTCLOUD_DOMAIN, NEXTCLOUD_AIO_LINK). We also pass a boolean telling the deployer if there is a gateway within the deployment (GATEWAY) as well as the IPv4 address (IPV4). If this try function fails, we catch the error and display Failed to deploy a Nextcloud instance. as shown in the section catch (e). The next section is an if statement that will be triggered if the deployment consists of a custom domain and an IPv4 connection. In this case, we call the function finalize to deploy the application instance by passing the vm as a parameter. If this is not the case, we trigger the second try function where we set the gateway. Once this is done, we finally trigger the function finalize to deploy the application instance with the gateway set. Second Script Section The second script section imports different modules necessary to run the application and then exports many of them as a package for the application, in our case TFNextcloud. The import section of this script section should be common for all applications using a gateway. The export section (export default) is set with TFNextcloud as its name. Testing an application You can test this application or the application you are creating by deploying the Dashboard locally. For more information on this, feel free to read the documentation Deploy the Dashboard of the ThreeFold Manual. This is very useful, if not necessary when testing and building your own application. Contributing to the Dashboard If you've created a new application and you wish to share it to the ThreeFold community, feel free to fork the ThreeFold tfgrid-sdk-ts repository to your own GitHub account, add the new application to the Dashboard and then create a pull request. The ThreeFold development team will be happy to review your code and propose changes if needed. Conclusion We now went through the Nextcloud application code and explored how to create a new application for the ThreeFold Dashboard. This case study should have given you the necessary tools and knowledge to understand the general steps when it comes to creating a new application. Of course, each application will be different and you will most certainly need to adjust the files presented here when you build your own application. Should you have any questions or feedback, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community chat on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_wireguard_gateway.md",
    "title": "VM with Wireguard and Gateway",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_wireguard_gateway",
    "content": "Introduction We present here the relevant information when it comes to deploying a virtual machine with Wireguard and a gateway. Client Configurations To configure the client, have a look at this section. Code Example Detailed Explanation What we need to do with that code is: Deploy a name gateway with the wireguard IP as the backend; that allows accessing a server inside the vm through the gateway using the private network (wireguard) as the backend. This will be done through the following steps: Get the Client Get the Nodes Determine the deploying nodes for the vm, network and gateway. - Gateway and network access node Using the method, will get the first gateway node id, we will deploy the gateway and will use it as our network access node. > The gateway node must be the same as the network access node. - VM node we need to set the filter options first for this example we will deploy the vm with 1 cpu, 2 GB of memory. now will crete a object with that specs and get the firs node id of the result. Deploy the VM We need to create the network and machine models, the deploy the VM - : we are creating a network and set the node id to be , the name and inside the function we set to add __wireguard__ access. - and is similar to the previous section of deploying a single VM, but we are passing the created to the machines model and the entry point here runs a simple python server. Deploy the Gateway Now we have our VM deployed with it's network, we need to make the gateway on the same node, same network and pointing to the VM's private IP address. - Get the VM's private IP address: - Create the Gateway name model: This will create a with the following properties: - : the subdomain name - : the gateway node id - - : the private ip address and the port number of our machine - : the network name, we already created earlier. Get the Deployments Information - : is an array of one object contains the details about the vm deployment. - : is an array of one object contains the details of the gateway name. Now we can access the vm using the that returned in the object. Disconnect the Client finally we need to disconnect the client using Delete the Deployments If we want to delete the deployments we can just do this: Conclusion This section presented a detailed description on how to create a virtual machine with private IP using Wireguard and use it as a backend for a name gateway. If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_zdb.md",
    "title": "Deploy a ZDB",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_zdb",
    "content": "Introduction We show how to deploy ZDB on the TFGrid with the Javascript client. Prerequisites - Make sure you have your client prepared Example code Detailed explanation Getting the client Building the model Here we define a and setting the relevant properties e.g - name - node_id : where to deploy on - mode: or - disk_size: disk size in GB - publicNamespace: a public namespace can be read-only if a password is set - password: namespace password preparing ZDBs collection you can attach multiple ZDBs into the collection and send it for deployment Deployment Getting Deployment information gives detailed information about the workload. Deleting a deployment method helps cancelling the relevant contracts related to that ZDBs deployment",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_vms.md",
    "title": "Deploy Multiple VMs",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_vms",
    "content": "Introduction It is possible to deploy multiple VMs with the Javascript client. Example code It's similiar to the previous section of deploying a single VM, but just adds more vm objects to vms collection.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_vm_with_mycelium_network.md",
    "title": "Deploy a VM with Mycelium Network",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_vm_with_mycelium_network",
    "content": "Introduction We present information on how to deploy a VM with by the Javascript client with concrete examples. Consult the official Mycelium repo to learn more. Example Here is a simple example on how to use Mycelium with the Javascript client: Detailed Explanation What is the Mycelium Network Mycelium is an IPv6 overlay network written in Rust. Each node that joins the overlay network will receive an overlay network IP in the 400::/7 range. How to Deploy a Machine with the Mycelium Network You just need to enable : set it to true as we did in the example above. Summary Mycelium Flag Behavior - When the flag is enabled, there’s no need to manually provide the flag. - The will automatically generate the necessary seed for you. - However, if you have an existing seed from a previously deleted machine and wish to deploy a new machine that retains the same IP address, - you can simply pass in the old seed during deployment instead of calling the function. Mycelium Machine Seed - The is an optional field used to provide a specific seed for the Mycelium network. - If not provided, the will generate a seed automatically when the flag is enabled. - Use Case: If you need the new machine to have the same IP address as a previously deleted machine, you can reuse the old seed by setting the field. Mycelium Network Seed - The is an optional field used to provide a specific seed for the Mycelium network. - If not provided, the will generate a seed automatically when the flag is enabled. - Use Case: If you need the new machine to have the same IP address as a previously deleted machine, you can reuse the old seed by setting the field.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_vm_gateways.md",
    "title": "Gateways",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_vm_gateways",
    "content": "Introduction After the deployment of a VM, now it's time to expose it to the world Example code Detailed explanation - we created a gateway name model and gave it a -that's why it's called GatewayName- to be deployed on gateway node to end up with a domain , - we create a proxy for the gateway to send the traffic coming to to the backend , we say to let the gateway terminate the traffic, if you replace it with your backend service needs to be able to do the TLS termination deploying this deploys on the grid getting deployment object getting the deployment information can be done using deletion Deploying a VM and exposing it over a Gateway using a Full domain After the deployment of a VM, now it's time to expose it to the world Example code Detailed explanation - we created a and gave it a name to be deployed on gateway node and specified the fully qualified domain to a domain we own - we created a record on our name provider for to point to the IP of gateway node - we specified the backened would be an yggdrassil ip so once this is deployed when we go to we go to the gateway server and from their our traffic goes to the backend. deploying this deploys on the grid get deployment object getting the deployment information can be done using deletion",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_vm.md",
    "title": "Deploy a VM",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_vm",
    "content": "Introduction We present information on how to deploy a VM with the Javascript client with concrete examples. Example Detailed Explanation Building Network Here we prepare the network model that is going to be used by specifying a name to our network and the range it will be spanning over Building the Disk Model here we create the disk model specifying its name, size in GB and where it will be mounted eventually Building the VM Now we go to the VM model, that will be used to build our object We need to specify its - name - node_id: where it will get deployed - disks: disks model collection - memory - root filesystem size - flist: the image it is going to start from. Check the supported flists - entry point: entrypoint command / script to execute - env: has the environment variables needed e.g sshkeys used - public ip: if we want to have a public ip attached to the VM - planetary: to enable planetary network on VM Building VMs Collection Here it's quite simple we can add one or more VM to the property to have them deployed as part of our project deployment Getting Deployment Information can do so based on the name you gave to the collection Deleting a Deployment In the underlying layer we cancel the contracts that were created on the chain and as a result all of the workloads tied to his project will get deleted.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_qsfs_zdbs.md",
    "title": "Deploy ZDBs for QSFS",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_qsfs_zdbs",
    "content": "Introduction We show how to deploy ZDBs for QSFS on the TFGrid with the Javascript client. Prerequisites - Make sure you have your client prepared Example code Now we have two nodes in . Preparing ZDBs Here we deploy ZDBs on nodes in with password , all of them having disk size of , the client already add 4 zdbs for metadata. Getting deployment information",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_qsfs.md",
    "title": "QSFS",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_qsfs",
    "content": "Prerequisites First, make sure that you have your client prepared. Code Example Detailed Explanation We present a detailed explanation of the example shown above. Getting the Client Preparing QSFS We prepare here some names to use across the client for the QSFS and the machines project Here we deploy ZDBs on nodes with password , all of them having disk size of Deploying a VM with QSFS So this deployment is almost similiar to what we have in the vm deployment section. We only have a new section is a list, representing all of the QSFS disks used within that VM. - : that's the backend ZDBs we defined in the beginning - : how many ZDBs that QSFS should be working with - : the minimal possible amount of ZDBs to recover the data with when losing disks e.g due to failure - : where it will be mounted on the VM Getting the Deployment Information Deleting a Deployment",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_loadclient.md",
    "title": "Loading Client",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_loadclient",
    "content": "Introduction Grid3 Client is a client used for deploying workloads (VMs, ZDBs, k8s, etc.) on the TFGrid. Client Configurations so you have to set up your configuration file to be like this: Creating/Initializing The Grid3 Client The grid client uses tool to send requests to/from nodes. What is | Reliable Message Bus --rust Reliable message bus is a secure communication panel that allows bots to communicate together in a chat like way. It makes it very easy to host a service or a set of functions to be used by anyone, even if your service is running behind NAT. Out of the box RMB provides the following: - Guarantee authenticity of the messages. You are always sure that the received message is from whoever is pretending to be - End to End encryption - Support for 3rd party hosted relays. Anyone can host a relay and people can use it safely since there is no way messages can be inspected while using e2e. That's similar to home servers by matrix Grid3 Client Options - network: for devnet, for testnet - mnemonics: used for signing the requests. - storeSecret: used to encrypt data while storing in backend. It's any word that will be used for encrypting/decrypting the keys on threefold key-value store. If left empty, the Grid client will use the mnemonics as the storeSecret. - BackendStorage : can be which willl automatically adapt if running in node environment to use or the browser enviornment to use . Also you can set it to to use the tfchain keyvalue store module. - keypairType: is defaulted to , most likely you will never need to change it. is supported too. for more details, check client options > Note: The choice of the node is completely up to the user at this point. They need to do the capacity planning. Check Node Finder to know which nodes fits your deployment criteria. Check the document for capacity planning using code if you want to automate it > Note: this feature is still experimental",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_kvstore.md",
    "title": "Key Value Store",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_kvstore",
    "content": "Introduction As part of the tfchain, we support a keyvalue store module that can be used for any value within range. practically it's used to save the user configurations state, so it can be built up again on any machine, given they used the same mnemonics and same secret. Prerequisites - Make sure you have your client prepared Example code setting values is used to set key to any value getting key is used to get a specific key listing keys is used to list all the keys. deleting key is used to delete a specific key.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_kubernetes.md",
    "title": "Deploy a Kubernetes Cluster",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_kubernetes",
    "content": "Introduction We show how to deploy a Kubernetes cluster on the TFGrid with the Javascript client. Prerequisites - Make sure you have your client prepared Example code Detailed explanation Building network Building nodes Building cluster Here we specify the cluster project name, cluster secret, network model to be used, master and workers nodes and sshkey to access them Deploying use function to deploy the kubernetes project Getting deployment information Deleting deployment",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_installation.md",
    "title": "Installation",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_installation",
    "content": "Introduction We present here the general steps required to install and use the ThreeFold Grid Client. The Grid Client is written using TypeScript to provide more convenience and type-checked code. It is used to deploy workloads like virtual machines, kubernetes clusters, quantum storage, and more. Mycelium Network Note that you can use the Mycelium network to connect to your deployments. To do so, make sure that the Mycelium network is properly set up for the deployments. You can consult the different examples that include the Mycelium network to understand this further. Prerequisites To install the Grid Client, you will need the following on your machine: - Node.js ^18 - npm 8.2.0 or higher - may need to install libtool (apt-get install libtool) > Note: nvm is the recommended way for installing node. To use the Grid Client, you will need the following on the TFGrid: - A TFChain account - TFT in your wallet If it is not the case, please visit the Get started section. Installation External Package To install the external package, simply run the following command: > Note: For the qa, test and main networks, please use @2.1.1 version. Local Usage To use the Grid Client locally, clone the repository then install the Grid Client: - Clone the repository - - Install the Grid Client - With yarn - - With npm - > Note: In the directory grid_client/scripts, we provided a set of scripts to test the Grid Client. Getting Started You will need to set the client configuration either by setting the json file manually (scripts/config.json) or by using the provided script (scripts/client_loader.ts). Client Configuration Make sure to set the client configuration properly before using the Grid Client. - network: The network environment (dev, qa, test or main). - mnemonic: The 12 words mnemonics for your account. - Learn how to create one here. - storeSecret: This is any word that will be used for encrypting/decrypting the keys on ThreeFold key-value store. - ssh_key: The public SSH key set on your machine. > Note: Only networks can't be isolated, all projects can see the same network. Generate the Documentation The easiest way to test the installation is to run the following command with either yarn or npm to generate the Grid Client documentation: With yarn With npm > Note: You can also use the command yarn run to see all available options. How to Run the Scripts You can explore the Grid Client by testing the different scripts proposed in grid_client/scripts. - Update your customized deployments specs if needed - Run using ts-node - With yarn - - With npx - Reference API While this is still a work in progress, you can have a look here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_gpu_support.md",
    "title": "GPU Support",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_gpu_support",
    "content": "Introduction We present here a quick introduction to GPU support with JavaScript. There are a couple of updates regarding finding nodes with GPU, querying node for GPU information and deploying with support of GPU. This is an ongoing development and this section will be updated as new information comes in. Example Here is an example script to deploy with GPU support:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_caprover.md",
    "title": "Deploy CapRover",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_caprover",
    "content": "Introduction In this section, we show how to deploy CapRover with the Javascript client. This deployment is very similar to what we have in the section Deploy a VM, but the environment variables are different. Leader Node We present here a code example and the environment variables to deploy a CapRover Leader node. For further details about the Leader node deployment, read this documentation. Code Example Environment Variables - PUBLIC_KEY: Your public IP to be able to access the VM. - SWM_NODE_MODE: Caprover Node type which must be as we are deploying a leader node. - CAPROVER_ROOT_DOMAIN: The domain which you we will use to bind the deployed VM. - DEFAULT_PASSWORD: Caprover default password you want to deploy with. Worker Node We present here a code example and the environment variables to deploy a CapRover Worker node. Note that before deploying the Worker node, you should check the following: - Get the Leader node public IP address. - The Worker node should join the cluster from the UI by adding public IP address and the private SSH key. For further information, read this documentation. Code Example Environment Variables The deployment of the Worker node is similar to the deployment of the Leader node, with the exception of the environment variables which differ slightly. - PUBLIC_KEY: Your public IP to be able to access the VM. - SWM_NODE_MODE: Caprover Node type which must be as we are deploying a worker node. - LEADER_PUBLIC_IP: Leader node public IP. Questions and Feedback If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript_capacity_planning.md",
    "title": "Capacity Planning",
    "url": "/labs/documentation/developers/grid3_javascript/grid3_javascript_capacity_planning",
    "content": "Introduction It's almost the same as in deploying a single VM the only difference is you can automate the choice of the node to deploy on using code. We now support to filter nodes based on specific criteria e.g the node resources (CRU, SRU, HRU, MRU) or being part of a specific farm or located in some country, or being a gateway or not Example In this example you can notice the criteria for Here we want all the nodes with , , , located in and available for me (not rented for someone else). > Note some libraries allow reverse lookup of countries codes by name e.g i18n-iso-countries and then in the MachineModel, we specified the to be the first value of our filteration",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_javascript/grid3_javascript.md",
    "title": "Javascript Client",
    "url": "/labs/documentation/developers/grid3_javascript",
    "content": "This section covers developing projects on top of Threefold Grid using Javascript language. Javascript has a huge ecosystem, and first class citizen when it comes to blockchain technologies like substrate and that was one of the reasons for it to become one the very first supported languages on the grid. Please make sure to check the basics before continuing. TABLE OF CONTENTS - Installation - Loading Client - Deploy a VM - Deploy a VM with Mycelium Network - Capacity Planning - Deploy Multiple VMs - Deploy CapRover - Gateways - Deploy a Kubernetes Cluster - Deploy a ZDB - Deploy ZDBs for QSFS - QSFS - Key Value Store - VM with Wireguard and Gateway - GPU Support",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_vms.md",
    "title": "Deploy Multiple VMs",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_vms",
    "content": "Introduction We show how to deploy multiple VMs with the Go client. Example Running this code should result in two VMs deployed on two separate nodes while being on the same network and you should see an output like this:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_vm.md",
    "title": "Deploy a VM",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_vm",
    "content": "Introduction We show how to deploy a VM with the Go client. Example Running this code should result in a VM deployed on an available node and get an output like this:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_qsfs.md",
    "title": "Deploy a QSFS",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_qsfs",
    "content": "Introduction We show how to deploy QSFS workloads with the Go client. Example Running this code should result in a VM with QSFS deployed on an available node and get an output like this:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_load_client.md",
    "title": "Loading Client",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_load_client",
    "content": "Introduction We cover how to load client using the Go client. TFPluginClient Configuration - mnemonics - keyType: can be or - network: can be , , or Creating Client Import package to your project: Create new Client:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_kubernetes.md",
    "title": "Deploy Kubernetes",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_kubernetes",
    "content": "Introduction We show how to deploy a Kubernetes cluster with the Go client. Example You should see an output like this:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_installation.md",
    "title": "Installation",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_installation",
    "content": "Introduction We present the general steps to install the ThreeFold Grid3 Go Client. Mycelium Network Note that you can use the Mycelium network to connect to your deployments. To do so, make sure that the Mycelium network is properly set up for the deployments. You can consult the different examples that include the Mycelium network to understand this further. Requirements Make sure that you have at least Go 1.19 installed on your machine. - Go >= 1.19 Steps Create a new directory Change directory Creates a go.mod file to track the code's dependencies Install the Grid3 Go Client This will make Grid3 Go Client packages available to you. References For more information, you can read the official Go documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_gateways.md",
    "title": "Deploy Gateways",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_gateways",
    "content": "Introduction After deploying a VM you can deploy Gateways to further expose your VM. Gateway Name This generates a FQDN for your VM. Example This deploys a Gateway Name Proxy that forwards requests to your VM. You should see an output like this: Gateway FQDN In case you have a FQDN already pointing to the node, you can expose your VM using Gateway FQDN. Example This deploys a Gateway FQDN Proxy that forwards requests to from node 14 public IP to your VM.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go.md",
    "title": "Go Client",
    "url": "/labs/documentation/developers/grid3_go",
    "content": "Grid Go Client Grid Go Client is a Go client created to interact and develop on Threefold Grid using Go language. Please make sure to check the basics before continuing. TABLE OF CONTENTS - Installation - Loading Client - Deploy a VM - Deploy a VM with GPU - Deploy Multiple VMs - Deploy Gateways - Deploy Kubernetes - Deploy a QSFS - GPU Support",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_gpu/grid3_go_vm_with_gpu.md",
    "title": "Deploy a VM with GPU",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_gpu/grid3_go_vm_with_gpu",
    "content": "Introduction In this section, we explore how to deploy a virtual machine equipped with GPU. We deploy the VM using Go. The VM will be deployed on a 3Node with an available GPU. Example Running this code should result in a VM with a GPU deployed on an available node. The output should look like this:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_gpu/grid3_go_gpu_support.md",
    "title": "GPU Support",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_gpu/grid3_go_gpu_support",
    "content": "Introduction We present here an example on how to deploy using the Go client. This is part of our integration tests. Example More Information For more information on this, you can check this Client Pull Request on how to support the new calls to list GPUs and to deploy a machine with GPU.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/grid3_go/grid3_go_gpu/grid3_go_gpu.md",
    "title": "GPU and Go",
    "url": "/labs/documentation/developers/grid3_go/grid3_go_gpu",
    "content": "TABLE OF CONTENTS - GPU and Go Introduction - Deploy a VM with GPU",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/zos_hub.md",
    "title": "Zero-OS Hub",
    "url": "/labs/documentation/developers/flist/zos_hub",
    "content": "Introduction The ThreeFold Zero-OS Hub allows you to do multiple things and acts as a public centralization of flists. The ZOS Hub is mainly there to gives an easy way to distribute flist files, which are databases of metadata that you can use in any Zero-OS container or virtual machine. Upload Your Files In order to publish easily your files, you can upload a and the hub will convert it automatically to a flist and store the contents in the hub backend. After that you can use your flist directly on a container. Merge Multiple Flists In order to reduce the maintenance of your images, products, etc. flist allows you to keep your different products and files separately and then merge them with another flist to make it usable without keeping the system up-to-date. Example: there is an official flist image, you can make a flist which contains your application files and then merge your flist with ubuntu, so the resulting flist is your product on the last version of ubunbu. You don't need to take care about the base system yourself, just merge it with the one provided. Convert Docker Images and Tar Files The ZOS Hub allows you to convert Docker Hub images and Tar files into flists thanks to the Docker Hub Converter. You can convert a docker image (eg: , , , , ...) to an flist directly from the backend, this allows you to use your existing docker image in our infrastructure out-of-the-box. Go to the Docker Hub Converter to use this feature. For more information on the process, read the section Convert Docker Image to flist of the TF Manual. You can also easily convert a Tar file into an flist via the Upload section of the ZOS Hub. Upload Customize Flists The ZOS Hub also allows you to customize an flist via the Customization section of the ZOS Hub. Note that this is currently in beta. Upload Homemade Flists The ZOS Hub allows you to upload flist that you've made yourself via the section Upload a homemade flist. Upload your Existing Flist to Reduce Bandwidth In addition with the hub-client (a side product) you can upload efficiently contents of file to make the backend up-to-date and upload a self-made flist. This allows you to do all the jobs yourself and gives you the full control of the chain. The only restriction is that the contents of the files you host on the flist needs to exists on the backend, otherwise your flist will be rejected. Authenticate via 3Bot All the operations on the ZOS Hub needs to be done via a (default) authentication. Only downloading a flist can be done anonymously. To authenticate request via the API, you need to generate an API Token as shown in the section ZOS Hub API Token. Get and Update Information Through the API The hub host a basic REST API which can gives you some informations about flists, renaming them, remove them, etc. To use authenticated endpoints, you need to provide a itsyou.online valid via header. This can contains special to allows you cross-repository actions. If your contains memberof, you can choose which user you want to use by specifying cookie . See example below. Public API Endpoints (No Authentication Required) - (GET) - Returns a json array with all repository/flists found - (GET) - Returns a json array with all repositories found - (GET) - Returns a json array with all repositories and files found - (GET) - Returns a json array of each flist found inside specified repository. - Each entry contains , , date and (regular or symlink), optionally if it's a symbolic link. - (GET) - Returns json object with flist dumps (full file list) Restricted API Endpoints (Authentication Required) - (GET) - Returns json object with some basic information about yourself (authenticated user) - (GET, DELETE) - GET: same as - DELETE: remove that specific flist - (GET) - Create a symbolic link pointing to - (GET) - Create a cross-repository symbolic link pointing to - (GET) - Rename to - (GET) - Copy cross-repository to your file - This is useful when you want to copy flist from one repository to another one, if your jwt allows it - (POST) - POST: uploads a archive and convert it to an flist - Your file needs to be passed via form attribute - (POST) - POST: uploads a file and store it - Note: the flist is checked and full contents is verified to be found on the backend, if some chunks are missing, the file will be discarded. - Your file needs to be passed via form attribute - (POST) - POST: merge multiple flist together - You need to passes a json array of flists (in form ) as POST body - (POST) - POST: converts a docker image to an flist - You need to passes form argument with docker-image name - The resulting conversion will stay on your repository API Request Templates and Examples The main template to request information from the API is the following: For example, if we take the command of the previous section and we want to delete the flist with the API Token , we would write the following line: As another template example, if we wanted to rename the flist to , we would use the following template: To upload an flist to the ZOS Hub, you would use the following template:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/grid3_supported_flists.md",
    "title": "Supported Flists",
    "url": "/labs/documentation/developers/flist/grid3_supported_flists",
    "content": "Introduction We provide basic information on the currently supported Flists. Flists and Parameters |flist|entrypoint|env vars| |:--:|:--:|--| |Alpine||| |Ubuntu||| |CentOS||| |K3s||- - - - - - | More Flists You can convert any docker image to an flist. Feel free to explore the different possibilities on the ThreeFold Hub.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/flist.md",
    "title": "Flist",
    "url": "/labs/documentation/developers/flist",
    "content": "TABLE OF CONTENTS - Zero-OS Hub - Generate an API Token - Convert Docker Image Into Flist - Supported Flists - Flist Case Studies - Case Study: Debian 12 - Case Study: Nextcloud AIO",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/convert_docker_image.md",
    "title": "Convert Docker Image Into Flist",
    "url": "/labs/documentation/developers/flist/convert_docker_image",
    "content": "Introduction We show the steps to convert a docker image to an Flist. Upload the Image 1. Upload the Docker image to Docker Hub with the following command: 2. Navigate to the docker converter link: https://hub.grid.tf/docker-convert ! 3. Copy the name of the uploaded Docker image to the Docker Image Name field. 4. Then press the convert button. When the image is ready, some information will be displayed. ! Flist on the Hub To navigate to the created flist, you can search with the newly created file name in the search tab. ! You can also navigate to your repository in the contributors section from the Zero-Os Hub and navigate to the newly created flist. Then press the preview button to display the flist's url and some other data. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/api_token.md",
    "title": "Generate an API Token",
    "url": "/labs/documentation/developers/flist/api_token",
    "content": "Generate an API Token To generate an API Token on the TF Hub, follow those steps: Go to the ThreeFold Hub Open the top right drop-down menu Click on Take note of the token and keep it somewhere safe Verify the Token Validity To make sure the generated token is valid, in the terminal write the following with your own API Token: You should see the following line with your own 3BotID You can then use this API Token in the terminal to get and update information through the API.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/flist_case_studies/flist_nextcloud_case_study.md",
    "title": "Case Study: Nextcloud AIO",
    "url": "/labs/documentation/developers/flist/flist_case_studies/flist_nextcloud_case_study",
    "content": "Introduction In this case study, we explain how to create a new flist on the ThreeFold ecosystem. We will show the process of creating a Nextcloud All-in-One flist and we will deploy a micro VM on the ThreeFold Playground to access our Nextcloud instance. As a reference, the official Nextcloud flist is available here. To achieve all this, we will need to create a Docker Hub account, create a Dockerfile and its associated files, a docker image and a docker container, then convert the docker image to a Zero-OS flist. After all this, we will be deploying our Nextcloud instance on the ThreeFold Playground. As a general advice, before creating an flist for a ThreeFold deployment, you should make sure that you are able to deploy your workload properly by using a micro VM or a full VM on the TFGrid. Once you know all the steps to deploy your workload, and after some thorough tests, you can take what you've learned and incorporate all this into an flist. Flist: What is It? Before we go any further, let us recall what is an flist. In short, an flist is a technology for storing and efficiently sharing sets of files. While it has many great features, it's purpose in this case is simply to deliver the image contents to Zero-OS for execution as a micro VM. It thus acts as a bundle of files like a normal archive. One convenient thing about the flist technology is that it is possible to convert any Docker image into an flist, thanks to the ThreeFold Docker Hub Converter tool. It is very easy to do and we will show you how to proceed in this case study. For a quick guide on converting Docker images into flists, read this section of the ThreeFold Manual. Case Study Objective The goal of this case study is to give you enough information and tools so that you can build your own flist projects and deploy on the ThreeFold Grid. We will explore the different files needed to create the flist and explain the overall process. Instead of starting from scratch, we will analyze the Nextcloud flist directory in the tf-images ThreeFold repository. As the project is already done, it will be easier to get an overview of the process and the different components so you can learn to create your own. The Overall Process To give you a bird's-eye view of the whole project, here are the main steps: Create the Docker image Push the Docker image to the Docker Hub Convert the Docker image to a Zero-OS flist Deploy a micro VM with the flist on the ThreeFold Playground with Terraform One important thing to have in mind is that, when we create an flist, what we are doing is basically automating the required steps to deploy a given workload on the TFGrid. Usually, these steps would be done manually and step-by-step by an individual deploying on a micro or a full VM. Once we've successfully created an flist, we thus have a very quick way to deploy a specific workload while always obtaining the same result. This is why it is highly recommended to test a given deployment on a full or micro VM before building an flist. For example, in the case of building a Nextcloud All-in-One flist, the prerequisites would be to successfully deploy a Nextcloud AIO instance on a full VM by executing each step sequentially. This specific example is documented in the Terraform section Nextcloud All-in-One Guide of the System Administrators book. In our case, the flist we will be using has some specific configurations depending on the way we deploy Nextcloud (e.g. using or not the gateway and a custom domain). The Terraform main.tf we will be sharing later on will thus take all this into account for a smooth deployment. Docker Image Creation As we've said previously, we will explore the different components of the existing Nextcloud flist directory. We thus want to check the existing files and try to understand as much as possible how the different components work together. This is also a very good introduction to the ThreeFold ecosystem. We will be using the files available on the ThreeFold Github page. In our case, we want to explore the repository tf-images. If you go in the subsection tfgrid3, you can see many different flists available. In our case, we want to deploy the Nextcloud All-in-One Flist. Nextcloud Flist Directory Tree The Nextcloud flist directory tree is the following: We can see that the directory is composed of a Caddyfile, a Dockerfile, a README.md and two directories, scripts and zinit. We will now explore each of those components to have a good grasp of the whole repository and to understand how it all works together. To get a big picture of this directory, we could say that the README.md file provides the necessary documentation for the users to understand the Nextcloud flist, how it is built and how it works, the Caddyfile provides the necessary requirements to run the reverse proxy, the Dockerfile specifies how the Docker image is built, installing things such as openssh and the ufw firewall for secure remote connection, while the two folders, scripts and zinit, could be said to work hand-in-hand. Each file is a unit file for zinit. That means it specifies a single service for zinit to start. We'll learn more about these files later, but for now we can just note that each script file (ending with ) has an associated zinit file to make sure that the script is run. There are also some other files for running programs aside from our scripts. Caddyfile For our Nextcloud deployment, we are using Caddy as a reverse proxy. A reverse proxy is an application that sits in front of back-end applications and forwards client requests to those applications. Since Nextcloud AIO actually includes two web applications, both Nextcloud itself and the AIO management interface, we use the reverse proxy to serve them both on a single domain. It also allows us to make some changes on the fly to the content of the AIO site to considerably enhance the user experience. Finally, we also use Caddy to provide SSL termination if the user reserves a public IP and no gateway, since otherwise SSL termination is provided by the gateway. File: We can see in the first section () that we set a range of IP addresses as trusted proxy addresses. These include the possible source addresses for gateway traffic, which we mark as trusted for compatibility with some Nextcloud features. After the global config at the top, the line defines the port that Caddy will listen to and the domain that we are using for our site. This is important, because in the case that port is specified, Caddy will handle SSL certificates automatically. The following blocks define behavior for different URL paths that users might try to access. To begin, we have . This is how we place the AIO management app in a \"subfolder\" of our main domain. To accomplish that we need a few rules that rewrite the contents of the returned pages to correct the links. We also add some text replacements here to accomplish the enhancements mentioned earlier, like automatically filling the domain entry field. With the line, we specify that requests to all URLs starting with should be sent to the web server running on port of . That's the port where the AIO server is listening, as we'll see below. There's also a couple of header rewrite rules here that correct the links for any redirects the AIO site makes. The line is needed to support a feature where users open the AIO interface from within Nextcloud. This redirects the original request to the correct equivalent within the \"subfolder\". Then there's a second line, which is the catch-all for any traffic that didn't get intercepted earlier. This handles the actual Nextcloud app and sends the traffic to its separate server running on port . The section starting with ensures that the user will receive an understandable error message when trying to access the Nextcloud deployment before it has fully started up. Dockerfile We recall that to make a Docker image, you need to create a Dockerfile. As per the Docker documentation, a Dockerfile is \"a text document that contains all the commands a user could call on the command line to assemble an image\". File: We can see from the first line that this Dockerfile uses a base image of Ubuntu Linux version 22.04. With the first RUN command, we refresh the package lists, and then install openssh, ufw and other dependencies for our Nextcloud uses. Note that we also install curl so that we can quickly install Docker. With the second RUN command, we install zinit and we give it execution permission with the command . More will be said about zinit in a section below. With the third RUN command, we install caddy and we give it execution permission with the command . Caddy is an extensible, cross-platform, open-source web server written in Go. For more information on Caddy, check the Caddy website. With fourth RUN command, we download and give proper permissions to the script . On a terminal, the common line to install Docker would be . To understand really what's going here, we can simply go to the link provided at the line https://get.docker.com for more information. The fifth RUN command runs the script to properly install Docker within the image. Once those commands are run, we proceed to copy into our Docker image the necessary folders and as well as the Caddyfile. Once this is done, we give execution permissions to all scripts in the scripts folder using . Finally, we set an entrypoint in our Dockerfile. As per the Docker documentation, an entrypoint \"allows you to configure a container that will run as an executable\". Since we are using zinit, we set the entrypoint . README.md File The README.md file has the main goal of explaining clearly to the user the functioning of the Nextcloud directory and its associated flist. In this file, we can explain what our code is doing and offer steps to properly configure the whole deployment. We also give the necessary steps to create the Docker image and convert it into an flist starting directly with the Nextcloud directory. This can be useful for users that want to create their own flist, instead of using the official ThreeFold Nextcloud flist. To read the complete README.md file, go to this link. scripts Folder The scripts folder contains without surprise the scripts necessary to run the Nextcloud instance. In the Nextcloud Flist case, there are five scripts: caddy.sh nextcloud.sh nextcloud_conf.sh sshd_init.sh ufw_init.sh Let's take a look at each of them. caddy.sh File: The script caddy.sh sets the proper port depending on the network configuration (e.g. IPv4 or Gateway) in the first if/else section. In the second if/else section, the script also makes sure that the proper domain is given to Nextcloud All-in-One. This quickens the installation process as the user doesn't have to set the domain in Nextcloud AIO after deployment. We also disable a feature that's not relevant if the user didn't reserve an IPv4 address and we insert a note about that. sshd_init.sh File: This file starts with a shebang () that instructs the operating system to execute the following lines using the Bash shell. In essence, it lets us write with the same outcome as , assuming the file is executable. The goal of this script is to add the public key within the VM in order for the user to get a secure and remote connection to the VM. The two lines starting with create the necessary folders. The lines starting with give the owner the permission to write and read the content within the folders. Finally, the line will write the public SSH key in a file within the VM. In the case that the flist is used as a weblet, the SSH key is set in the Playground profile manager and passed as an environment variable when we deploy the solution. ufw_init.sh File: The goal of the script is to set the correct firewall parameters to make sure that our deployment is secure while also providing the necessary access for the Nextcloud users. The first two lines starting with are self-explanatory. We want to restrain incoming traffic while making sure that outgoing traffic has no restraints. The lines starting with open the ports necessary for our Nextcloud instance. We note that ssh is port 22, http is port 80 and https is port 443. This means, for example, that the line is equivalent to the line . Port 8443 can be used to access the AIO interface, as an alternative to using the \"subfolder\" on deployments with a public IPv4 address. Finally, the port 3478 is used for Nextcloud Talk. The line will provide additional security by denying connection from IP addresses that attempt to initiate 6 or more connections within a 30-second period. nextcloud.sh File: The nextcloud.sh script is where the real action starts. This is where we run the Nextcloud All-in-One docker image. Before discussing the main part of this script, we note that the loop is used to ensure that the command starts only after the Docker daemon has properly started. The code section starting with is taken from the Nextcloud All-in-One repository on Github with some slight modifications. The last line indicates that the Docker image being pulled will always be the latest version of Nextcloud All-in-One. We note here that Nextcloud AIO is published on the port 8000 and 8080. We also note that we set restart to always. This is very important as it will make sure that the Nextcloud instance is restarted if the Docker daemon reboots. We take the opportunity to note that the way zinit configures micro VMs, the Docker daemon restarts automatically after a reboot. Thus, this latter fact combined with the line ensures that the user that the Nextcloud instance will restart after a VM reboot. We also set 11000 as the Apache port with an IP binding of 0.0.0.0. For our deployment, we want to skip the domain validation, thus it is set to true. Considering the line , when this command is run interactively, it prevents the user from accidentally killing the spawned AIO container. While it is not of great importance in our case, it means that zinit will not kill the container if the service is stopped. For more information on this, we invite the readers to consult the Nextcloud documentation. nextcloud_conf.sh File: The script nextcloud_conf.sh ensures that the network settings are properly configured. In the first section, we use a function called nc_ready (). This function will makes sure that the rest of the script only starts when the Nextcloud container is healthy. We note that the comments present in this script explain very well what is happening. In short, we want to set the Nextcloud instance according to the user's choice of network. For example, the user can decide to deploy using a ThreeFold gateway or a standard IPv4 connection. If the VM has a gateway and a public IPv4, then Nextcloud All-in-One will set the STUN/TURN servers to the gateway domain which does not point to the public IP, so we use the IP instead. zinit Folder Next, we want to take a look at the zinit folder. But first, what is zinit? In a nutshell, zinit is a process manager (pid 1) that knows how to launch, monitor and sort dependencies. It thus executes targets in the proper order. For more information on zinit, check the zinit repository. When we start the Docker container, zinit will parse each unit file in the folder and execute the contained command according to the specified parameters. In the Nextcloud Flist case, there are eight .yaml files: caddy.yaml dockerd.yaml nextcloud-conf.yaml nextcloud.yaml ssh-init.yaml sshd.yaml ufw-init.yaml ufw.yaml ssh-init.yaml and sshd.yaml We start by taking a look at the ssh-init.yaml and sshd.yaml files. File: In this zinit service file, we define a service named , where we tell zinit to execute the following command: . This unit file thus runs the script we covered in a previous section. We also note that is set to and this means that it should only be executed once. This directive is often used for setup scripts that only need to run once. When it is not specified, the default value of means that zinit will continue to start up a service if it ever dies. Now, we take a look at the file : File: We can see that this file executes a line from the Bash shell. It is important to note that, with zinit and .yaml files, you can easily order the executions of the files with the directive. In this case, it means that the service will only run after . ufw-init.yaml and ufw.yaml Let's take a look at the files ufw-init.yaml and ufw.yaml. File: The file is very similar to the previous file . File: We can see that the file will only run once and only after the file has been run. This is important since the file executes the script . We recall this script allows different ports in the firewall. Once those ports are defined, we can then run the command . This will start the ufw firewall. caddy.yaml This is also very similar to previous files and just runs the Caddy script as a oneshot. dockerd.yaml We now take a look at the file dockerd.yaml. File: This file will run the dockerd daemon which is the persistent process that manages containers. We also note that it sets the data to be stored in the directory /mnt/data/docker, which is important because we will mount a virtual disk there that will provide better performance, especially for Docker's storage driver. nextcloud.yaml File: The file runs after dockerd. This file will execute the script we saw earlier. We recall that this script starts the Nextcloud All-in-One image. nextcloud-conf.yaml File: Finally, the file runs after . This file will execute the script we saw earlier. We recall that this script starts the Nextcloud All-in-One image. At this point, the deployment is complete. Putting it All Together We've now gone through all the files in the Nextcloud flist directory. You should now have a proper understanding of the interplay between the zinit (.yaml) and the scripts (.sh) files as well as the basic steps to build a Dockerfile and to write clear documentation. To build your own Nextcloud docker image, you would simply need to clone this directory to your local computer and to follow the steps presented in the next section Docker Publishing Steps. To have a look at the complete directory, you can always refer to the Nextcloud flist directory on the ThreeFold tf-images repository. Docker Publishing Steps In this section, we show the necessary steps to publish the Docker image to the Docker Hub. To do so, we need to create an account and an access token. Then we will build the Docker image and push it to the Docker Hub. Create Account and Access Token To be able to push Docker images to the Docker Hub, you obviously need to create a Docker Hub account! This is very easy and note that there are many great tutorials online about Docker. Here are the steps to create an account and an access token: Go to the Docker Hub Click and follow the steps given by Docker On the top right corner, click on your account name and select On the left menu, click on Click on Choose an Access Token description that you will easily identify then click Make sure to set the permissions On your local computer, make sure that the Docker daemon is running Write the following in the command line to connect to the Docker hub: Run Set the password You now have access to the Docker Hub from your local computer. We will then proceed to push the Docker image to the Docker Hub. Build and Push the Docker Image Make sure the Docker Daemon is running Build the docker container (note that, while the tag is optional, it can help to track different versions) Template: Example: Push the docker container to the Docker Hub Template: Example: You should now see your docker image on the Docker Hub when you go into the menu option . Note that you can access this link quickly with the following template: Convert the Docker Image to an Flist We will now convert the Docker image into a Zero-OS flist. Go to the ThreeFold Hub. Sign in with the ThreeFold Connect app. Go to the Docker Hub Converter section. Next to , add the docker image repository and name, see the example below: Template: Example: Click . Once the conversion is done, the flist is available as a public link on the ThreeFold Hub. To get the flist URL, go to the TF Hub main page, scroll down to your 3Bot ID and click on it. Under , you will see all your available flists. Right-click on the flist you want and select . This URL will be used when deploying on the ThreeFold Playground. We show below the template and an example of what the flist URL looks like. Template: Example: Deploy Nextcloud AIO on the TFGrid with Terraform We now proceed to deploy a Nextcloud All-in-One instance by using the Nextcloud flist we've just created. To do so, we will deploy a micro VM with the Nextcloud flist on the TFGrid using Terraform. Create the Terraform Files For this guide, we use two files to deploy with Terraform. The first file contains the environment variables and the second file contains the parameters to deploy our workloads. To facilitate the deployment, only the environment variables file needs to be adjusted. The main.tf file contains the environment variables (e.g. var.size for the disk size) and thus you do not need to change this file. Of course, you can adjust the deployment based on your preferences. That being said, it should be easy to deploy the Terraform deployment with the main.tf as is. For this example, we will be deployment with a ThreeFold gateway as well as a gateway domain. Copy the following content and save the file under the name : Make sure to add your own seed phrase and SSH public key. Simply replace the three dots by the content. Note that you can deploy on a different node than node 5453 for the vm1 node. If you want to deploy on another node than node 5453 for the gateway node, make sure that you choose a gateway node. To find a gateway node, go on the ThreeFold Dashboard Nodes section of the Explorer and select Gateways (Only). Obviously, you can decide to increase or modify the quantity in the variables , and . Note that in our case, we set the flist to be the official Nextcloud flist. Simply replace the URL with your newly created Nextcloud flist to test it! Copy the following content and save the file under the name : Deploy Nextcloud with Terraform We now deploy Nextcloud with Terraform. Make sure that you are in the correct folder containing the main and variables files. Initialize Terraform: Apply Terraform to deploy Nextcloud: Note that, at any moment, if you want to see the information on your Terraform deployment, write the following: Nextcloud Setup Once you've deployed Nextcloud, you can access the Nextcloud setup page by pasting the URL displayed on the line of the Terraform output. Conclusion In this case study, we've seen the overall process of creating a new flist to deploy a Nextcloud instance on a Micro VM on the TFGrid with Terraform. If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/flist_case_studies/flist_debian_case_study.md",
    "title": "Case Study: Debian 12",
    "url": "/labs/documentation/developers/flist/flist_case_studies/flist_debian_case_study",
    "content": "Introduction For this tutorial, we will present a case study demonstrating how easy it is to create a new flist on the ThreeFold ecosystem. We will be creating a Debian Flist and we will deploy a micro VM on the ThreeFold Playground and access our Debian deployment. To do all this, we will need to create a Docker Hub account, create a Dockerfile, a docker image and a docker container, then convert the docker image to a Zero-OS flist. After all this, we will be deploying our Debian workload on the ThreeFold Playground. You'll see, it's pretty straightforward and fun to do. You Said Flist? First, let's recall what an flist actually is and does. In short, an flist is a very effective way to deal with software data and the end result is fast deployment and high reliability. In a flist, we separate the metadata from the data. The metadata is a description of what files are in that particular image. It's the data providing information about the app/software. Thanks to flist, the 3Node doesn't need to install a complete software program in order to run properly. Only the necessary files are installed. Zero-OS can read the metadata of a container and only download and execute the necessary binaries and applications to run the workload, when it is necessary. Sounds great? It really is great, and very effective! One amazing thing about the flist technology is that it is possible to convert any Docker image into an flist, thanks to the ThreeFold Docker Hub Converter tool. If this sounds complicated, fear not. It is very easy and we will show you how to proceed in this case study. Case Study Objective The goal of this case study is to give you enough information and tools so that you can yourself build your own flist projects and deploy on the ThreeFold Grid. This case study is not meant to show you all the detailed steps on creating an flist from scratch. We will instead start with some files templates available on the ThreeFold repository tf-images. This is one of the many advantages of working with open-source projects: we can easily get inspiration from the already available codes of the many ThreeFold repositories and work our way up from there. The Overall Process To give you a bird's view of the whole project, here are the main steps: Create the Docker image Push the Docker image to the Docker Hub Convert the Docker image to a Zero-OS flist Deploy a micro VM with the flist on the ThreeFold Playground Docker Image Creation As we've said previously, we will not explore all the details of creating an flist from scratch. This would be done in a subsequent guide. For now, we want to take existing codes and work our way from there. This is not only quicker, but it is a good way to get to know the ThreeFold's ecosystem and repositories. We will be using the code available on the ThreeFold Github page. In our case, we want to explore the repository tf-images. If you go on the subsection tfgrid3, you can see many different flists available. In our case, we want to deploy the Debian Linux distribution. It is thus logic to try and find similar Linux distributions to take inspiration from. For this case study, we draw inspiration from the Ubuntu 22.04 directory. If we look at the Ubuntu 22.04 directory tree, this is what we get: We will now explore each of those files to get a good look at the whole repository and try to understand how it all works together. Dockerfile We recall that to make a Docker image, you need to create a Dockerfile. As per Docker's documentation, a Dockerfile is \"a Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image\". The Ubuntu 22.04 Dockerfile is as follows: File: We can see from the first line that the Dockerfile will look for the docker image . In our case, we want to get the Debian 12 docker image. This information is available on the Docker Hub (see Debian Docker Hub). We will thus need to change the line to the line . It isn't more complicated than that! We now have the following Dockerfile fore the Debian docker image: File: There is nothing more needed here. Pretty fun to start from some existing open-source code, right? Docker Image Script The other important file we will be looking at is the file. This is the basic script that will be used to properly set the docker image. Thankfully, there is nothing more to change in this file, we can leave it as is. As we will see later, this file will be executed by zinit when the container starts. File: zinit Folder Next, we want to take a look at the zinit folder. But first, what is zinit? In a nutshell, zinit is a process manager (pid 1) that knows how to launch, monitor and sort dependencies. It thus executes targets in the proper order. For more information on zinit, check the zinit repository. When we start the Docker container, the files in the folder zinit will be executed. If we take a look at the file , we find the following: start.shssh-init.yamlbash /start.shstdoutoneshottruesshd.yamlsshd.yamlssh-init.yamlREADME.mdRegisterAccount SettingsSecurityNew Access TokenGenerateRead, Write, Deletedocker login -u My ProfileDocker Image Name/docker_image_name:tagnameusername/debian12:latestConvert the docker imageNameCopy Clean LinkflistDeploy` That's it! You can now SSH into your Debian deployment and change the world one line of code at a time! * Conclusion In this case study, we've seen the overall process of creating a new flist to deploy a Debian workload on a Micro VM on the ThreeFold Playground. If you have any questions or feedback, please let us know by either writing a post on the ThreeFold Forum, or by chatting with us on the TF Grid Tester Community Telegram channel.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/developers/flist/flist_case_studies/flist_case_studies.md",
    "title": "Flist Case Studies",
    "url": "/labs/documentation/developers/flist/flist_case_studies",
    "content": "TABLE OF CONTENTS - Case Study: Debian 12 - Case Study: Nextcloud AIO",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/wallet_connector.md",
    "title": "Wallet Connector",
    "url": "/labs/documentation/dashboard/wallet_connector",
    "content": "Introduction To interact with TFChain, users can connect their TFChain wallet to the wallet connector available on the ThreeFold Dashboard. You can create a new wallet or import an existing wallet. Supported Networks Currently, we're supporting four different networks: - Dev net, for development purposes - https://dashboard.dev.grid.tf - QA net, for internal testing and verifications - https://dashboard.qa.grid.tf - Test net, for testing purposes - https://dashboard.test.grid.tf - Main net, for production-ready purposes - https://dashboard.grid.tf ! Create a Wallet To create a new wallet, open the ThreeFold Dashboard on the desired network, click on , enter the following information and click . - : The secret words of your Polkadot account. Click on the Create Account button to generate yours. - : Enter a valid email address. - : Choose a password and confirm it. This will be used to access your account. ! You will be asked to accept ThreeFold's Terms and Conditions: ! Once you've set your credentials, clicked on Connect and accepted the terms and conditions, your profile will be activated. Upon activation, you will find your Twin ID, Address and wallet current balance generated under your Mnemonics. ! Your current and locked balances will also be available at the top right corner of the dashboard. Here's an example of the balances you can find for your wallet. Some TFT is locked during utilization as the TFGrid bills you for your workloads and traffic. ! Import a Wallet You can import an existing wallet by entering in the associated seed phrase or HEX secret of the existing wallet. - To import a wallet created with the TF Dashboard, use the seed phrase provided when you created the account. - To import a wallet or a farm created on the TF Connect app, use the TFChain HEX secret. - From the menu, open Wallet -> Wallet name -> Info symbol (i), and then reveal and copy the TFChain Secret. When you import a new wallet, you can decide a new password and email address, i.e. you only need the mnemonics to import an existing wallet on the dashboard.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/dashboard.md",
    "title": "ThreeFold Dashboard",
    "url": "/labs/documentation/dashboard",
    "content": "Explore, control, and manage your ThreeFold Grid resources effortlessly through our integrated Dashboard. Deploy solutions seamlessly while gaining full control, all within a unified interface. The ThreeFold Dashboard is a revolutionary platform that simplifies the deployment process, allowing users to effortlessly interact with the TFGrid using intuitive web components known as weblets. What is the ThreeFold Dashboard? The ThreeFold Dashboard is a dynamic environment designed for both seasoned developers and newcomers alike. It offers a seamless and accessible browser experience, making it easy to deploy solutions on the TFGrid through the use of weblets. In the context of the Dashboard, a weblet is a compiled JavaScript web component that can be effortlessly embedded within the HTML page of a web application. This modular approach allows for flexible and intuitive interactions, facilitating a user-friendly deployment process. The backend for the weblets is introduced with the Javascript Client which communicates to TFChain over RMB. Table of Contents - Wallet Connector - TFGrid - Deploy - Farms - TFChain Advantages - It is a non-code easy way to deploy a whole solution on the TFGrid. - It is 100% decentralized, there is no server involved. - It is powerful tool designed to empower individuals and organizations with seamless control and management over their ThreeFold Grid resources. - It provides an intuitive web-based interface that allows users to effortlessly deploy, monitor, and scale their workloads on the decentralized and sustainable ThreeFold Grid infrastructure. Dashboard You can access the ThreeFold Dashboard on different TF Chain networks. - https://dashboard.dev.grid.tf for Dev net - https://dashboard.qa.grid.tf for QA net - https://dashboard.test.grid.tf for Test net - https://dashboard.grid.tf for Main net Limitations - Regarding browser support, we're only supporting Google Chrome browser (and thus Brave browser) at the moment with more browsers to be supported soon. - Deploys one thing at a time. - Might take sometime to deploy a solution like Peertube, so you should wait a little bit until it's fully running. List of Mainnet Backend Stacks We provide independent mainnet backend stacks. Here is the current list: - https://dashboard.grid.tf - https://dashboard.be.grid.tf - https://dashboard.fin.grid.tf - https://dashboard.sg.grid.tf - https://dashboard.us.grid.tf",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfgrid/tfgrid.md",
    "title": "TFGrid",
    "url": "/labs/documentation/dashboard/tfgrid",
    "content": "TFGrid Check and use all things related to the threefold grid. Including: - The status of ThreeFold services from the Grid Status website. - The statistics of all nodes that are available on the ThreeFold grid from Node Statistics. - The health and status of Zero-OS nodes that are available on the ThreeFold grid from Node Monitoring. ! TABLE OF CONTENTS* - Grid Status - Node Statistics - Node Monitoring",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfgrid/node_statistics.md",
    "title": "Node Statistics",
    "url": "/labs/documentation/dashboard/tfgrid/node_statistics",
    "content": "Statistics Statistics allows you to see the distribution of 3Nodes all over the world with information on how many nodes are available and in which country. ! Here you can see generic overview about: - Number of Nodes - Number of Dedicated Nodes - Number of Farms - Number of Countries - The capacity CRU, SRU, HRU, MRU - Number of GPUs - Number of Gateways - Number of Twins - The number of public IPs available - Number of Contracts",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfgrid/node_monitoring.md",
    "title": "Node Monitoring",
    "url": "/labs/documentation/dashboard/tfgrid/node_monitoring",
    "content": "Node Monitoring Monitor and check the metrics and status of Zero-OS nodes from Node Monitoring. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfgrid/grid_status.md",
    "title": "Grid Status",
    "url": "/labs/documentation/dashboard/tfgrid/grid_status",
    "content": "Grid Status Check the status and health of ThreeFold services with the Grid Status website. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/tfchain.md",
    "title": "TFChain",
    "url": "/labs/documentation/dashboard/tfchain",
    "content": "Introduction ThreeFold Chain (TFChain) is the base layer for everything that interacts with the grid. Nodes, farms, users are registered on the chain. It plays the central role in achieving decentralised consensus between a user and Node to deploy a certain workload. A contract can be created on the chain that is essentially an agreement between a node and user. Twins A twin is the central Identity object that is used for every entity that lives on the grid. A twin optionally has an IPV6 planetary network address which can be used for communication between twins no matter of the location they are in. A twin is coupled to a private/public keypair on chain. This keypair can hold TFT on TF Chain. Farms A farm must be created before a Node can be booted. Every farms needs to have an unique name and is linked to the Twin that creates the farm. Once a farm is created, a unique ID is generated. This ID can be used to provide to the boot image of a Node. Nodes When a node is booted for the first time, it registers itself on the chain and a unique identity is generated for this Node. Node Contract A node contract is a contract between a user and a Node to deploy a certain workload. The contract is specified as following: We don't save the raw workload definition on the chain but only a hash of the definition. After the contract is created, the user must send the raw deployment to the specified node in the contract. He can find where to send this data by looking up the Node's twin and contacting that twin over the planetary network. Rent Contract A rent contract is also a contract between a user and a Node, but instead of being able to reserve a part of the node's capacity, the full capacity is rented. Once a rent contract is created on a Node by a user, only this user can deploy node contracts on this specific node. A discount of 50% is given if a the user wishes to rent the full capacity of a node by creating a rent contract. All node contracts deployed on a node where a user has a rent contract are free of use expect for the public ip's which can be added on a node contract. Name Contract A name contract is a contract that specifies a unique name to be used on the grid's webgateways. Once a name contract is created, this name can be used as and entrypoint for an application on the grid. Contract billing Every contract is billed every 1 hour on the chain, the amount that is due is deducted from the user's wallet every 24 hours or when the user cancels his contract. The total amount acrued in those 24 hours gets send to following destinations: - 10% goes to ThreeFold - 5% goes to staking pool wallet (to be implemented in a later phase) - 50% goes to certified sales channel - 35% TFT gets burned See pricing for more information on how the cost for a contract is calculated. Contract locking To not overload the chain with transfer events and others we choose to lock the amount due for a contract every hour and after 24 hours unlock the amount and deduct it in one go. This lock is saved on a user's account, if the user has multiple contracts the locked amount will be stacked. Contract grace period When the owner of a contract runs out funds on his wallet to pay for his deployment, the contract goes in to a Grace Period state. The deployment, whatever that might be, will be unaccessible during this period to the user. When the wallet is funded with TFT again, the contract goes back to a normal operating state. If the grace period runs out (by default 2 weeks) the user's deployment and data will be deleted from the node. DAO See DAO for more information on the DAO on TF Chain. Farming Policies See farming_policies for more information on the farming policies on TF Chain. Node Connection price A connection price is set to every new Node that boots on the Grid. This connection price influences the amount of TFT farmed in a period. The connection price set on a node is permanent. The DAO can propose the increase or decrease of the connection price. At the time of writing the connection price is set to $ 0.08. When the DAO proposes a connection price and the vote is passed, new nodes will attach to the new connection price. Node Certifiers Node certifiers are entities who are allowed to set a node's certification level to Certified. The DAO can propose to add or remove entities that can certify nodes. This is usefull for allowing approved resellers of Threefold nodes to mark nodes as Certified. A certified node farms 25% more tokens than DIY a node.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/tf_token_transfer.md",
    "title": "TF Token Transfer",
    "url": "/labs/documentation/dashboard/tfchain/tf_token_transfer",
    "content": "TF Token Transfer Manage your TFT on TFChain. Transfer TFT between TFChain accounts You can transfer TFTs between two accounts that exist on the same chain. > Remark: testnet and mainnet both have the same TFTs but as the 2 chains are different, there is no way to do a direct transfer between accounts on testnet and on mainnet. You can transfer TFTs by recipient address or recipient twin id; by selecting the needed tab. Transfer by twin id Fill in the recipient twin id, the amount of tokens to transfer, and click on . ! Transfer by address Fill in the recipient address, the amount of tokens to transfer, and click on . ! There is no transfer fee, just a signing fee of TFT.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/tf_token_bridge.md",
    "title": "TF Token Bridge",
    "url": "/labs/documentation/dashboard/tfchain/tf_token_bridge",
    "content": "TF Token Bridge Transferring TFT between Stellar and Tfchain Usage This document will explain how you can transfer TFT from Tfchain to Stellar and back. ! Prerequisites - Stellar wallet - Account on TFchain (use TF Dashboard to create one). Stellar to Tfchain You can deposit to Tfchain using the bridge page on the TF Dashboard A deposit of tokens from the Stellar network onto TF-Chain needs to happen from a Stellar wallet, like in the ThreeFold Connect App. You have 2 options: - TFT needs to be sent to the bridge account - specifying in the memo field the twinID that was generated with the Twin creation e.g. twin_110 (dont forget twin_) - Note there is a transaction cost of 1 TFT. Or - You can scan the QR code ! Tfchain to Stellar You can bridge back to stellar using the bridge page on the dashboard, click withdraw: After indicating the destination address and the amount to be transferred, click Send. ! A withdraw fee of 1 TFT will be taken, so make sure you send a larger amount as 1 TFT. The amount withdrawn from TFChain will be sent to your Stellar wallet.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/tf_minting_reports.md",
    "title": "TF Minting Reports",
    "url": "/labs/documentation/dashboard/tfchain/tf_minting_reports",
    "content": "TF Minting Reports TFGrid Minting Explorer, works by simply entering a receipt hash and you will get full minting report in return. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/your_profile/your_profile.md",
    "title": "Your Profile",
    "url": "/labs/documentation/dashboard/tfchain/your_profile",
    "content": "The TF Twin management feature of the ThreeFold Dashboard enables users to create, manage, and monitor their individual digital entities known as Twins. A Twin can represent a virtual machine (VM) or a container running on the ThreeFold Grid. With the Twin management, users can easily deploy and scale their workloads, allocate resources, and configure networking and storage settings for their Twins. ! The twin details consists of three main items. - Your unique identifier for your twin on the ThreeFold chain. - Your public address on the ThreeFold chain. - A relay is a component that facilitates the reliable and secure transfer of messages between different entities within the ThreeFold ecosystem. To create a twin check the Wallet Connector Section. To complete the KYC process, read the next page.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/your_profile/kyc.md",
    "title": "KYC",
    "url": "/labs/documentation/dashboard/tfchain/your_profile/kyc",
    "content": "Introduction To maintain a secure and trusted ecosystem and to ensure compliance with regulatory standards across different regions, all users seeking to deploy resources on the TFGrid must complete a Know Your Customer (KYC) verification process. This KYC requirement is essential to protect network participants, including farmers, and to prevent the potential misuse of the network. By completing the KYC process, users contribute to a safer and more transparent environment for all stakeholders. Prerequisites - ThreeFold Chain account with at least 100 TFT - Create a wallet on TFChain - Buy TFT - Bridge TFT from Stellar to TFChain Steps - Go to the section of the section of the Dashboard - Make sure that you have at least 100 TFT in the wallet - If you see , simply transfer a minimum of 100 TFT to your account ! - Click on ! - Follow the steps provided by Idenfy - When this is done, the Dashboard will reload automatically and should show > Note: The confirmation process done by Idenfy is usually very quick but can take up to several minutes in some cases. References For further details regarding data storage and handling, please refer to Idenfy Security and Compliance documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/tf_dao/tf_dao_voting_weight.md",
    "title": "Voting Weight Example",
    "url": "/labs/documentation/dashboard/tfchain/tf_dao/tf_dao_voting_weight",
    "content": "Introduction As we've seen in the previous section, voting weights for the TF DAO are tracked per farm to keep it easy and traceable. Let's see an example of how the weight of a farm is calculated. Example For this example, we will take a node from QANet: The node information is the following: ! The Rust code that calculates node weight extracted from TFChain can be found here. When we apply this code to the current node, we get the following: We can then simply paste this code in the Rust playground to obtain the and values of this node: We can then simply put these numbers in the equation shown in the last section to obtain the farm weight. Note that in this case, the farm has 2 different nodes with the same and values. We can see that the farm has the weight .",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/tfchain/tf_dao/tf_dao.md",
    "title": "TF DAO",
    "url": "/labs/documentation/dashboard/tfchain/tf_dao",
    "content": "The TFChain DAO (i.e. Decentralized Autonomous Organization) feature integrates decentralized governance capabilities into the ThreeFold Dashboard. It enables community members to participate in decision-making processes and to contribute to the evolution of the ThreeFold ecosystem. Through the TFChain DAO, users can propose, vote on, and implement changes to the network protocols, policies, and operations, fostering a collaborative and inclusive environment. An Introduction to the DAO concept A decentralized autonomous organization (DAO) is an entity with no central leadership. Decisions get made from the bottom-up, governed by a community organized around a specific set of rules enforced on a blockchain. DAOs are internet-native organizations collectively owned and managed by their members. They have built-in treasuries that are only accessible with the approval of their members. Decisions are made via proposals the group votes on during a specified period. Prerequisites to Vote Voting for a DAO proposal is very simple. You first need to meet certain requirements to be able to vote. - Have a Threefold farm - Have at least one active 3node server on the farm - If you created your farm with the Threefold Connect app - Import your farm on the Threefold Dashboard How to Vote for a Proposal To vote, you need to log into your Threefold Dashboard account, go to TF DAO section of TFChain and vote for an active proposal. Make sure to read the proposition and ask questions on the Threefold Forum proposition post if you have any. The Goal of the Threefold DAO The goal of DAO voting system is to gather the thoughts and will of the Threefold community and build projects that are aligned with the ethos of the project. We encourage anyone to share their ideas. Who knows? Your sudden spark of genius might lead to an accepted proposal on the Threefold DAO! Voting Weight The DAO votes are weighted as follows: - Get all linked farms to the account - Get all nodes per farm - Get compute and storage units per node (CU and SU) - Compute the weight of a farm: Voting weights are tracked per farm to keep it easy and traceable. Thus, if an account has multiple farms, the vote will be registered per farm. For more information on voting weight, check this example.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/farms/your_farms.md",
    "title": "Your Farms",
    "url": "/labs/documentation/dashboard/farms/your_farms",
    "content": "Farms This comprehensive guide aims to provide users with detailed instructions and insights into efficiently managing their _Farms_. Farms encompass servers and storage devices contributing computational and storage capabilities to the grid, empowering users to oversee, maintain, and optimize their resources effectively. Getting Started After logging in to the TF Dashboard, on the sidebar click on Dashboard then _Your Farms_ . Create a New Farm If you want to start farming, you need a farmID, the ID of the farm that is owning the hardware node(s) you connect to the TFGrid. Currently on: - Devnet - Qanet - Testnet - Mainnet Click and choose a name. ! ! Click on . The farm is by default set up as 'DIY'. A farm can become certified through certification program. Also a pricing policy is defined. Pricing policy is currently the same for all farms, the field is created for future use. Manage Your Farms You can browse your Farms in _Farms_ table; Farms table contains all your own farms and its your entry point to manage your farm as in the following sections. ! Add a Public IP to Your Farm If you have public IPv4 addresses available that can be used for usage on the TFGrid, you can add them in your farm. Click , specify the addresses, the gateway and click . You can add them one by one or using range of IPs. Some notes about adding a new IPs: - Be careful not to create a new IP range that contains an IP address that already exists; doing so will result in an error. - Verify that both the gateway address and the IP address are correct. - Be careful not to include the same gateway address in a new IP range. ! ! ! Deleting IPv4 addresses is also possible here. The gives an indication of whether an IP is currently used. If it is 0, it is safe to remove it. ! Add a Stellar Address for Payout In a first phase, farming of tokens still results in payout on the Stellar network. So to get the farming reward, a Stellar address needs to be provided. ! ! You can read about different ways to store TFT here. Make sure to use a Stellar wallet for your farming rewards. Generate Your Node Bootstrap Image Once you know your farmID, you can set up your node on TFGrid3. Click on . ! Read more Zero-OS bootstrap image here. Additional Information After booting a node, the info will become available in table, including the status info along with the minting and fixup receipts. ! Clicking on the node statistics will open up a calendar where you can view the periods the node was minting or undergoing a fixup. Clicking on the periods will show a popup with the start and end datetimes, receipt hash and the amount of TFTs minted (if it is a minting receipt). ! You can also download a single node's receipts using the button within the node statistics. Moreover, you can download all of the nodes' receipts using the button on the top left corner of the farm nodes table. Manage Your Nodes as in farms table _Nodes_ table contains all your own nodes and its your entry point to manage your farm as in the following sections. Node Information Expand your node information by clicking on the expand button in the target node row. Extra Fees You can set a price for the special hardware you’re providing e.g. GPUs while renting. ! - Under the Your Nodes table, locate the target node and click Set Additional Fees under Actions - Set a monthly fee (in USD) and click Save Public Configuration To configure public IP addresses to a specific Node ! - Under the Your Nodes table, locate the target node and click Add a public config under Actions - Fill in the necessary information and click save. Only the IPv4 address and gateway are necessary. > The IPv6 address and the Domain are optional but if you provide The IPv6 you have to provide its Domain. Required: ISP-Provided IP Blocks Only The IP addresses you add to your farm must be from dedicated ISP IP blocks, not regular consumer IP addresses. You need to obtain proper IP blocks from your Internet Service Provider (ISP) that are specifically assigned for this purpose. Standard router IP addresses cannot be used. The Difference Between IPs Assigned to Nodes Versus a Farm IPs assigned to a farm are available to be rented by workloads. They can be assigned to virtual machines for example. IPs assigned to nodes enable each node to become a gateway.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/farms/simulator.md",
    "title": "Simulator",
    "url": "/labs/documentation/dashboard/farms/simulator",
    "content": "Simulator A tool provided by ThreeFold that allows users to estimate and calculate potential earnings from farming on the ThreeFold Grid. Farming refers to the process of providing computing resources, such as storage and processing power, to the ThreeFold Grid and earning tokens in return. The tf-farming-calculator takes into account various factors, including the amount of resources contributed, the duration of farming, and the current market conditions, to provide users with an estimate of their potential earnings in terms of ThreeFold Tokens (TFT). !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/farms/node_installer.md",
    "title": "Node Installer",
    "url": "/labs/documentation/dashboard/farms/node_installer",
    "content": "Node Installer Generate your own boot device for your system and download Zero-OS Images from Zero-OS Bootstrap !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/farms/farms_finder.md",
    "title": "Farm Finder",
    "url": "/labs/documentation/dashboard/farms/farms_finder",
    "content": "Farms The farms page provides a more detailed view for the farms available on the ThreeFold grid With detailed information about any of the available farms. ! You can search for a specific farm using the farms filters. ! You can see all of the farm details by clicking on a farm record. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/farms/farms.md",
    "title": "Farms",
    "url": "/labs/documentation/dashboard/farms",
    "content": "Farms Here you will find everything farming related. this includes: - Monitoring, creating, and updating your farms from the Your Farms section where you can also check your nodes and update multiple things like the public configuration and extra fees of the node. - Exploring and finding farms that are available on the ThreeFold grid from the Farm Finder section. - Generating your own boot device for your system from the Node Installer section. - Estimating and calculating potential earnings from farming on the ThreeFold Grid from the Simulator section. ! TABLE OF CONTENTS* - Your Farms - Farm Finder - Node Installer - Simulator",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/your_contracts.md",
    "title": "Your Contracts",
    "url": "/labs/documentation/dashboard/deploy/your_contracts",
    "content": "Contracts From the Contracts section you can check your contracts by navigating to the then tab from the sidebar. From there you will see the , the list is split into three different sections. these sections are: Node contracts ! Name contracts ! Rent contracts ! This list includes the following information about each contract. - Contract ID. - Contract Type. - Contract State (Created, Deleted, GracePeriod). - Solution Typw - Billing Rate (in TFT/Hour). - Solution Name. - Created At. - Expiration (Only appears if the contract is in GracePeriod). - Node ID - Node Status (Up, Down, Standby). - Show Details (This button will display the detailed information of the desired contract). ! Cancel Contract You can also cancel the target contract/s by select the contract you want to cancel - Click on the checkbox on the left side of the contract row - Click on the delete button in the bottom right of the table - Review the contract/s ID then click on Delete button Note: >- You can Cancel all you contracts by clicking on the checkbox on the left side of the table header then click on Delete button. >- It is advisable to remove the contract from its solution page, especially when multiple contracts may be linked to the same instance.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/ssh_keys.md",
    "title": "SSH Keys",
    "url": "/labs/documentation/dashboard/deploy/ssh_keys",
    "content": "SSH Keys Add, update or generate your SSH key with a click of a button. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/pricing_calculator.md",
    "title": "Pricing Calculator",
    "url": "/labs/documentation/dashboard/deploy/pricing_calculator",
    "content": "TF Resource Calculator A tool provided by ThreeFold that allows users to estimate and calculate potential cost of a deployment on the ThreeFold grid. The resource calculator takes into account various factors, including deployment resources, node certification, currnet balance, and in return it displays an accurate estimate for the deployment in terms of ThreeFold Tokens (TFT) and in USD per month. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/node_finder.md",
    "title": "Node Finder",
    "url": "/labs/documentation/dashboard/deploy/node_finder",
    "content": "Overview The Node Finder page provides a more detailed view for the nodes available on the ThreeFold grid with detailed information and statistics about nodes. ! Filters You can use the filters to narrow your search and find a node with the desired specifications. ! ! You can use the toggle buttons to filter your search. - Dedicated nodes - Gateways nodes - GPU nodes - Rentable nodes You can choose a location for your node, with filters such as region and country. This can be highly useful for edge cloud projects. Filtering nodes by their status (up, down, standby) can also improve your search. If your deployment has some minimum requirements, you can easily filter relevant nodes with the different resource filters. Node Details You can see all of the node details when you click on its row: ! > Note: The network speed test displayed in the Node Finder is updated every 6 hours. To access the public Grafana page displaying additional information, click on : ! Gateway Nodes To see only gateway nodes, enable Gateways in the filters. ! Dedicated Nodes Dedicated machines are 3Nodes that can be reserved and rented entirely by one user. The user can thus reserve an entire node and use it exclusively to deploy solutions. This feature is ideal for users who want to host heavy deployments with the benefits of high reliability and cost effectiveness. To see only dedicated nodes, that are either rented by you or rentable, enable Dedicated Nodes in the filters. ! Reservation When you have decided which node to reserve, you can easily rent it from the page. You can also rent a dedicated node directly on a deployment page available from the main sections , or . To reserve a node, simply click on on the node row. ! To unreserve a node, simply click on on the node row. ! Note that once you've rented a dedicated node that has a GPU, you can deploy GPU workloads. Billing & Pricing - Once a node is rented, there is a fixed charge billed to the tenant regardless of deployed workloads. - Any subsequent NodeContract deployed on a node where a rentContract is active (and the same user is creating the nodeContracts) can be excluded from billing (apart from public ip and network usage). - Billing rates are calculated hourly on the TFGrid. - While some of the documentation mentions a monthly price, the chain expresses pricing per hour. The monthly price shown within the manual is offered as a convenience to users, as it provides a simple way to estimate costs. Discounts - Received Discounts for renting a node on TFGrid internet capacity - 50% for dedicated node (TF Pricing policies) - A second level discount up to 60% for balance level see Discount Levels - Discounts are calculated every time the grid bills by checking the available TFT balance on the user wallet and seeing if it is sufficient to receive a discount. As a result, if the user balance drops below the treshold of a given discount, the deployment price increases. GPU Nodes To see only nodes with GPU, enable GPU Node in the filters. ! This will filter nodes and only show nodes with GPU. You can see several information such as the model of the GPU and a GPU score. ! You can click on a given GPU node and see the GPU details. ! The ID that’s needed to be used during deployments is easily accessible and has a button to copy to the clipboard. GPU Support To use a GPU on the TFGrid, users need to rent a dedicated node. Once they have rented a dedicated node equipped with a GPU, users can deploy workloads on their dedicated GPU node. GPU Support Links The ThreeFold Manual covers many ways to use a GPU node on the TFGrid. Read this section to learn more.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/images.md",
    "title": "Images",
    "url": "/labs/documentation/dashboard/deploy/images",
    "content": "Images Find or Publish your Flist from Zero-OS Hub ! Learn more about the Zero-OS Hub here.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/domains.md",
    "title": "Domains",
    "url": "/labs/documentation/dashboard/deploy/domains",
    "content": "Introduction The Domains solution allows users to securely expose servers hosted on local machines or VMs to the public internet. Users are required to specify the machine's IP, which can be a Mycelium IP, an Yggdrasil IP, or a public IP (IPv4 or IPv6). Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Domains Deployment ! - Enter a subdomain to be added to your domain - The flag allows the user to use a custom domain - Choose a gateway node to deploy your static website - Enter the port used to access the machine - Enter the machine's IP - It can be a Mycelium IP, an Yggdrasil IP, or a public IP (IPv4 or IPv6) Once this is done, you can see a list of all of your deployed instances: ! Click on the button Visit under Actions to go to your exposed website!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/deploy.md",
    "title": "Deploy",
    "url": "/labs/documentation/dashboard/deploy",
    "content": "Deploy Here you will find everything related to deployments on the ThreeFold grid. This includes: - Checking the cost of a deployment using Pricing Calculator - Finding a node to deploy on using the Node Finder - Deploying a workload: Virtual Machines, Labs Applications or Domains - Consulting Your Contracts on the TFGrid - Finding or publishing Flists from Images - Updating or generating your SSH key from SSH Keys ! TABLE OF CONTENTS* - Pricing Calculator - Node Finder - Virtual Machines - Labs - Domains - Your Contracts - Images - SSH Keys",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/vm_intro/vm_intro.md",
    "title": "Virtual Machines",
    "url": "/labs/documentation/dashboard/deploy/vm_intro",
    "content": "On the TFGrid, you can deploy both micro and full virtual machines. TABLE OF CONTENTS - Full Virtual Machine - Micro Virtual Machine - Micro and Full VM Differences - Add a Domain to a VM",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/vm_intro/vm_differences.md",
    "title": "Micro and Full VM Differences",
    "url": "/labs/documentation/dashboard/deploy/vm_intro/vm_differences",
    "content": "Introduction We present the main differences between a micro VM and a full VM. This is useful information when it comes to choosing the proper deployment on the TFGrid. Micro Virtual Machine - It's meant to host microservice. and the user should enter the entrypoint. - The user has no control over ther kernel used to run the machine. - The network setup will be created for the user. And the vm's init process can assume that it will be fully set up (according to the config the user provided) by the time it is started. - Mountpoints will also be setup for the user. The environment variables passed will be available inside the the vm. Full Virtual Machine - The users run their own operating system, but the image must be - EFI bootable - Cloud-init enabled - It contains a default disk attached, as the boot image will be copied to this disk. - The default disk is mounted on / so if you want to attach any additional disks, you have to choose a different mounting point. - A /image.raw file is used as \"boot disk\". This /image.raw is copied to the first attached volume of the vm. Cloud-init will take care of resizing the filesystem on the image to take the full disk size allocated in the deployment.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/vm_intro/vm.md",
    "title": "Micro Virtual Machine",
    "url": "/labs/documentation/dashboard/deploy/vm_intro/vm",
    "content": "Introduction We present the steps to deploy a micro VM on the TFGrid. Deployment Deploy a new virtual machine on the Threefold Grid - Make sure you have a wallet - From the sidebar click on Solutions - Click on Micro Virtual Machine __Process__ : ! - Fill in the instance name: it's used to reference the VM in the future. - Choose the image from the drop down (e.g Alpine, Ubuntu) or you can click on and manually specify the flist URL and the entrypoint. - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 25 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - to connect the Virtual Machine to Planetary network - to enable Mycelium on the virtual machine - to add a wireguard acces to the Virtual Machine - flag to add GPU to the Virtual machine - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy the Virtual Machine on > Or you can select a specific node with manual selection. ! In the section , you can add any environment variables that the machine might need ! In the section , You can attach one or more disks to the Virtual Machine by clicking on the Disks tab and the plus sign and specify the following parameters - Disk name - Disk size in the bottom of the page you can see a list of all of the virual machines you deployed. you can click on for more details ! You can also go to JSON tab for full details !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/vm_intro/fullVm.md",
    "title": "Full Virtual Machine",
    "url": "/labs/documentation/dashboard/deploy/vm_intro/fullVm",
    "content": "Introduction We present the steps to deploy a full VM on the TFGrid. Deployment Deploy a new full virtual machine on the Threefold Grid - Make sure you have a wallet - From the sidebar click on Applications - Click on Full Virtual Machine Process: ! - Fill in the instance name: it's used to reference the Full VM in the future. - Choose the image from the drop down (e.g Alpine, Ubuntu) or you can click on and manually specify the flist URL and the entrypoint. - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 25 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - to connect the Virtual Machine to Planetary network - to enable Mycelium on the virtual machine - to add a wireguard access to the Virtual Machine - flag to add GPU to the Virtual machine - To deploy a Full VM with GPU, you first need to rent a dedicated node - For more information on GPU, consult this section of the manual. - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - Choose the node to deploy the Full Virtual Machine on ! - If you have more than one SSH keys set, you can click on to select which one to use for this deployment. You can attach one or more disks to the Virtual Machine by clicking on the Disks tab and the plus sign and specify the following parameters ! - Disk name - Disk size At the bottom of the page, you can see a list of all of the virtual machines you deployed. You can click on for more details: ! You can also go to JSON tab for full details: ! Difference Between Full VM and Micro VM - Full VM contains a default disk attached to it which is not the case in the Micro VM where you needed to make sure to attach a disk to it or the VM will fail - The default disk is mounted on / so if you want to attach any additional disks, you have to choose a different mounting point - Only cloud init flists can be deployed on Full VM. You can check official Threefold flists here - In Full VM, you need to mount the additional disks manually after the VM is deployed Manually Mounting Additional Disk - You can follow the following commands to add your disk manually: Check All Disks Attached to the VM The additional disk won't be mounted and you won't find it listed Create a Mount Directory New file system Mount drive !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/vm_intro/add_domain.md",
    "title": "Add a Domain to a VM",
    "url": "/labs/documentation/dashboard/deploy/vm_intro/add_domain",
    "content": "Introduction We cover the overall process to add a domain to a virtual machine running on the ThreeFold Grid. This process works for both micro and full virtual machines. Preparation - Deploy a virtual machine - Click on the button Manage Domains under Actions ! - Open the Add New Domain tab ! Add New Domain There are different parameters to fill in to add a new domain. ! - Subdomain - The subdomain is used to reference to the complete domain name. It is randomly generated, but the user can write a specific subdomain name. - The subdomain prefix (e.g. fvm3748domainguide) is decided as follows: - Solution name (e.g. fvm) - Twin ID (e.g. 3748) - Deployment name (e.g. domainguide) - The complete subdomain is thus composed of the subdomain prefix mentioned above and the subdomain entered in the Subdomain field. - Custom Domain - You can also use a custom domain. - In this case, instead of having a gateway subdomain and a gateway name as your domain, the domain will be the custom domain entered in this field. - If you select Custom domain, make sure to set a DNS A record pointing to the gateway IP address on your domain name registrar. - Select domain - Choose a gateway for your domain. - Port - Choose the port that exposes your application instance on the virtual machine which the domain will point to. - By default, it is set to 80. - TLS Passthrough - Disabling TLS passthrough will let the gateway terminate the traffic. - Enabling TLS passthrough will let the backend service terminate the traffic. - Supported Interfaces - You can select the network interface. Note that you will only see the network(s) provided when you deployed the VM. - - - - - Once you've filled the domain parameters, click on the Add button. The message Successfully deployed gateway will be presented once the domain is properly added. ! Domains List Once your domain is set, you can access the Domains List tab to consult its parameters. To visit the domain, simply click on the Visit button under Actions. ! Name The name is the subdomain (without the prefix) Contract ID Contract ID of the domain Domain Without a custom domain (default) The complete domain name (e.g. ) is composed of the subdomain prefix, the subdomain and the gateway domain. - The subdomain prefix (e.g. ), as mentioned above. - The subdomain (e.g. ), chosen during the domain creation. - The gateway domain (e.g. ), based on the chosen gateway. - With a custom domain - The domain will be your custom domain (). TLS Passthrough The TLS passthrough status can be either Yes or No. Backend The network IP and the chosen port of the domain. Status OK is displayed when the domain is properly set. Actions * Use the Visit button to open the domain URL. At all time, you can click on Reload to reload the Domains List parameters. Delete a Domain To delete a domain, open the Manage Domains window, in the tab Domains lists select the domain you wish to delete and click Delete. ! By clicking the Delete button, the deletion will start and the domain will be deleted from this virtual machine.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/wordpress.md",
    "title": "WordPress",
    "url": "/labs/documentation/dashboard/deploy/applications/wordpress",
    "content": "Introduction WordPress is the most popular CMS on the market, powering 65.2% of websites whose CMS we know. That translates to 42.4% of all websites – nearly half of the internet. It is a popular option for those who want to build a website or a blog. Prerequisites - Make sure you have a wallet - From the sidebar click on Solutions - Click on Wordpress Domain Name and IP Address A domain name is required to use WordPress. You can either use your own, which we'll call a custom domain, or you can get a free subdomain from a gateway node. Note that this won't impact the function of your deployment, it's just a matter of preference. If you want to use your own domain, follow the steps for custom domain wherever you see them below. Another choice to make before launching your WordPress instance is whether you want to reserve a public IPv4 for the deployment. Note that renting a public IPv4 address is an extra cost. If you do not enable IPv4, the deployment will be provided a gateway IPv4 address. If you're not sure and just want the easiest, most affordable option, do not enable public IPv4 nor custom domain. DNS Details with Custom Domain In this section, we cover the essential DNS information when deploying a WordPress instance with a custom domain. You can skip this section if you did not enable Custom Domain in Domain Name. As a general reference, here is what setting a DNS A record can look like: ! This record type indicates the IP address of a given domain. DNS Record with Public IPv4 Consider the following if you've enabled Custom Domain in Domain Name and Public IPv4 in Network. After deployment, you will have access to the IPv4 address of the VM you deployed on. You will need to add a DNS A record (Host: \"@\", Value: \"VM_IP_Address\") to your domain to access WordPress. DNS Record with Gateway Consider the following if you've enabled Custom domain in Domain Name but did not enable Public IPv4 in Network. Before deploying the WordPress instance, you will have access to the gateway IPv4 address. You will need to add a DNS A record (Host: \"@\", Value: \"Gateway_IP\") to your domain to access WordPress. DNS Propagation When setting a DNS A record, it might take time for the DNS to propagate. It is possible that you see the following message when opening the WordPress page: >\"This site can't be reached. DNS address could not be found. Diagnosing the problem.\" This is normal. You might simply need to wait for the DNS to propagate completely. You can check if the DNS records are propagated globally with DNS propagation check services such as DNS Checker. You can use this tool to verify that your domain is properly pointing to either the VM or the gateway IPv4 address. Deployment Process In this section, we cover the steps to deploy a WordPress instance on the Playground. ! - Enter an instance name or leave the auto-generated instance name - Enter the admin information or leave the auto-generated information - Username: This will be used as the MySQL DB username and for Wp-admin - Password: This will be used as the MySQL DB password and for Wp-admin - Email: This will be used for Wp-admin - Select a capacity package: - Small: \\{ cpu: 1, memory: 2 , diskSize: 15 \\} - Medium: \\{ cpu: 2, memory: 4 , diskSize: 50 \\} - Large: \\{ cpu: 4, memory: 16 , diskSize: 100 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - to enable Mycelium on the virtual machine - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - Certified flag to retrieve only certified nodes - Choose the location of the node - Country - Farm Name - Choose the node to deploy the WordPress instance on - Custom Domain flag lets the user to use a custom domain - Choose a gateway node to deploy your WordPress instance on - If you've enabled IPv4, you do not need to choose a gateway node Access WordPress In the section WordPress Instances, you can see a list of all of your deployed instances: ! You can click on Show details under Actions for more details about the WordPress deployment. ! ! For more detailed information, you can switch to the Json tab. ! WordPress Instance Website Click on Visit under Actions to go to the homepage of your WordPress instance. ! ! WordPress Instance Admin Page Click on Admin Panel to go to the WordPress admin page (wp-admin) of your WordPress instance. ! Enter the Username and the Password that you provided in the config section to log into the admin panel. ! ! WordPress Instance Credentials At any time, you can find the credentials of your WordPress instance by clicking on the Show details button under Actions. ! Troubleshooting If you get a while connecting to the website, you might simply need to wait for the deployment to complete.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/umbrel.md",
    "title": "Umbrel",
    "url": "/labs/documentation/dashboard/deploy/applications/umbrel",
    "content": "Introduction Umbrel is an OS for running a personal server in your home. Self-host open source apps like Nextcloud, Bitcoin node, and more. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Umbrel Process : ! - Enter an instance name. - Enter a Username - will be used to create Umbrel dashboard account. - Enter a Password - Will be used to login to the Umbrel dashboard. - Must be 12 to 30 characters . - Select a capacity package: - Small: \\{ cpu: 1, memory: 2, diskSize: 10 \\} - Medium: \\{ cpu: 2, memory: 4 , diskSize: 50 \\} - Large: \\{ cpu: 4, memory: 16 , diskSize: 100 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - to connect the Virtual Machine to Planetary network - to enable Mycelium on the virtual machine - to add a wireguard access to the Virtual Machine - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy the Umbrel instance on > Or you can select a specific node with manual selection. After Deploying: You can see a list of all of your deployed instances ! - You can click on for more details about the Umbrel deployment ! - For more detailed information, you can switch to tab ! - Click on Admin Panel to go to the dashboard of your Umbrel instance! - Enter the Password that you provided in section to login into Umbrel dashboard. > Forget the credentials? You can find them with button. ! > Warning: Due to the nature of the grid, shutdown, or restart your umbrel from the dashboard MAY make some unwanted behaviors.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/tfrobot.md",
    "title": "TFRobot",
    "url": "/labs/documentation/dashboard/deploy/applications/tfrobot",
    "content": "Introduction TFROBOT () is a command line interface tool that offers simultaneous mass deployment of groups of VMs on the ThreeFold Grid, with support of multiple retries for failed deployments, and customizable configurations, where you can define node groups, VMs groups and other configurations through a YAML or a JSON file. Consult the ThreeFoldTech TFROBOT repository for the latest updates and read the basics to get up to speed if needed. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on TFRobot Deployment ! - Fill in the instance name: it's used to reference the TFRobot instance in the future. - Minimum specs: - 1 vcore - 2 GB of memory - 25 GB of storage - flag to retrieve only dedicated nodes (rentable or rented by you) - flag to retrieve only certified nodes - Choose the location of the node - - - - Select a node to deploy your TFRobot instance on. > Or you can select a specific node with manual selection. After that is done, you can see a list of your deployed TFRobot instances: ! Using TFRobot Once you've deployed the TFRobot app from the Dashboard, you can read the docs to learn how to use it: - Configuration File - Deployment - Commands and Flags - Supported Configurations",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/taiga.md",
    "title": "Taiga",
    "url": "/labs/documentation/dashboard/deploy/applications/taiga",
    "content": "Introduction Taiga is the project management tool for multi-functional agile teams. It has a rich feature set and at the same time it is very simple to start with through its intuitive user interface. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Taiga Deployment ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. tg98taigar.gent02.dev.grid.tf - Enter administrator information including Username, Email and Password. This admin user will have full permission on the deployed instance. - Select a capacity package: - Small: \\{cpu: 2, memory: 4, diskSize: 100 \\} - Medium: \\{cpu: 4, memory: 8, diskSize: 150 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 250 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy the Taiga instance on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Funkwhale instance on. There's also an optional Mail Server tab if you'd like to have your Taiga instance configured with an SMTP server. The SMTP configuration supports both and . ! After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Taiga instance! ! Troubleshooting If you get a while connecting to the website, you might simply need to wait for the deployment to complete.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/subsquid.md",
    "title": "Subsquid",
    "url": "/labs/documentation/dashboard/deploy/applications/subsquid",
    "content": "Introduction Subsquid indexer is a piece of software that reads all the blocks from a Substrate based blockchain, decodes and stores them for processing in a later stage. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Subsquid Deployment ! - Enter an instance name. - Enter an endpoint for a supported substrate chain. You can find the list of endpoints of supported cahins here. - Select a capacity package: - Small: \\{cpu: 1, memory: 2 , diskSize: 50 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 100 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 250 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Subsquid instance on. After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Subsquid indexer instance! !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/static_website.md",
    "title": "Static Website",
    "url": "/labs/documentation/dashboard/deploy/applications/static_website",
    "content": "Introduction Static Website is an application where a user provides a GitHub repository URL for the files to be automatically served online using Caddy. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Static Website Deployment ! - Enter an instance name - Enter the HTTPS URL for the Git repository that needs to be cloned - Enter the Git Branch if available - Enter the html directory that needs to be served if available - Select a capacity package: - Small: \\{cpu: 1, memory: 2 , diskSize: 50 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 100 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 250 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on - Note: You can select a specific node with manual selection - flag allows the user to use a custom domain - Choose a gateway node to deploy your static website Once this is done, you can see a list of all of your deployed instances: ! Click on the button Visit under Actions to go to your static website!",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/presearch.md",
    "title": "Presearch",
    "url": "/labs/documentation/dashboard/deploy/applications/presearch",
    "content": "Introduction Presearch is a community-powered, decentralized search engine that provides better results while protecting your privacy and rewarding you when you search. This weblet deploys a Presearch node. Presearch Nodes are used to process user search requests, and node operators earn Presearch PRE tokens for joining and supporting the network. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Presearch Deploy a Presearch Node ! - Enter an instance name. - You need to sign up on Presearch in order to get your Presearch Registration Code. To sign up, go to the Presearch website, create your account and then head to your dashboard to find your registration code. - Choose the network - flag gives the virtual machine a Public IPv4 - to connect the Virtual Machine to Planetary network - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy the Virtual Machine on > Or you can select a specific node with manual selection. Migrate an Existing Presearch Node to the TFGrid Now what if you already have a Presearch node deployed somewhere and would like to migrate to Threefold? We got you! All you need to do is: 1. Login to your old server that has your node via SSH. 2. Run in order to generate your key-pair. 3. Head to the Restore tab in the Presearch weblet and paste your key-pair in the fields below and you'll be good to deploy! ! After that is done you can see a list of all of your deployed instances ! Now head to your dashboard again and scroll down to Current Nodes, you'll see your newly created node up and connected! ! Verify if a 3Node Already Runs a Presearch Workload You can do the following to verify if a Presearch workload deployed without a public IP address already has a Presearch workload running. Note that you will first need to deploy a Presearch workload on the 3Node. After deployment, you can SSH into the VM and do the verification. SSH into the VM running the Presearch workload List running containers and identity the Presearch container Print the logs of the Presearch container If there is no other Presearch workload running on the 3Node, you will see a similar output: > 2023-10-16T12:18:33.780Z info: Node is listening for searches... If there is another Presearch workload running on the 3Node, you will see a similar output: > 2023-10-16T12:24:00.346Z error: Duplicate IP: This IP Address is already running another Node. Only one Node is permitted per IP Address. * If there is another Presearch workload running, you will need to either deploy on another 3Node with a public IP or deploy on another node without a public IP that isn't running a Presearch deployment. Learn More About Presearch To learn more about Presearch, you can read the Presearch documentation.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/peertube.md",
    "title": "Peertube",
    "url": "/labs/documentation/dashboard/deploy/applications/peertube",
    "content": "Introduction Peertube aspires to be a decentralized and free/libre alternative to video broadcasting services. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Peertube Deployment ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. the applied format Ex. pt100peerprod.gent02.dev.grid.tf - Enter an email and password which will be used for the admin login. - Select a capacity package: - Small: \\{ cpu: 1, memory: 2, diskSize: 15 \\} - Medium: \\{ cpu: 2, memory: 4, diskSize: 100 \\} - Large: \\{ cpu: 4, memory: 16, diskSize: 250 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Peertube instance on. After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Peertube instance! ! > Please note it may take sometime to be ready Troubleshooting If you get a while connecting to the website, you might simply need to wait for the deployment to complete.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/openwebui.md",
    "title": "Open WebUI",
    "url": "/labs/documentation/dashboard/deploy/applications/openwebui",
    "content": "Introduction Open WebUI is an extensible, feature-rich, and user-friendly self-hosted AI platform designed to operate entirely offline. It supports various LLM runners like Ollama and OpenAI-compatible APIs, with built-in inference engine for RAG, making it a powerful AI deployment solution. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Open WebUI Hardware Considerations Open WebUI's performance varies significantly based on your hardware configuration. The table below shows recommended specifications for different usage levels. Considerer the following before deploying your Open WebUI instance. | Configuration | vCores | RAM (GB) | SSD (GB) | Rating with GPU | Rating CPU-Only | |--------------|--------|----------|----------|-----------------|-----------------| | Small | 2 | 8 | 25 | Minimum | Inadequate | | Medium | 4 | 16 | 50 | Good | Minimum | | Large | 8 | 32 | 100 | Excellent | Good | CPU-only deployments require at least the Medium configuration for acceptable performance. Deploying on nodes with high-end GPUs delivers faster inference and better handling of larger models. Deployment ! - Enter an instance name - Select a capacity package: - Small: \\{cpu: 4, memory: 16 , diskSize: 125 \\} - Medium: \\{cpu: 8, memory: 32, diskSize: 250 \\} - Large: \\{cpu: 16, memory: 64, diskSize: 500 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Mycelium address - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on - Note: You can select a specific node with manual selection - flag allows the user to use a custom domain (optional) - Choose a gateway node to deploy your Open WebUI website Once this is done, you can see a list of all of your deployed instances: ! Click on the button Visit under Actions to go to your Open WebUI instance! > Note: It will take a few minutes for the deployment to finalize. If you see , simply wait some time and refresh the page. Use the App This Open WebUI is deployed alongside with Ollama. To add Ollama models to Open WebUI, follow those steps: - Click on the username icon - Select - Select then - Click on the button - Pull a model from Ollama.com, e.g. ! Once this is done, you can use the model by creating a new chat. ! For more information, consult the official Open WebUI. Troubleshooting Models might require high resources. If you encounter the following error: , it might simply indicate that your need to provide higher resources (vcpu and GB of RAM). Check the logs for more information (using Mycelium or WireGuard). Check the GPU You can verify that the GPU is working with the following. > Note: Use for Nvidia and for AMD. - Check that the Docker container can access the GPU - Check the GPU resources live and run queries on Open WebUI. The resources allocated should vary:",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/nostr.md",
    "title": "Nostr",
    "url": "/labs/documentation/dashboard/deploy/applications/nostr",
    "content": "Introduction Nostr is a decentralized network protocol for a distributed social networking system. The name is an acronym for \"Notes and Other Stuff Transmitted by Relays\". It was designed with goals of censorship-resistance in mind. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Nostr Deployment ! - Enter a name for your deployment or keep the default name - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 25 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 100 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - flag gives the virtual machine an Yggdrasil address - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the node - Automated - Choose the location of the node - - - - Click on - Click on the node you want to deploy on - Manual selection - Select a specific node ID - Choose a domain - Use a custom domain by enabling - Choose a gateway domain for your instance - Click After deployment, you can see a list of all your deployed instances. To access the Nostr instance, click on the button called . !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/nodepilot.md",
    "title": "Node Pilot",
    "url": "/labs/documentation/dashboard/deploy/applications/nodepilot",
    "content": "Introduction This is a simple instance of upstream Node Pilot. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Node Pilot Deployment ! - Fill in the instance name: it's used to reference the node-pilot in the future. - Minimum specs: - 1 vcore - 256 MB of memory - 15 GB of storage - flag to retrieve only dedicated nodes (rentable or rented by you) - flag to retrieve only certified nodes - Choose the location of the node - - - - Select a node to deploy your node-pilot instance on. > Or you can select a specific node with manual selection. - When using the flist you get a node pilot instance ready out-of-box. You need to get a public IPv4 to get it to works. After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the registration page of your Node Pilot instance! ! You can go to and configure your node-pilot. You can upload a backup to the VM via ssh as well if you have a backup of a previous instance. What change compared to upstream node-pilot, we have out-of-box a transparent pre-filled blockchain database for some blochain (currently Fuse and Pokt as proof-of-concept). You can start one of theses blockchain in no-time and it will be automatically nearly sync already without the requirement of the full space locally nor downloading everything and killing bandwidth.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/nextcloud.md",
    "title": "Nextcloud",
    "url": "/labs/documentation/dashboard/deploy/applications/nextcloud",
    "content": "Introduction Nextcloud is a suite of client-server software for creating and using file hosting services. Nextcloud provides functionality similar to Dropbox, Office 365 or Google Drive when used with integrated office suites like Collabora Online or OnlyOffice. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Nextcloud Domain Names and Public IPs A domain name is required to use Nextcloud. You can either use your own, which we'll call a custom domain, or you can get a free subdomain from a gateway node. This won't impact the function of your deployment, it's just a matter of preference. If you want to use your own domain, follow the steps for custom domain wherever you see them below. Another choice to make before launching your Nextcloud instance is whether you want to reserve a public IPv4 for the deployment. Renting a public IP is an extra cost and is only required for the dedicated Nextcloud Talk video conferencing backend, recommended for calls with more than four participants. If you don't reserve a public IP, you can still use Talk in a more limited fashion. If you're not sure and just want the easiest, most affordable option, skip the public IP and use a gateway domain. Deploy Nextcloud On the ThreeFold Dashboard, click on solutions from the sidebar, then click on Nextcloud Choose a name for your deployment Note: You can use the auto-generated name if you want Select a capacity package: Minimum: \\{cpu: 2, memory: 4gb, diskSize: 50gb \\} Standard: \\{cpu: 2, memory: 8gb, diskSize: 500gb \\} Recommended: \\{cpu: 4, memory: 16gb, diskSize: 1000gb \\} Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - If you want to use a custom domain, click on Custom domain under Domain Name and write your domain name Example: The Select gateway box will be visible whenever a gateway is required. If so, click it and choose a gateway If you are also using a custom domain, you must set your DNS record now before proceeding. The IP of the gateway will appear on screen. Check below for more information Click Deploy Nextcloud Setup Once the weblet is deployed, the details page will appear. If you are using a custom domain with a public IPv4, you'll need to set your DNS record now using the IP address shown under Public IPv4. Before you can access Nextcloud itself, you'll need to decide which addons you want to install and complete a setup step. This is done through the AIO interface that's included with your deployment. To access it, you can visit the Nextcloud Setup link shown in the details page, or click on the Nextcloud Setup button under Actions in the deployments list to set up Nextcloud. Once you have access to the Nextcloud AIO setup page, you will be given a password composed of 8 words. Use this password to access the Nextcloud AIO interface page. Store this password somewhere safe. It's only possible to recover it by using SSH. On the next page, you can add Optionals addons if you want. Click on Download and start containers to start the Nextcloud instance. Once the containers are properly started, you can access the Nextcloud admin login page by clicking Open your Nextcloud. You will be given an Initial Nextcloud user name and an Initial Nextcloud password. Use these credentials to log into the admin page. Store these credentials somewhere safe. Later, if you want to access the Nextcloud admin login page, you can simply click on the button Open Nextcloud under Actions in the deployment list. The installation is now complete and you have access to your Nextcloud instance. DNS Details DNS Record with Public IPv4 After deployment, you will have access to the IPv4 address of the VM you deployed on. You will need to add a DNS A record (Host: \"@\", Value: \"VM_IP_Address\") to your domain to access Nextcloud. This record type indicates the IP address of a given domain. DNS Record with Gateway Before starting the deployment, you will need to add a DNS A record (Host: \"@\", Value: \"Gateway_IP\") to your domain. The gateway IP will be shown to you when you select this option. DNS Propagation When setting your own custom domain, it might take time for DNS to propagate. It is possible that you see the following message when opening the Nextcloud page: >\"This site can't be reached. DNS address could not be found. Diagnosing the problem.\" This is normal. You might simply need to wait for the DNS to propagate completely. Talk If you don't rent a public IP with your deployement, it's still possible to use Nextcloud Talk in a more limited fashion. It's generally understood that this method can work well for up to four participants in a call, and text chat also works without restriction. For larger calls, the dedicated backend, which requires a public IP, is recommended. While some calls can go entirely peer-to-peer and don't require any setup beyond installing the Talk app, a TURN server can be helpful to relay data when a peer-to-peer connection can't be established. There's more information on TURN servers after the install instructions. Install Talk To install Talk, do the following: Open the dropdown menu at the top right of the Nextcloud page Click on Apps In the left-side menu, select Social & communication Scroll down and locate the Talk app Click on Download and enable Once the Talk app is downloaded and enabled, you can find its icon at the top bar menu. TURN As mentioned before, TURN servers relay data to help call participants connect to each other. All data sent to TURN server is encrypted in this case, so it's perfectly safe to use a free public server. That said, such free servers are not common, because relaying video chat uses a lot of bandwidth. As of the time of writing, Open Relay Project is one example that includes instructions for use with Nextcloud Talk. TURN server configuration can be found by opening the Talk settings, like this: Open the dropdown menu at the top right of the Nextcloud page Click on Personal settings In the left-side menu, select Talk Use Talk Once you've installed Talk and optionally added a TURN server, you can use Talk to create video conferences. Note that the host of the video meeting might need to turn the VPN off before creating a new conversation. Backups and Updates In this section, we cover how to make a BorgBackup on the Nextcloud VM and we also cover how to make a backup of the Nextcloud BorgBackup to a secondary VM for additional redundancy. BorgBackup Create a BorgBackup In the section Backup and restore, you can set a BorgBackup of your Nextcloud instance. Add a mount point and a directory name for your backup (e.g. /mnt/data/backup) and click Submit backup location. After the creation of the backup location, write down the encryption password for backups somewhere safe and offline. Click Create backup to create a BorgBackup of your Nextcloud instance. This will stop all containers, run the backup container and create the backup. Once the backup is complete, you can click on Start containers to restart the Nextcloud instance. Automatic Borg Backups and Updates After the first manual backup of your Nextcloud instance is complete, you can set automatic backups and updates. In the section Backup and restore, open the dropdown menu Click here to reveal all backup options. In the section Daily backup and automatic updates, choose a time for your daily backup and click Submit backup time. To set automatic updates, make sure that the option Automatically update all containers, the mastercontainer and on is selected. Secondary VM Backup To allow for another layer of redundancy, you can set a secondary VM on the grid and make a daily backup from the BorgBackup of your Nextcloud instance to the secondary VM. The following shows how to do this. It is based on the File Transfer section of the manual. For the following, we take into account that the BorgBackup is located at on the VM running Nextcloud. You will need to deploy a full VM on the TFGrid and SSH into this secondary VM. SSH Connection We want to set an SSH connection between the Nextcloud VM and the secondary VM. Create SSH key pair on the secondary VM Copy the public key of the secondary VM Create the SSH directory on the Nextcloud VM Add the secondary VM public key in the file authorized_keys on the Nextcloud VM Check the openssh-server status As a test, you can check if you can SSH into the Nextcloud VM from the secondary VM Once the SSH connection is set up, we need to prepare a backup script. This is covered in the next subsection. Secondary VM Backup Script We now cover how to set up a backup script on the secondary VM. On the secondary VM, do the following: Set a directory for your Nextcloud backup Create the script file Write the following script. Here the log is saved in the same directory. Give permission to execute the script Set a cron job to run the script periodically Open the cron file At the bottom of the cron file, add the following to run the script everyday. For this example, we set the time at 18:00PM Once this is set up, this secondary VM will make a daily backup of the Nextcloud BorgBackup. It is a good idea to set this secondary backup to run the script a few hours after the daily BorgBackup. Troubleshooting Retrieve the Nextcloud AIO Password You can retrieve the Nextcloud AIO password (8 words) by writing the following command line on the VM hosting your Nextcloud instance: Access the Nextcloud Interface Page To access the Nextcloud interface page, follow those stepse Open your Nextcloud instance In the top right Profile menu, select Administration Settings Under Nextcloud All-in-One, click Open Nextcloud AIO Interface Check the DNS Propagation You can check if the DNS records are propagated globally with DNS propagation check services such as DNS Checker. You can use this tool to verify that your domain is properly pointing to the IPv4 address of the VM you deployed on. Questions and Feedback If you have any questions, you can ask the ThreeFold community for help on the ThreeFold Forum or on the ThreeFold Grid Tester Community on Telegram.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/mattermost.md",
    "title": "Mattermost",
    "url": "/labs/documentation/dashboard/deploy/applications/mattermost",
    "content": "Introduction Mattermost A single point of collaboration. Designed specifically for digital operations. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Mattermost Deployment ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. matter.gent02.dev.grid.tf - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 15 \\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50 \\} - Large: \\{cpu: 4, memory: 16, diskSize: 100 \\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Mattermost instance on. - There's also an optional SMTP Server tab if you'd like to have your Mattermost instance configured with an SMTP server. The SMTP configuration supports both and . ! After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Mattermost instance! You need to login using TFConnect so make sure you download the TFConnect app from your App Store. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/k8s.md",
    "title": "Kubernetes",
    "url": "/labs/documentation/dashboard/deploy/applications/k8s",
    "content": "Introduction Kubernetes is the standard container orchestration tool. On the TF grid, Kubernetes clusters can be deployed out of the box. We have implemented K3S, a full-blown Kubernetes offering that uses only half of the memory footprint. It is packaged as a single binary and made more lightweight to run workloads in resource-constrained locations (fits e.g. IoT, edge, ARM workloads). Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Kubernetes Configs tab ! - : Your Kubernetes Cluster name. - : It's used for authentication between your worker nodes and master node. You could use the auto-generated one or type your own. If you have more than one SSH keys set, you can click on to select which one to use for this deployment. Master and Workers tabs ! ! > Currently, we only support \"single-master-multi-worker\" k8s clusters. So you could always add more than one worker node by clicking on the + in the Worker tab. Kubeconfig Once the cluster is ready, you can SSH into the cluster using > IP can be the public IP, Mycelium or the Planetary Network IP Onced connected via SSH, you can execute commands on the cluster like , and to get the kubeconfig, you can find it in > if it doesn't exist in it can be in example: If you want to use kubectl through another machine, you need to change the line to be replace PLANETARYIP_OR_PUBLICIP with the IP you want to reach th cluster through. Manage Workers Add or Remove workers in any Kubernetes cluster. - Kubernetes DeployedList Weblet ! - Manager kubernetes workers ! - Add a new worker ! - Successfully added new worker ! - Delete a worker !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/jitsi.md",
    "title": "Jitsi",
    "url": "/labs/documentation/dashboard/deploy/applications/jitsi",
    "content": "Introduction Jitsi Meet is a set of Open Source projects which empower users to use and deploy video conferencing platforms with state-of-the-art video quality and features. For more details, check Jitsi documentation. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Jitsi Deployment Process : ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. _fw100myfunk_.gent02.dev.grid.tf - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 50\\} - Medium: \\{cpu: 2, memory: 4, diskSize: 100\\} - Large: \\{cpu: 4, memory: 16, diskSize: 250\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - flag gives the virtual machine an Yggdrasil address - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Jitsi instance on. After that is done you can see a list of all of your deployed instances ! Click on _Visit_ to go to the homepage of your Jitsi instance! ! Troubleshooting If you get a while connecting to the website, you might simply need to wait for the deployment to complete.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/jenkins.md",
    "title": "Jenkins",
    "url": "/labs/documentation/dashboard/deploy/applications/jenkins",
    "content": "Introduction Jenkins is a popular open-source automation server that enables developers to build, test, and deploy their applications continuously. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Jenkins Deployment __Process__ : ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. fw100myfunk.gent02.dev.grid.tf - Enter administrator information including Username, and Password. This admin user will have full permission on the deployed instance. - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 50\\} - Medium: \\{cpu: 2, memory: 4, diskSize: 100\\} - Large: \\{cpu: 4, memory: 16, diskSize: 250\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - flag gives the virtual machine an Yggdrasil address - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Jenkins instance on. After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Jenkins instance! ! Troubleshooting If you get a while connecting to the website, you might simply need to wait for the deployment to complete.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/gitea.md",
    "title": "Gitea",
    "url": "/labs/documentation/dashboard/deploy/applications/gitea",
    "content": "Introduction Gitea is a forge software package for hosting software development version control using Git as well as other collaborative features like bug tracking, code review, continuous integration, kanban boards, tickets, and wikis. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Gitea Deployment ! ! - Enter a name for your deployment or keep the default name - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 25\\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50\\} - Large: \\{cpu: 4, memory: 16, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Public IPv6 - flag gives the virtual machine an Yggdrasil address - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the node - Automated - Choose the location of the node - - - - Click on - Click on the node you want to deploy on - Manual selection - Select a specific node ID - Choose a domain - Use a custom domain by enabling - Choose a gateway domain for your instance - Set the - In the tab you can adjust the parameters or leave the default parameters - The SMTP configuration supports both and - The by default is the email you used when logging into the Dashboard - The is generated automatically but you can modify it - By default the SMTP server used for the is with its associated port - Enable TLS by clicking on the button - Click After deployment, you can see a list of all your deployed instances. To access the Gitea instance, click on the button called . ! Setting Up Gitea Once you've accessed the Gitea instance, you can adjust the if needed. ! Once you're ready, click on . ! Once the configuration is completed, you can register to the Gitea instance and start using it. !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/funkwhale.md",
    "title": "Funkwhale",
    "url": "/labs/documentation/dashboard/deploy/applications/funkwhale",
    "content": "Introduction Funkwhale is social platform to enjoy and share music. Funkwhale is a community-driven project that lets you listen and share music and audio within a decentralized, open network. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Funkwhale Deployment __Process__ : ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. fw100myfunk.gent02.dev.grid.tf - Enter administrator information including Username, Email and Password. This admin user will have full permission on the deployed instance. - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 50\\} - Medium: \\{cpu: 2, memory: 4, diskSize: 100\\} - Large: \\{cpu: 4, memory: 16, diskSize: 250\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Funkwhale instance on. After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Funkwhale instance! ! Troubleshooting If you get a while connecting to the website, you might simply need to wait for the deployment to complete.",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/discourse.md",
    "title": "Discourse",
    "url": "/labs/documentation/dashboard/deploy/applications/discourse",
    "content": "Introduction Discourse is the 100% open source discussion platform built for the next decade of the Internet. Use it as a mailing list, discussion forum, long-form chat room, and more! - Make sure you have a wallet - From the sidebar click on Applications - Click on Discourse Deployment ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. dc98newdisc.gent02.dev.grid.tf - Enter administrator information including Email. This admin will have full permission on the deployed instance. - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 15\\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50\\} - Large: \\{cpu: 4, memory: 16, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Discourse instance on. Unlike other solutions, Discourse requires that you have an SMTP server. So make sure you fill the fields in the Mail Server tab in order to deploy your instance successfully. The SMTP configuration supports both and . ! After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Discourse instance! !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/casper.md",
    "title": "CasperLabs",
    "url": "/labs/documentation/dashboard/deploy/applications/casper",
    "content": "Introduction Casper Network is a blockchain protocol built from the ground up to remain true to core Web3 principles and adapt to the needs of our evolving world. - Make sure you have a wallet - From the sidebar click on Applications - Click on Casperlabs Deployment __Process__ : ! - Enter an Application Name. It's used in generating a unique subdomain on one of the gateways on the network alongside your twin ID. Ex. cl98casp.gent02.dev.grid.tf - Select a capacity package: - Small: \\{cpu: 2, memory: 4, diskSize: 100\\} - Medium: \\{cpu: 4, memory: 16, diskSize: 500\\} - Large: \\{cpu: 8, memory: 32, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Public IPv4 - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the location of the node - - - - Choose the node to deploy on > Or you can select a specific node with manual selection. - flag lets the user to use a custom domain - Choose a gateway node to deploy your Casperlab instance on. If you have more than one SSH keys set, you can click on to select which one to use for this deployment. After that is done you can see a list of all of your deployed instances ! Click on Visit to go to the homepage of your Casperlabs instance! The node takes a long time in order for the RPC service to be ready so be patient! !",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/applications.md",
    "title": "Labs",
    "url": "/labs/documentation/dashboard/deploy/applications",
    "content": "Easily deploy your favourite applications on the ThreeFold grid with a click of a button. ! TABLE OF CONTENTS* - Algorand - CasperLabs - Discourse - Funkwhale - Gitea - Jenkins - Jitsi - Mattermost - Nextcloud - Node Pilot - Nostr - Open WebUI - Peertube - Presearch - Static Website - Subsquid - Taiga - TFRobot - Umbrel - WordPress",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/algorand.md",
    "title": "Algorand",
    "url": "/labs/documentation/dashboard/deploy/applications/algorand",
    "content": "Introduction Algorand builds technology that accelerates the convergence between decentralized and traditional finance by enabling the simple creation of next-generation financial products, protocols, and exchange of value. Prerequisites - Make sure you have a wallet - From the sidebar click on Applications - Click on Algorand Algorand Structure An Algorand node can be either a , or node. - Default: - This is a non-relay node. - It can run on Devnet, Testnet, Betanet and Mainnet. - Relay: - It can run only on Testnet and Mainnet. - Indexer: - It is a default node but with Archival Mode enabled which will make you able to query the data of the blockchain. Run Default Node You can select any network you want and for the node type select Default. If you have more than one SSH keys set, you can click on to select which one to use for this deployment. ! After the deployment is done, SSH into the node and run . Here you see your node runs on mainnet. ! Run Relay Node Relay nodes are where other nodes connect. Therefore, a relay node must be able to support a large number of connections and handle the processing load associated with all the data flowing to and from these connections. Thus, relay nodes require significantly more power than non-relay nodes. Relay nodes are always configured in archival mode. The relay node must be publicaly accessable, so it must have a public ip. ! Once the deployment is done, SSH into the node and run to see the status of the node. You can also check if the right port is listening (:4161 for testnet, and :4160 for mainnet). ! The next step accourding to the docs is to register your on Algorand Public SRV. Run Indexer Node The primary purpose of this Indexer is to provide a REST API interface of API calls to support searching the Algorand Blockchain. The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated. This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data. This node must also be an Archival node to make searching the entire blockchain possible. ! Once it's done, you can access the indexer API at port and here are the endpoint you can access. Select Capacity The default scenario capacity is computed based on the node (network/type) accourding to this reference. But you can still change this to higher values by selecting the option .",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/caprover/caprover_worker.md",
    "title": "CapRover Worker",
    "url": "/labs/documentation/dashboard/deploy/applications/caprover/caprover_worker",
    "content": "Introduction We present the steps to manage a CapRover Worker node. Step 1: Add a Default Docker Registry You'll have to add a default docker registry so other CapRover nodes in the cluster can download images from, and it can be self-hosted (managed by CapRover itself), to add it, go to -> . ! - Click button, then click ! You can check official documentation to know more about Docker registry options. Step 2: Attach a New Node to the Cluster ! - Add the public IPv4 address that has been returned from the worker deployment in the field. - Add your (you can use this command to get your private key). - Click button. You should see the new added node under Current Cluster Nodes ! If you faced any problem you can use the . Also you can check for Troubleshooting instruction on Caprover Troubleshooting",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/caprover/caprover_admin.md",
    "title": "CapRover Admin",
    "url": "/labs/documentation/dashboard/deploy/applications/caprover/caprover_admin",
    "content": "Introduction We present the steps to manage a CapRover Admin node. Step 1: Enable HTTPS ! You need to specify your email address. You will have to login again. ! > Now force https. You will have to login again, and you should notice https is now used. Step 2: Add a Default Docker Registry You'll have to add a default docker registry so other CapRover nodes in the cluster can download images from, and it can be self-hosted (managed by CapRover itself), to add it, go to -\\> . ! You can check official documentation to know more about Docker registry options. Step 3: Deploy an App ! just go to apps & follow the instructions, there is much more info on caprover website. Step 4: Enable Monitoring ! You should now see ! Step 5: Change Your Password - Go to and change your password. This is important for your own security. > Further information regarding the process of attaching a new node to the cluster can be found through the following documentation link: Attach a New Node to the Cluster",
    "category": "labs"
  },
  {
    "id": "/home/pcone/Documents/temp/code-25-07-22/info_grid/labs/docs/documentation/dashboard/deploy/applications/caprover/caprover.md",
    "title": "CapRover",
    "url": "/labs/documentation/dashboard/deploy/applications/caprover",
    "content": "Introduction CapRover is an extremely easy to use app/database deployment & web server manager for your NodeJS, Python, PHP, ASP.NET, Ruby, MySQL, MongoDB, Postgres, WordPress (and etc...) applications! It's blazingly fast and very robust as it uses Docker, nginx, LetsEncrypt and NetData under the hood behind its simple-to-use interface. - CLI for automation and scripting - Web GUI for ease of access and convenience - No lock-in! Remove CapRover and your apps keep working! - Docker Swarm under the hood for containerization and clustering - Nginx (fully customizable template) under the hood for load-balancing - Let's Encrypt under the hood for free SSL (HTTPS) Caprover is a very cool management app for containers based on Docker Swarm. It has following benefits : - Easy to deploy apps (in seconds) - Easy to create new apps - Super good monitoring - Can be extended over the TFGrid Requirements - Make sure you have a wallet - From the sidebar click on Orchestrators - Click on CapRover Configs Tab ! - Enter domain for you Caprover instance. - Be very careful about the domain name: it needs to be a wildcard domain name you can configure in your chosen domain name system. - Enter password for you Caprover instance. If you have more than one SSH keys set, you can click on to select which one to use for this deployment. Leader and Workers Tabs Each deployment will have one leader and there can be many workers. By default, CapRover is deployed on nodes with IPv4. ! ! Use the Leader and Workers tabs to add nodes to your deployment. - Enter a name for the deployment or keep the default name - Select a capacity package: - Small: \\{cpu: 1, memory: 2, diskSize: 25\\} - Medium: \\{cpu: 2, memory: 4, diskSize: 50\\} - Large: \\{cpu: 4, memory: 16, diskSize: 100\\} - Or choose a Custom plan - Choose the network - flag gives the virtual machine a Mycelium address - flag to retrieve nodes currently reserved by you - flag to retrieve nodes that can be reserved as dedicated nodes - flag to retrieve only certified nodes - Choose the node - Automated - Choose the location of the node - - - - Click on - Click on the node you want to deploy on - Manual selection - Select a specific node ID - Click Note: Worker nodes only accept SSH keys of RSA format. Deployment will take couple of minutes. The Domain Name As per the CapRover documentation, you need to point a wildcard DNS entry to the VM IP address of your CapRover Leader instance. You have to do this after having deployed the CapRover instance, otherwise you won't have access to the VM IP address. Let’s say your domain is example.com and your subdomain is subdomain. You can set \\.subdomain.example.com as an A record in your DNS settings to point to the VM IP address of the server hosting the CapRover instance, where \\ acts as the wildcard. To do this, go to the DNS settings of your domain name registrar, and set a wild card A record entry. On your domain name registrar, you can manage your DNS settings as such, with subdomain as an example: | Record | Host | Value | TTL | | ------ | ------------- | ------------- | --------- | | A | @ | VM IP address | Automatic | | A | subdomain | VM IP address | Automatic | | A | \\.subdomain | VM IP address | Automatic | We note here that @ is the root domain (@ takes the value of your domain name, e.g. example in example.com), subdomain is the name of your subdomain (it can be anything you want), and \\.subdomain is the wildcard for subdomain. If you don't want to use a subdomain, but only the domain, you could use a wildcard linked to the domain instead of the subdomain (e.g. put \\ instead of \\.subdomain in the column Host). Once you've point a wildcard DNS entry to your CapRover IP address and that the DNS is properly propagated, you can click the Admin Panel button to access CapRover. This will lead you to the following URL (with subdomain.example.com as an example): > captain.subdomain.example.com Note that, to confirm the DNS propagation, you can use a DNS lookup tool. As an example, you can use the URL captain.subdomain.example.com to check if the IP address resolves to the VM IP address. Domain Name Example In the following example, we pick which is a domain name that will point to the IP address of the CapRover instance (which we only know after deployment). ! > Note how the .apps.openly.life points to the public IPv4 address that has been returned from the deployment. How to Know the IP Address Go back to your CapRover weblet and go to the deployment list. Click on . ! - The public IPv4 address is visible in here ! - Now you can configure the domain name (see above, don't forget to point the wildcard domain to the public IP address) Go to the tab to see the Json ouput: ! How to Access the Admin Interface Make sure that you've point a wildcard DNS entry to your CapRover IP address (e.g. 185.206.122.136 in our example), as explained here. To access the CapRover admin interface, you can click the Admin Panel button or you can use the following admin URL template: https://captain.subdomain.example.com. Note the prefix captain and the usage of our wildcard domain. The admin password is generated and visible behind the button of your CapRover deployment. ! You should now see the following screen: ! How to Work with CapRover CapRover Admin Tutorial * CapRover Worker Tutorial",
    "category": "labs"
  }
]